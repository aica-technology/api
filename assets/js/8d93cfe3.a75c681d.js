"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[644],{8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>s});var t=a(6540);const o={},i=t.createContext(o);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:n},e.children)}},9399:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"reference/yaml-syntax","title":"YAML application syntax","description":"The following sections define the YAML syntax used to describe an AICA application.","source":"@site/docs/reference/03-yaml-syntax.md","sourceDirName":"reference","slug":"/reference/yaml-syntax","permalink":"/docs/reference/yaml-syntax","draft":false,"unlisted":false,"editUrl":"https://github.com/aica-technology/api/tree/main/docs/docs/reference/03-yaml-syntax.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"programmingReferenceSidebar","previous":{"title":"Manual Installation and Launch","permalink":"/docs/reference/manual-installation-launch"},"next":{"title":"Custom components","permalink":"/docs/category/custom-components"}}');var o=a(4848),i=a(8453);const r={sidebar_position:2},s="YAML application syntax",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Events",id:"events",level:2},{value:"Load or unload a component",id:"load-or-unload-a-component",level:3},{value:"Transition from one component to another",id:"transition-from-one-component-to-another",level:3},{value:"Trigger a lifecycle transition",id:"trigger-a-lifecycle-transition",level:3},{value:"Set a parameter",id:"set-a-parameter",level:3},{value:"Call a service",id:"call-a-service",level:3},{value:"Load or unload a hardware interface",id:"load-or-unload-a-hardware-interface",level:3},{value:"Load or unload a controller",id:"load-or-unload-a-controller",level:3},{value:"Activate or deactivate a controller",id:"activate-or-deactivate-a-controller",level:3},{value:"Manage sequences",id:"manage-sequences",level:3},{value:"Components",id:"components",level:2},{value:"Component",id:"component",level:3},{value:"Display name",id:"display-name",level:3},{value:"Position",id:"position",level:3},{value:"Log level",id:"log-level",level:3},{value:"Mapping",id:"mapping",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Component rate",id:"component-rate",level:4},{value:"Inputs and outputs",id:"inputs-and-outputs",level:3},{value:"Predicate events",id:"predicate-events",level:3},{value:"Special event predicates",id:"special-event-predicates",level:4},{value:"Hardware",id:"hardware",level:2},{value:"URDF",id:"urdf",level:3},{value:"Rate",id:"rate",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"Display name",id:"display-name-1",level:3},{value:"Position",id:"position-1",level:3},{value:"Controllers",id:"controllers",level:3},{value:"Conditions",id:"conditions",level:2},{value:"Simple conditions",id:"simple-conditions",level:3},{value:"Conditional operators",id:"conditional-operators",level:3},{value:"Not",id:"not",level:4},{value:"All",id:"all",level:4},{value:"Any",id:"any",level:4},{value:"One of",id:"one-of",level:4},{value:"Nested conditions",id:"nested-conditions",level:3},{value:"Sequences",id:"sequences",level:2},{value:"Sequence assert",id:"sequence-assert",level:3},{value:"Sequence wait",id:"sequence-wait",level:3},{value:"Waiting for a specified time interval",id:"waiting-for-a-specified-time-interval",level:4},{value:"Waiting for a condition or predicate",id:"waiting-for-a-condition-or-predicate",level:4},{value:"Using sequences to manage program flow",id:"using-sequences-to-manage-program-flow",level:3},{value:"On Start",id:"on-start",level:2},{value:"Buttons",id:"buttons",level:2},{value:"Position",id:"position-2",level:3},{value:"On Click",id:"on-click",level:3},{value:"Validating a YAML application",id:"validating-a-yaml-application",level:2},{value:"Validating a YAML application with Visual Studio Code",id:"validating-a-yaml-application-with-visual-studio-code",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"yaml-application-syntax",children:"YAML application syntax"})}),"\n",(0,o.jsx)(n.p,{children:"The following sections define the YAML syntax used to describe an AICA application."}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"An application description may contain some or all of the following top-level fields."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"on_start:\n  ...\n\ncomponents:\n  ...\n\nhardware:\n  ...\n\nconditions:\n  ...\n\nsequences:\n  ...\n\nbuttons:\n  ...\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The fields ",(0,o.jsx)(n.a,{href:"#components",children:(0,o.jsx)(n.code,{children:"components"})})," and ",(0,o.jsx)(n.a,{href:"#hardware",children:(0,o.jsx)(n.code,{children:"hardware"})})," define the main building blocks of the application.\nThe fields ",(0,o.jsx)(n.a,{href:"#conditions",children:(0,o.jsx)(n.code,{children:"conditions"})})," and ",(0,o.jsx)(n.a,{href:"#sequences",children:(0,o.jsx)(n.code,{children:"sequences"})})," define fine-grained application logic to\ntrigger ",(0,o.jsx)(n.a,{href:"#events",children:"application state events"}),". The ",(0,o.jsx)(n.a,{href:"#on-start",children:(0,o.jsx)(n.code,{children:"on_start"})}),"field defines a list of events to be triggered\nwhen the application is started, while the ",(0,o.jsx)(n.a,{href:"#buttons",children:(0,o.jsx)(n.code,{children:"buttons"})})," field defines interactive buttons to manually trigger\nevents through AICA Studio."]}),"\n",(0,o.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,o.jsxs)(n.p,{children:["Events drive the emergent behaviour of an application. Events can be triggered from internal application logic\nthrough ",(0,o.jsx)(n.a,{href:"#predicate-events",children:"component predicates"}),",\n",(0,o.jsx)(n.a,{href:"#conditions",children:"conditions"}),", ",(0,o.jsx)(n.a,{href:"#sequences",children:"sequences"}),", ",(0,o.jsx)(n.a,{href:"#buttons",children:"UI buttons"})," or\nautomatically ",(0,o.jsx)(n.a,{href:"#on-start",children:"at the start of the application"}),". In each of these cases, events are defined in the YAML\nunder specific event keywords."]}),"\n",(0,o.jsxs)(n.p,{children:["Read more about ",(0,o.jsx)(n.a,{href:"/docs/concepts/building-blocks/events",children:"events in the Concepts guide"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"load-or-unload-a-component",children:"Load or unload a component"}),"\n",(0,o.jsx)(n.p,{children:"Components can be loaded or unloaded by component name."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"load:\n  component: <component_name>\nunload:\n  component: <component_name>\n"})}),"\n",(0,o.jsx)(n.p,{children:"It is possible to load or unload multiple components simultaneously by specifying a list of components."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"load:\n  - component: component_a\n  - component: component_b\n"})}),"\n",(0,o.jsx)(n.h3,{id:"transition-from-one-component-to-another",children:"Transition from one component to another"}),"\n",(0,o.jsx)(n.p,{children:'Component A can invoke a transition to component B as a shorthand for "unload component A, load component B".'}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"transition: <component_name>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"trigger-a-lifecycle-transition",children:"Trigger a lifecycle transition"}),"\n",(0,o.jsxs)(n.p,{children:["Request a lifecycle transition on the component that is triggering the event, using one of the available transitions\n(",(0,o.jsx)(n.code,{children:"configure"}),", ",(0,o.jsx)(n.code,{children:"activate"}),", ",(0,o.jsx)(n.code,{children:"deactivate"}),", ",(0,o.jsx)(n.code,{children:"cleanup"}),", or ",(0,o.jsx)(n.code,{children:"shutdown"}),")."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"lifecycle: activate\n"})}),"\n",(0,o.jsx)(n.p,{children:"Request a lifecycle transition on a different component."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"lifecycle:\n  transition: activate\n  component: <component_name>\n"})}),"\n",(0,o.jsx)(n.p,{children:"Use a list to trigger multiple transitions from a single predicate."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"lifecycle:\n  - transition: activate\n    component: <component_name>\n  - transition: deactivate\n    component: <component_name>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"set-a-parameter",children:"Set a parameter"}),"\n",(0,o.jsx)(n.p,{children:"Set a parameter on the component that is triggering the event."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"set:\n  parameter: <parameter_name>\n  value: <parameter_value>\n"})}),"\n",(0,o.jsx)(n.p,{children:"Set a parameter on a different component."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"set:\n  parameter: <parameter_name>\n  value: <parameter_value>\n  component: <component_name>\n"})}),"\n",(0,o.jsx)(n.p,{children:"Set a parameter on the controller of a particular hardware interface."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"set:\n  parameter: <parameter_name>\n  value: <parameter_value>\n  controller: <controller_name>\n  hardware: <hardware_name>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"call-a-service",children:"Call a service"}),"\n",(0,o.jsx)(n.p,{children:"Call a service with no payload on the component that is triggering the event."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"call_service: <service_name>\n"})}),"\n",(0,o.jsx)(n.p,{children:"Call a service on a different component."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"call_service:\n  service: <service_name>\n  component: <component_name>\n"})}),"\n",(0,o.jsx)(n.p,{children:"Call a service on a controller."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"call_service:\n  service: <service_name>\n  controller: <controller_name>\n  hardware: <hardware>\n"})}),"\n",(0,o.jsx)(n.p,{children:"Call a service with a string payload."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'call_service:\n  service: <service_name>\n  component: <component_name>\n  payload: "..."\n'})}),"\n",(0,o.jsx)(n.p,{children:"The service payload can also be written as any standard YAML object. The application parser will automatically encode\nthe object into a string format when making the service call. In this case, the component service is responsible\nfor parsing the string back into a YAML object, dict or structure as necessary."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"call_service:\n  service: <service_name>\n  component: <component_name>\n  payload:\n    foo: some content\n    bar: [ x, y, z ]\n    baz:\n      a: 1\n      b: 2\n"})}),"\n",(0,o.jsx)(n.h3,{id:"load-or-unload-a-hardware-interface",children:"Load or unload a hardware interface"}),"\n",(0,o.jsx)(n.p,{children:"Load and initialize a hardware interface."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"load:\n  hardware: <hardware_name>\n"})}),"\n",(0,o.jsx)(n.p,{children:"Unload and destroy a hardware interface."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"unload:\n  hardware: <hardware_name>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"load-or-unload-a-controller",children:"Load or unload a controller"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"load:\n  hardware: <hardware_name>\n  controller: <controller_name>\n\nunload:\n  hardware: <hardware_name>\n  controller: <controller_name>\n"})}),"\n",(0,o.jsx)(n.p,{children:"Use a list to load or unload multiple controllers from a single predicate."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"load:\n  - hardware: <hardware_name>\n    controller: controller_a\n  - hardware: <hardware_name>\n    controller: controller_b\n"})}),"\n",(0,o.jsx)(n.h3,{id:"activate-or-deactivate-a-controller",children:"Activate or deactivate a controller"}),"\n",(0,o.jsxs)(n.p,{children:["Use the ",(0,o.jsx)(n.code,{children:"switch_controllers"})," event to list the controllers to be activated or deactivated for a specific hardware\ninterface."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"switch_controllers:\n  hardware: <hardware_name>\n  activate: [ <controller_one>, <controller_two> ]\n  deactivate: [ <controller_three>, <controller_four> ] \n"})}),"\n",(0,o.jsx)(n.p,{children:"To activate or deactivate a single controller, the controller name can be given directly instead of using a list."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"switch_controllers:\n  hardware: <hardware_name>\n  activate: <controller_name>\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"A controller must be loaded before it can be activated, and must be deactivated before it can be unloaded."})}),"\n",(0,o.jsx)(n.h3,{id:"manage-sequences",children:"Manage sequences"}),"\n",(0,o.jsxs)(n.p,{children:["Use the ",(0,o.jsx)(n.code,{children:"sequence"})," event to either start, restart or abort a named ",(0,o.jsx)(n.a,{href:"#sequences",children:"sequence"})," in the application\ndescription. Use the respective ",(0,o.jsx)(n.code,{children:"start"}),", ",(0,o.jsx)(n.code,{children:"restart"})," or ",(0,o.jsx)(n.code,{children:"abort"})," fields either individually or collectively."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"sequence:\n  start: <sequence_name>\n  restart: <sequence_name>\n  abort: <sequence_name>\n"})}),"\n",(0,o.jsx)(n.p,{children:"To manage multiple sequences with the same event trigger, use a list syntax."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"sequence:\n  - start: sequence_a\n  - start: sequence_b\n"})}),"\n",(0,o.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,o.jsxs)(n.p,{children:["Components are listed under a top-level field called ",(0,o.jsx)(n.code,{children:"components"}),". Component names must be unique, and should\ngenerally follow the ",(0,o.jsx)(n.code,{children:"lower_camel_case"})," naming convention."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"components:\n  component_a:\n    component: ...    # required\n    display_name: ... # optional\n    position: ...     # optional\n    log_level: ...    # optional\n    mapping: ...      # optional\n    parameters: ...   # optional\n    inputs: ...       # optional\n    outputs: ...      # optional\n    events: ...       # optional\n\n  component_b:\n    ...\n"})}),"\n",(0,o.jsx)(n.p,{children:"Each component is defined with a number of fields, as shown below. The fields are defined in the next section."}),"\n",(0,o.jsx)(n.h3,{id:"component",children:"Component"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"component"})," field defines the actual component implementation to use for the component.\nIt takes a fully qualified class name as registered by the ",(0,o.jsx)(n.code,{children:"RCLCPP_COMPONENTS_REGISTER_NODE"})," macro."]}),"\n",(0,o.jsxs)(n.p,{children:["The registered class name of a component should include the package name within the namespace. For example, the\nregistration ",(0,o.jsx)(n.code,{children:"foo_components::Foo"})," refers to a component ",(0,o.jsx)(n.code,{children:"Foo"})," in package ",(0,o.jsx)(n.code,{children:"foo_components"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"my_component:\n  component: foo_components::Foo\n"})}),"\n",(0,o.jsx)(n.h3,{id:"display-name",children:"Display name"}),"\n",(0,o.jsxs)(n.p,{children:["The optional ",(0,o.jsx)(n.code,{children:"display_name"})," field can be used to give the component a more human-readable name (one that does not have\nto conform to the ",(0,o.jsx)(n.code,{children:"lower_snake_case"})," naming convention of the YAML syntax). It is only used when rendering the component\nas a node in the AICA interactive graph editor. If omitted, the name is taken directly from the YAML field (from the\nprevious example, it would default to ",(0,o.jsx)(n.code,{children:"my_component"}),")."]}),"\n",(0,o.jsx)(n.h3,{id:"position",children:"Position"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"position"})," field is used to define the desired location of the button in the application graph. It has two subfields\ndefining the X and Y location, respectively."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"my_component:\n  position:\n    x: 100\n    y: 200\n"})}),"\n",(0,o.jsx)(n.h3,{id:"log-level",children:"Log level"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"log_level"})," optionally sets the log severity level for this component.\nSupported levels are: [unset, debug, info, warn, error, fatal]"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"my_component:\n  log_level: debug\n"})}),"\n",(0,o.jsx)(n.h3,{id:"mapping",children:"Mapping"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"mapping"})," field optionally defines overrides for the component name and namespace. Normally, the component node\nis instantiated with the same name as the top level component name and put on the base namespace."]}),"\n",(0,o.jsxs)(n.p,{children:["By specifying a mapping ",(0,o.jsx)(n.code,{children:"name"})," or ",(0,o.jsx)(n.code,{children:"namespace"})," or both, the instantiated node name is updated accordingly."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Without the mapping directive, the node name becomes /component_a\ncomponent_a:\n  ...\n\n# With the mapping directive, the node name becomes /my_component_namespace/my_new_component_name\ncomponent_b:\n  mapping:\n    name: my_new_component_name\n    namespace: my_component_namespace\n"})}),"\n",(0,o.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"parameters"})," field allows initial component parameters values to be set using a ",(0,o.jsx)(n.code,{children:"name: value"})," syntax. These values\nare only applied when the component is loaded. To set parameter values after a component has been loaded, use the\n",(0,o.jsx)(n.a,{href:"#set-a-parameter",children:"set parameter event"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"my_component:\n  parameters:\n    my_string_parameter: my string value\n    my_double_parameter: 2.0\n"})}),"\n",(0,o.jsx)(n.h4,{id:"component-rate",children:"Component rate"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"rate"})," parameter is a special reserved parameter that defines the step rate of a component in Hertz, which is\nthe inverse of the execution period."]}),"\n",(0,o.jsx)(n.p,{children:"For example, if an image processing component should run some computation at 20 frames per second, then the\nrate parameter should be set to 20 Hertz."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"my_component:\n  parameters:\n    rate: 20\n"})}),"\n",(0,o.jsx)(n.h3,{id:"inputs-and-outputs",children:"Inputs and outputs"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"inputs"})," and ",(0,o.jsx)(n.code,{children:"outputs"})," fields are used to connect component signals together to enable communication, signal\nprocessing and control loops. Each signal is specified using a ",(0,o.jsx)(n.code,{children:"name: value"})," syntax, where the name is the name\nof the signal according to the component description, and the value is and the name of the signal topic.\nIf a component output is assigned to the same topic name as another component input, they are connected, as\nillustrated in the example below."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"my_component:\n  inputs:\n    robot_state: /state\n    applied_force: /force\n  outputs:\n    robot_command: /command\n\nmy_other_component:\n  outputs:\n    force_torque_sensor: /force\n"})}),"\n",(0,o.jsx)(n.h3,{id:"predicate-events",children:"Predicate events"}),"\n",(0,o.jsxs)(n.p,{children:["Component predicates can be used to trigger ",(0,o.jsx)(n.a,{href:"#events",children:"events"})," by adding the named predicate and corresponding events\nunder the ",(0,o.jsx)(n.code,{children:"events"})," field of a component definition. For example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"my_component:\n  events:\n    is_active:\n      load: ...\n      unload: ...\n    some_other_predicate_name:\n      set: ...\n      call_service: ...\n"})}),"\n",(0,o.jsx)(n.h4,{id:"special-event-predicates",children:"Special event predicates"}),"\n",(0,o.jsx)(n.p,{children:"In addition to standard component predicates produced by the component at runtime, two other event triggers can be\nassociated with a component. These triggers are provided by the Dynamic State Engine which manages the component rather\nthan the component itself."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"on_load"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"on_load"})," predicate is provided by the state engine and set to true after the component has been loaded. Any events\nassociated with the ",(0,o.jsx)(n.code,{children:"on_load"})," predicate are handled after the node has been instantiated."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"component:\n  events:\n    on_load:\n      <some triggered event>: ...\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"on_unload"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"on_unload"})," predicate is similar to the ",(0,o.jsx)(n.code,{children:"on_load"})," predicate and is provided by the state engine. Any events\nassociated with the ",(0,o.jsx)(n.code,{children:"on_unload"})," predicate are handled once the component interface has been destroyed."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"component:\n  events:\n    on_unload:\n      <some triggered event>: ...\n"})}),"\n",(0,o.jsx)(n.h2,{id:"hardware",children:"Hardware"}),"\n",(0,o.jsx)(n.p,{children:"Hardware interfaces describe the connected robots and their corresponding controllers."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"hardware:\n  robot_a:\n    urdf: ...\n    rate: ...\n    parameters: # optional\n      ...\n    display_name: ... # optional\n    position: ...     # optional\n    controllers:\n      ...\n  robot_b:\n    ...\n"})}),"\n",(0,o.jsx)(n.h3,{id:"urdf",children:"URDF"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"urdf"})," field refers to a specially formatted robot description file which defines the joint configurations and the\nhardware interface driver needed to communicate with the robot."]}),"\n",(0,o.jsx)(n.p,{children:"A hardware interface can be linked to URDF file in one of the following ways:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"By name of the custom URDF uploaded to the AICA database"}),"\n",(0,o.jsx)(n.li,{children:"By name of an example URDF included in the AICA image (available examples depend on license and distribution versions)"}),"\n",(0,o.jsx)(n.li,{children:"By the path of a URDF file mounted in the container filesystem"}),"\n",(0,o.jsx)(n.li,{children:"By URDF string content inserted directly in the YAML (not recommended for large files)"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'# referring to a custom robot description uploaded to the user database\nrobot_a:\n  urdf: My custom robot\n\n# referring to a built-in robot description from the included examples\nrobot_b:\n  urdf: Universal Robots 5e (default configuration)\n\n# using the path to a URDF file mounted in the container filesystem\nrobot_c:\n  urdf: /home/ros2/my_robot.urdf\n\n# defining the URDF content in-line\nrobot_d:\n  urdf: |\n    <robot name="example">\n        <ros2_control name="ExampleRobotHardwareInterface" type="system">\n            <hardware>\n                <plugin>robot_interface/GenericInterface</plugin>\n            </hardware>\n            ...\n        </ros2_control>\n        ...\n    </robot>\n'})}),"\n",(0,o.jsxs)(n.admonition,{type:"info",children:[(0,o.jsx)(n.p,{children:"Use the Hardware tab in AICA Studio to manage available URDFs."}),(0,o.jsxs)(n.p,{children:["Alternatively, use the API endpoints at ",(0,o.jsx)(n.code,{children:"/v1/data/hardware"})," and ",(0,o.jsx)(n.code,{children:"/v1/examples/hardware"})," to manage custom hardware and\nview the available built-in example URDFs, respectively."]})]}),"\n",(0,o.jsx)(n.h3,{id:"rate",children:"Rate"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"rate"})," field defines the robot control frequency in Hz."]}),"\n",(0,o.jsx)(n.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"parameters"})," field is used to set hardware-specific parameter values which override the default values from the\nassociated URDF."]}),"\n",(0,o.jsxs)(n.p,{children:["Specifically, the URDF is expected to include a ",(0,o.jsx)(n.code,{children:"<ros2_control>"})," tag under which hardware properties are defined,\nincluding the hardware plugin and any number of parameters specific to that plugin."]}),"\n",(0,o.jsxs)(n.p,{children:["For example, a ",(0,o.jsx)(n.code,{children:"robot_interface/GenericInterface"})," plugin may accept a ",(0,o.jsx)(n.code,{children:"robot_ip"})," parameter to specify the IP address:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'\n<robot name="example">\n    <ros2_control name="ExampleRobotHardwareInterface" type="system">\n        <hardware>\n            <plugin>robot_interface/GenericInterface</plugin>\n            <param name="robot_ip">192.168.0.1</param>\n        </hardware>\n        ...\n    </ros2_control>\n    ...\n</robot>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["By adding ",(0,o.jsx)(n.code,{children:"robot_ip"})," under the ",(0,o.jsx)(n.code,{children:"parameters"})," field, the default IP address can be overridden when the hardware interface\nis loaded:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"my_robot:\n  urdf: Example Robot\n  parameters:\n    robot_ip: 172.16.0.1\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In this example, the robot interface would be loaded with the IP address of ",(0,o.jsx)(n.code,{children:"172.16.0.1"})," instead of the default\n",(0,o.jsx)(n.code,{children:"192.168.0.1"})," as specified in the URDF. This allows parameters to be selectively altered at deploy time directly in the\napplication description without needing to modify the URDF itself."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"Hardware parameter values are only applied if the parameter name matches an existing hardware parameter in the URDF.\nIf the parameter does not exist in the URDF, it will not be added."})}),"\n",(0,o.jsx)(n.h3,{id:"display-name-1",children:"Display name"}),"\n",(0,o.jsxs)(n.p,{children:["This optional field is identical to the ",(0,o.jsx)(n.a,{href:"#display-name",children:"component display name"})," and is used to assign a nicer,\nhuman-readable display name to the hardware interface when rendered as a node in the AICA interactive graph editor."]}),"\n",(0,o.jsx)(n.h3,{id:"position-1",children:"Position"}),"\n",(0,o.jsxs)(n.p,{children:["This optional field is identical to the ",(0,o.jsx)(n.a,{href:"#position",children:"component position"})," and is used to provide an X, Y position for the\nhardware interface when rendered as a node in the AICA interactive graph editor."]}),"\n",(0,o.jsx)(n.p,{children:"This field only affects visualization of the application graph and has no other run-time effect.\nIf a position is not specified, the node will be rendered at a procedurally chosen location."}),"\n",(0,o.jsx)(n.h3,{id:"controllers",children:"Controllers"}),"\n",(0,o.jsx)(n.p,{children:"Controllers are the interface between components in the application and hardware in the real world. They convert desired\nreference signals into real joint commands according to some internal control law, and convert joint states from the\nrobot back to signals."}),"\n",(0,o.jsxs)(n.p,{children:["Controllers are listed under a top-level ",(0,o.jsx)(n.code,{children:"controllers"})," field. Controller names must be unique within the given hardware\ninterface, and should generally follow the ",(0,o.jsx)(n.code,{children:"lower_camel_case"})," naming convention."]}),"\n",(0,o.jsxs)(n.p,{children:["Under each controller, the ",(0,o.jsx)(n.code,{children:"plugin"})," field refers to a registered controller plugin name."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"parameters"})," field then refers to configurable parameters for the given controller."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"inputs"})," and ",(0,o.jsx)(n.code,{children:"outputs"})," fields define the ROS2 topics to which each signal of the controller should be connected.\nSee also ",(0,o.jsx)(n.a,{href:"#inputs-and-outputs",children:"Component Inputs and Outputs"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Predicates can be used to trigger ",(0,o.jsx)(n.a,{href:"#events",children:"events"})," by adding the named predicate and corresponding events\nunder the ",(0,o.jsx)(n.code,{children:"events"})," field of a controller definition. See also ",(0,o.jsx)(n.a,{href:"#predicate-events",children:"Predicate Events"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Optionally, the ",(0,o.jsx)(n.code,{children:"position"})," field can be used to specify an X, Y location for rendering the hardware interface\nas a node in the AICA interactive graph editor. See also ",(0,o.jsx)(n.a,{href:"#position",children:"Component Position"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"For example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"robot:\n  controllers:\n    broadcaster:\n      plugin: joint_state_broadcaster/JointStateBroadcaster\n    twist_controller:\n      plugin: compliant_twist_controller/CompliantTwistController\n      parameters:\n        linear_principle_damping: 10.0\n        linear_orthogonal_damping: 10.0\n        angular_stiffness: 1.0\n        angular_damping: { a: 1.0, b: true }\n      inputs:\n        command: /motion_generator/command_output\n      outputs:\n        state: /recorder/state_input\n      events:\n        my_predicate_name:\n          set: ...\n          call_service: ...\n"})}),"\n",(0,o.jsx)(n.h2,{id:"conditions",children:"Conditions"}),"\n",(0,o.jsx)(n.p,{children:"Conditions are event triggers based on logical combinations of predicates."}),"\n",(0,o.jsxs)(n.p,{children:["Conditions are listed under a top-level field called ",(0,o.jsx)(n.code,{children:"conditions"}),". Condition names must be unique, and should\ngenerally follow the ",(0,o.jsx)(n.code,{children:"lower_camel_case"})," naming convention."]}),"\n",(0,o.jsx)(n.p,{children:"Conditional events are triggered only on the rising edge of the condition, preventing the repeated execution of an\nevent if the condition stays true."}),"\n",(0,o.jsxs)(n.p,{children:["Define events to be triggered by a condition by listing them under the condition name. See the ",(0,o.jsx)(n.a,{href:"#events",children:"events"})," section\nfor available event syntax."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"conditions:\n  condition_1:\n    component: ...\n    predicate: ...\n    events:\n      ...\n\n  condition_2:\n    controller: ...\n    hardware: ...\n    predicate: ...\n    events:\n      ...\n\n  condition_3:\n    <conditional_operator>: ...  # not, all, any, one_of\n    events:\n      ...\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"simple-conditions",children:"Simple conditions"}),"\n",(0,o.jsx)(n.p,{children:"A simple condition evaluates just a single component or controller predicate and triggers the listed events when it is\ntrue."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"condition_1:\n  component: my_component\n  predicate: some_component_predicate\n  events:\n    ...\ncondition_2:\n  controller: my_controller\n  hardware: my_hardware\n  predicate: some_controller_predicate\n  events:\n    ...\n"})}),"\n",(0,o.jsx)(n.h3,{id:"conditional-operators",children:"Conditional operators"}),"\n",(0,o.jsx)(n.p,{children:"To combine multiple predicates together into a single true / false condition, the following operators can be used."}),"\n",(0,o.jsxs)(n.p,{children:["The operators can refer to one or more component predicates with the syntax\n",(0,o.jsx)(n.code,{children:"{ component: component_a, predicate: some_predicate }"})]}),"\n",(0,o.jsx)(n.h4,{id:"not",children:"Not"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"not"})," operator takes a single item and negates its value. It is true when the item is false, and false when the\nitem is true."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"condition_1:\n  not: { component: component_a, predicate: some_predicate }\n  events:\n    ...\n"})}),"\n",(0,o.jsx)(n.h4,{id:"all",children:"All"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"all"})," operator takes a list of items and is true only when every listed item is true."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"condition_1:\n  all:\n    - { component: component_a, predicate: some_predicate }\n    - { component: component_b, predicate: some_predicate }\n  events:\n    ...\n"})}),"\n",(0,o.jsx)(n.h4,{id:"any",children:"Any"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"any"})," operator takes a list of items and is true when at least one of the listed items is true."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"condition_1:\n  any:\n    - { component: component_a, predicate: some_predicate }\n    - { component: component_b, predicate: some_predicate }\n  events:\n    ...\n"})}),"\n",(0,o.jsx)(n.h4,{id:"one-of",children:"One of"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"one_of"})," operator takes a list of items and is true only when exactly one of the listed items is true."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"condition_1:\n  one_of:\n    - { component: component_a, predicate: some_predicate }\n    - { component: component_b, predicate: some_predicate }\n  events:\n    ...\n"})}),"\n",(0,o.jsx)(n.h3,{id:"nested-conditions",children:"Nested conditions"}),"\n",(0,o.jsxs)(n.p,{children:["The conditional operators can be applied recursively for more complex conditions. The following example could be\ncollapsed into the equivalent logical pseudocode: ",(0,o.jsx)(n.code,{children:"NOT(a AND b AND (c OR d OR (e XOR f)))"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"conditions:\n  nested_condition:\n    not:\n      all:\n        - { component: component_1, predicate: a }\n        - { component: component_2, predicate: b }\n        - any:\n            - { component: component_3, predicate: c }\n            - { component: component_4, predicate: d }\n            - one_of:\n                - { component: component_5, predicate: e }\n                - { component: component_6, predicate: f }\n"})}),"\n",(0,o.jsx)(n.h2,{id:"sequences",children:"Sequences"}),"\n",(0,o.jsxs)(n.p,{children:["A sequence is a list of steps that are handled sequentially in order. Sequence steps are either\nstandard ",(0,o.jsx)(n.a,{href:"#events",children:"state events"})," or conditional blocks; the conditional steps are used either to wait for a condition,\npredicate or fixed time interval, or to assert the current value of a condition or predicate."]}),"\n",(0,o.jsxs)(n.p,{children:["Similar to ",(0,o.jsx)(n.a,{href:"#conditions",children:"conditions"}),", sequences are listed under a top-level field called ",(0,o.jsx)(n.code,{children:"sequences"}),". Sequence names\nmust be unique, and should generally follow the ",(0,o.jsx)(n.code,{children:"lower_camel_case"})," naming convention."]}),"\n",(0,o.jsxs)(n.p,{children:["After sequences are defined in the yaml, they can be managed using ",(0,o.jsx)(n.a,{href:"#manage-sequences",children:"sequence state events"}),"; component\nor controller predicates, conditions and even sequences can also start, restart or abort a sequence."]}),"\n",(0,o.jsx)(n.p,{children:"The example below uses a combination of standard event steps and conditional blocks; it asserts that a component is\nactive, sets a parameter on that component, waits 10 seconds, and then activates a controller."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"sequences:\n  sequence_1:\n    - assert:\n        component: my_component\n        predicate: is_active\n    - set:\n        component: my_component\n        parameter: speed\n        value: 2.0\n    - wait:\n        seconds: 10\n    - switch_controllers:\n        hardware: my_hardware\n        activate: my_controller\n"})}),"\n",(0,o.jsx)(n.h3,{id:"sequence-assert",children:"Sequence assert"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"assert"})," keyword is an assertion step to check if a condition or predicate is true. If the assertion succeeds,\nthe sequence continues to the next step. If the assertion fails, the sequence is automatically aborted.\nOptionally, assertion failure can be used to trigger breakout events as a form of error handling."]}),"\n",(0,o.jsx)(n.p,{children:"The following examples show the syntax to check either a condition or predicate respectively."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"assert:\n  condition: my_condition\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"assert:\n  component: my_component\n  predicate: some_predicate\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"assert:\n  controller: my_controller\n  hardware: my_hardware\n  predicate: some_predicate\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"else"})," keyword is optionally used to define breakout events if the assertion fails. The following example would\nunload a component if condition ",(0,o.jsx)(n.code,{children:"my_condition"})," is not true and then abort the sequence."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"assert:\n  condition: my_condition\n  else:\n    unload:\n      component: my_component\n"})}),"\n",(0,o.jsx)(n.h3,{id:"sequence-wait",children:"Sequence wait"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"wait"})," keyword is used to wait for either a fixed time interval or for a condition or predicate to be\ntrue."]}),"\n",(0,o.jsx)(n.h4,{id:"waiting-for-a-specified-time-interval",children:"Waiting for a specified time interval"}),"\n",(0,o.jsxs)(n.p,{children:["The simplest case is waiting for fixed duration, which uses the ",(0,o.jsx)(n.code,{children:"seconds"})," field to define the time to wait in seconds."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"wait:\n  seconds: 10\n"})}),"\n",(0,o.jsx)(n.h4,{id:"waiting-for-a-condition-or-predicate",children:"Waiting for a condition or predicate"}),"\n",(0,o.jsx)(n.p,{children:"The following examples show the syntax to wait for either a condition or predicate state respectively."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"wait:\n  condition: my_condition\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"wait:\n  component: my_component\n  predicate: some_predicate\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"wait:\n  controller: my_controller\n  hardware: my_hardware\n  predicate: some_predicate\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Compared to the simple fixed-time wait, a conditional wait step could block the sequence indefinitely. The ",(0,o.jsx)(n.code,{children:"timeout"}),"\nfield can be used when waiting for a condition or predicate to set a maximum time limit. The time limit is defined in\nseconds with the ",(0,o.jsx)(n.code,{children:"seconds"})," field."]}),"\n",(0,o.jsxs)(n.p,{children:["Similar to assertions, the sequence is aborted if the wait step times out. The optional ",(0,o.jsx)(n.code,{children:"events"})," keyword can be used\nunder the ",(0,o.jsx)(n.code,{children:"timeout"})," field to define breakout events if the assertion fails. The following example would unload a\ncomponent if condition ",(0,o.jsx)(n.code,{children:"my_condition"})," is not true within 10 seconds and then abort the sequence."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"wait:\n  condition: my_condition\n  timeout:\n    seconds: 10\n    events:\n      unload:\n        component: my_component\n"})}),"\n",(0,o.jsx)(n.h3,{id:"using-sequences-to-manage-program-flow",children:"Using sequences to manage program flow"}),"\n",(0,o.jsx)(n.p,{children:"Because sequences can also use sequence state events as steps, fine-grained looping and branching logic can be\nexpressed."}),"\n",(0,o.jsx)(n.p,{children:"For example, this sequence would activate and deactivate a lifecycle component every 5 seconds in an endless loop:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"sequences:\n  my_sequence:\n    - lifecycle:\n        component: my_component\n        transition: activate\n    - wait:\n        seconds: 5\n    - lifecycle:\n        component: my_component\n        transition: deactivate\n    - wait:\n        seconds: 5\n    - sequence:\n        restart: my_sequence\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The next example starts ",(0,o.jsx)(n.code,{children:"sequence_2"})," if a condition is true, and else starts ",(0,o.jsx)(n.code,{children:"sequence_3"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"sequences:\n  sequence_1:\n    - wait:\n        seconds: 5\n    - assert:\n        condition: my_condition\n        else:\n          sequence:\n            start: sequence_3\n    - sequence:\n        start: sequence_2\n"})}),"\n",(0,o.jsx)(n.h2,{id:"on-start",children:"On Start"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"on_start"})," keyword is reserved as a special event trigger when the application is launched.\nList the ",(0,o.jsx)(n.a,{href:"#events",children:"events"})," to trigger on startup (for example, to load components and hardware interfaces)."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"on_start:\n  load:\n    - component: component_a\n    - component: component_b\n    - hardware: robot_a\n"})}),"\n",(0,o.jsx)(n.h2,{id:"buttons",children:"Buttons"}),"\n",(0,o.jsxs)(n.p,{children:["Buttons are interactive elements in AICA Studio. They are used to manually\ntrigger ",(0,o.jsx)(n.a,{href:"#events",children:"state events"})," when an application is running by clicking the trigger button in the application graph.\nButtons have no effect on the application if the UI is not used."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"buttons:\n  my_button:\n    position: ...\n    on_click:\n      ...\n"})}),"\n",(0,o.jsx)(n.h3,{id:"position-2",children:"Position"}),"\n",(0,o.jsxs)(n.p,{children:["This optional field is identical to the ",(0,o.jsx)(n.a,{href:"#position",children:"component position"})," and is used to provide an X, Y position for the\ncomponent when rendered as a node in the AICA interactive graph editor."]}),"\n",(0,o.jsx)(n.h3,{id:"on-click",children:"On Click"}),"\n",(0,o.jsxs)(n.p,{children:["List the ",(0,o.jsx)(n.a,{href:"#events",children:"events"})," to trigger when the button is clicked while the application is running (for example, to\nunload a component)."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"my_button:\n  on_click:\n    unload:\n      component: component_a\n"})}),"\n",(0,o.jsx)(n.h2,{id:"validating-a-yaml-application",children:"Validating a YAML application"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"https://docs.aica.tech/schemas/1-4-1/application.schema.json",children:"YAML application schema"})," defines the structural rules\nof an AICA application and effectively distinguishes between valid and invalid syntax."]}),"\n",(0,o.jsx)(n.p,{children:"Many modern IDEs and code editors can be configured to support custom schemas and provide in-line validation and\ncompletion of the YAML content."}),"\n",(0,o.jsx)(n.h3,{id:"validating-a-yaml-application-with-visual-studio-code",children:"Validating a YAML application with Visual Studio Code"}),"\n",(0,o.jsx)(n.p,{children:"Developers working with Visual Studio Code can validate YAML application files easily in two steps:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Install the ",(0,o.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml",children:"YAML extenstion from RedHat"})]}),"\n",(0,o.jsx)(n.li,{children:"Associate a schema with the YAML application by adding the following modeline to the file:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# yaml-language-server: $schema=https://docs.aica.tech/schemas/1-4-1/application.schema.json\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);