"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[72],{8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>r});var t=i(6540);const s={},o=t.createContext(s);function c(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(o.Provider,{value:n},e.children)}},9949:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"concepts/building-blocks/components/index","title":"Components","description":"Within an AICA System application, components are the building blocks of advanced robot behaviors.","source":"@site/docs/concepts/building-blocks/components/index.md","sourceDirName":"concepts/building-blocks/components","slug":"/concepts/building-blocks/components/","permalink":"/docs/concepts/building-blocks/components/","draft":false,"unlisted":false,"editUrl":"https://github.com/aica-technology/api/tree/main/docs/docs/concepts/building-blocks/components/index.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Components"},"sidebar":"conceptsSidebar","previous":{"title":"Events","permalink":"/docs/concepts/building-blocks/events"},"next":{"title":"Signal interoperability","permalink":"/docs/concepts/building-blocks/components/signal-interoperability"}}');var s=i(4848),o=i(8453);const c={sidebar_position:3,title:"Components"},r="Components",a={},l=[{value:"Periodic behavior",id:"periodic-behavior",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Signals",id:"signals",level:2},{value:"Predicates",id:"predicates",level:2},{value:"Auto lifecycle events",id:"auto-lifecycle-events",level:3},{value:"Services",id:"services",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"components",children:"Components"})}),"\n",(0,s.jsx)(n.p,{children:"Within an AICA System application, components are the building blocks of advanced robot behaviors."}),"\n",(0,s.jsxs)(n.p,{children:["AICA components are wrappers for ",(0,s.jsx)(n.a,{href:"/docs/concepts/ros-concepts/nodes",children:"ROS 2 nodes"}),"\nand ",(0,s.jsx)(n.a,{href:"/docs/concepts/ros-concepts/lifecycle-nodes",children:"lifecycle nodes"}),"\nusing ",(0,s.jsx)(n.a,{href:"/docs/concepts/ros-concepts/dynamic-composition",children:"dynamic composition"})," with additional abstractions for enhanced modularity\nand developer convenience."]}),"\n",(0,s.jsx)(n.p,{children:"Components process data in a periodic step function, are configured using parameters and transfer data as signals to\nother components and hardware interfaces. Key component states are published as predicates. Components may also expose\nspecific services."}),"\n",(0,s.jsx)(n.h2,{id:"periodic-behavior",children:"Periodic behavior"}),"\n",(0,s.jsx)(n.p,{children:"A key design concept for AICA components is the idea of periodic behavior."}),"\n",(0,s.jsx)(n.p,{children:"In ROS, nodes are generally driven through callbacks, triggered either by a subscription, parameter change event,\nor service request. Nodes that wish to publish data continuously normally configure an internal timer to trigger a\ncallback function at regular intervals."}),"\n",(0,s.jsxs)(n.p,{children:["This periodic execution is built in to AICA components by default. Components have an execution rate defined by\na ",(0,s.jsx)(n.code,{children:"rate"})," parameter (the frequency in Hertz for the number of execution steps per second), and automatically publish data\nattributes and predicates periodically."]}),"\n",(0,s.jsx)(n.p,{children:"Components can implement specific calculations to occur on step."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Lifecycle components only execute the periodic step function when they are in the ",(0,s.jsx)(n.code,{children:"ACTIVE"})," lifecycle state."]})}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(n.p,{children:"Components support the standard ROS 2 parameter interface types."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Boolean (true / false)"}),"\n",(0,s.jsx)(n.li,{children:"Integer (whole numbers)"}),"\n",(0,s.jsx)(n.li,{children:"Double (floating point numbers)"}),"\n",(0,s.jsx)(n.li,{children:"String (plain text)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"They can additionally be an array (list) of multiple values of the same type:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Boolean array"}),"\n",(0,s.jsx)(n.li,{children:"Integer array"}),"\n",(0,s.jsx)(n.li,{children:"Double array"}),"\n",(0,s.jsx)(n.li,{children:"String array"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"signals",children:"Signals"}),"\n",(0,s.jsxs)(n.p,{children:["Components define signals as inputs (subscribers) and outputs (publishers). Refer to ",(0,s.jsx)(n.a,{href:"/docs/concepts/building-blocks/signals",children:"Signals"})," for more\ninformation."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["By default, lifecycle components only publish outputs when they are in the ",(0,s.jsx)(n.code,{children:"ACTIVE"})," lifecycle state."]})}),"\n",(0,s.jsx)(n.h2,{id:"predicates",children:"Predicates"}),"\n",(0,s.jsxs)(n.p,{children:["Components declare and broadcast key internal states as predicate messages, which are used by the Event Engine\nto trigger events. Refer to ",(0,s.jsx)(n.a,{href:"/docs/concepts/building-blocks/events",children:"Events"})," for more information."]}),"\n",(0,s.jsx)(n.h3,{id:"auto-lifecycle-events",children:"Auto lifecycle events"}),"\n",(0,s.jsx)(n.p,{children:"When a lifecycle components is loaded, it starts in the unconfigured state and normally requires an external trigger to\ntransition into different states."}),"\n",(0,s.jsxs)(n.p,{children:["In the AICA System, lifecycle components can auto-configure and auto-activate themselves\nusing ",(0,s.jsx)(n.a,{href:"/docs/concepts/building-blocks/events#transitions",children:"transition events"}),". Associating the ",(0,s.jsx)(n.code,{children:"on_load"})," state transition with a\n",(0,s.jsx)(n.code,{children:"lifecycle: configure"})," event enables the component to automatically configure itself. Equivalently, the ",(0,s.jsx)(n.code,{children:"on_configure"}),"\ntransition can be used to trigger a ",(0,s.jsx)(n.code,{children:"lifecycle: activate"})," event."]}),"\n",(0,s.jsx)(n.h2,{id:"services",children:"Services"}),"\n",(0,s.jsx)(n.p,{children:"Components can provide service endpoints to trigger specific behaviors on demand. For compatibility with the application\nsyntax and the Event Engine, the component service are limited to one of two request types:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Service request with no payload"}),"\n",(0,s.jsx)(n.li,{children:"Service request with a string payload"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The service response object for both types contains an execution status and message and is automatically handled by the\nEvent Engine."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);