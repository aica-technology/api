"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3889],{5061:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>m,default:()=>g,frontMatter:()=>d,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"examples/core-components/signal-interoperability","title":"Signal interoperability","description":"As described in the signals page, AICA signals make it easy to exchange","source":"@site/docs/examples/core-components/signal-interoperability.md","sourceDirName":"examples/core-components","slug":"/examples/core-components/signal-interoperability","permalink":"/docs/examples/core-components/signal-interoperability","draft":false,"unlisted":false,"editUrl":"https://github.com/aica-technology/api/tree/main/docs/docs/examples/core-components/signal-interoperability.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Signal interoperability"},"sidebar":"examplesSidebar","previous":{"title":"Colliders","permalink":"/docs/examples/core-components/colliders"},"next":{"title":"Core Controllers","permalink":"/docs/category/core-controllers"}}');var s=t(4848),o=t(8453);const r=t.p+"assets/images/ros-signal-example-a25c6305a6edb460337785bd735ef691.png",i=t.p+"assets/images/signal-ros-example-f10a1b130f4a3ff0dd3639406c40f1d0.png",c=t.p+"assets/images/signal-ros-joint-0fd2951f04ed6ba5ca09cb497dc04b52.png",l=t.p+"assets/images/signal-ros-pose-e91dd3ac36c60e8480dd63b5dbb0fab9.png",d={sidebar_position:2,title:"Signal interoperability"},m="Signal interoperability",h={},p=[{value:"AICA signals to common ROS messages",id:"aica-signals-to-common-ros-messages",level:2},{value:"Common ROS messages to AICA signals",id:"common-ros-messages-to-aica-signals",level:2},{value:"Behavior",id:"behavior",level:2},{value:"AICA Signal to ROS message example",id:"aica-signal-to-ros-message-example",level:2},{value:"ROS message to AICA Signal example",id:"ros-message-to-aica-signal-example",level:2}];function _(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"signal-interoperability",children:"Signal interoperability"})}),"\n",(0,s.jsxs)(n.p,{children:["As described in the ",(0,s.jsx)(n.a,{href:"/docs/concepts/building-blocks/signals",children:"signals page"}),", AICA signals make it easy to exchange\nCartesian and joint state variables in an internally consistent way. In components, state signals are automatically\nconverted into smart data classes that provide useful functions for conversions, transformations and other\nmanipulations."]}),"\n",(0,s.jsx)(n.p,{children:"Even though there is no official standard, there are a few signal types that are very commonly used in ROS. For ease of\ninteroperability, AICA Core includes several components that translate AICA signals to common ROS messages and back.\nThese components can be especially valuable when porting existing ROS nodes into AICA Studio using the Component SDK or\nwhen communicating with ROS nodes outside the AICA System."}),"\n",(0,s.jsx)(n.h2,{id:"aica-signals-to-common-ros-messages",children:"AICA signals to common ROS messages"}),"\n",(0,s.jsx)(n.p,{children:"AICA state signals carrying Cartesian or joint space information can be converted into common ROS message types using\nthe following components:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Component name"}),(0,s.jsx)(n.th,{children:"Input signal type"}),(0,s.jsx)(n.th,{children:"Output message type"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Cartesian Signal to Pose Stamped Message"}),(0,s.jsx)(n.td,{children:"Cartesian state or pose"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"geometry_msgs::msg::PoseStamped"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Cartesian Signal to Twist Stamped Message"}),(0,s.jsx)(n.td,{children:"Cartesian state or twist"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"geometry_msgs::msg::TwistStamped"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Cartesian Signal to Wrench Stamped Message"}),(0,s.jsx)(n.td,{children:"Cartesian state or wrench"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"geometry_msgs::msg::WrenchStamped"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Joint Signal To Joint State Message"}),(0,s.jsx)(n.td,{children:"Joint state, positions, velocities or torques"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"sensor_msgs::msg::JointState"})})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"common-ros-messages-to-aica-signals",children:"Common ROS messages to AICA signals"}),"\n",(0,s.jsx)(n.p,{children:"Common ROS message types carrying Cartesian or joint space information can be converted back into AICA state signals\nusing the following components:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Component name"}),(0,s.jsx)(n.th,{children:"Input message type"}),(0,s.jsx)(n.th,{children:"Output signal type"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Pose Stamped Message to Cartesian Signal"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"geometry_msgs::msg::PoseStamped"})}),(0,s.jsx)(n.td,{children:"Cartesian state containing pose information"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Twist Stamped Message to Cartesian Signal"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"geometry_msgs::msg::TwistStamped"})}),(0,s.jsx)(n.td,{children:"Cartesian state containing twist information"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Wrench Stamped Message to Cartesian Signal"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"geometry_msgs::msg::WrenchStamped"})}),(0,s.jsx)(n.td,{children:"Cartesian state containing wrench information"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Joint State Message to Joint Signal"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"sensor_msgs::msg::JointState"})}),(0,s.jsx)(n.td,{children:"Joint state"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,s.jsxs)(n.p,{children:["All of these components are single-input single-output blocks. Each time a new message is received, it is translated and\nimmediately published. For that reason, the ",(0,s.jsx)(n.code,{children:"rate"})," parameter doesn't affect the behavior of these components."]}),"\n",(0,s.jsx)(n.h2,{id:"aica-signal-to-ros-message-example",children:"AICA Signal to ROS message example"}),"\n",(0,s.jsxs)(n.p,{children:["This example uses the ",(0,s.jsx)(n.code,{children:"Joint Signal To Joint State Message"})," component to translate the joint state output from the\nhardware interface to a ",(0,s.jsx)(n.code,{children:"sensor_msgs::msg::JointState"})," message and the ",(0,s.jsx)(n.code,{children:"Cartesian Signal to Pose Stamped Message"}),"\ncomponent to translate the Cartesian state output to a ",(0,s.jsx)(n.code,{children:"geometry_msgs::msg::PoseStamped"})," message."]}),"\n",(0,s.jsx)("div",{class:"text--center",children:(0,s.jsx)("img",{src:i,alt:"Signal interoperability example 1"})}),"\n",(0,s.jsx)(n.p,{children:"With the application loaded and playing, the two components will publish the converted message on their output signal\neach time a new message is received from the hardware interface. A jsonified version of those messages can be observed\nin the live topic view."}),"\n",(0,s.jsx)("div",{class:"text--center",children:(0,s.jsx)("img",{src:l,alt:"ROS Topic for Cartesian signal to Pose Stamped Message"})}),"\n",(0,s.jsx)(n.p,{children:"With content"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "header": { "stamp": { "sec": 1749019367, "nanosec": 736960997 }, "frame_id": "world" },\n  "pose": {\n    "position": { "x": 0.37246365888399174, "y": 0.048146868357851064, "z": 0.4299999920960212 },\n    "orientation": {\n      "x": 0.7073880448768991,\n      "y": 0.7068251811053661,\n      "z": 8.971607761328708e-7,\n      "w": -0.0005633114591638605\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)("div",{class:"text--center",children:(0,s.jsx)("img",{src:c,alt:"ROS Topic for joint signal to Joint State Message"})}),"\n",(0,s.jsx)(n.p,{children:"With content"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "header": { "stamp": { "sec": 1749019239, "nanosec": 277825301 }, "frame_id": "" },\n  "name": ["joint_0", "joint_1", "joint_2", "joint_3", "joint_4", "joint_5"],\n  "position": [0, 0, 0, 0, 0, 0],\n  "velocity": [0, 0, 0, 0, 0, 0],\n  "effort": [0, 0, 0, 0, 0, 0]\n}\n'})}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Application YAML"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"schema: 2-0-4\ndependencies:\n  core: v4.3.2\non_start:\n  load:\n    hardware: hardware\ncomponents:\n  joint_signal_to_joint_state_message:\n    component: aica_core_components::ros::JointSignalToJointStateMsg\n    display_name: Joint Signal To Joint State Message\n    inputs:\n      input: /hardware/robot_state_broadcaster/joint_state\n  cartesian_signal_to_pose_stamped_message:\n    component: aica_core_components::ros::CartesianSignalToPoseStampedMsg\n    display_name: Cartesian Signal To Pose Stamped Message\n    inputs:\n      input: /hardware/robot_state_broadcaster/cartesian_state\nhardware:\n  hardware:\n    display_name: Hardware Interface\n    urdf: Generic six-axis robot arm\n    rate: 100\n    events:\n      transitions:\n        on_load:\n          load:\n            controller: robot_state_broadcaster\n            hardware: hardware\n    controllers:\n      robot_state_broadcaster:\n        plugin: aica_core_controllers/RobotStateBroadcaster\n        outputs:\n          joint_state: /hardware/robot_state_broadcaster/joint_state\n          cartesian_state: /hardware/robot_state_broadcaster/cartesian_state\n        events:\n          transitions:\n            on_load:\n              switch_controllers:\n                hardware: hardware\n                activate: robot_state_broadcaster\n            on_activate:\n              load:\n                - component: cartesian_signal_to_pose_stamped_message\n                - component: joint_signal_to_joint_state_message\ngraph:\n  positions:\n    components:\n      joint_signal_to_joint_state_message:\n        x: 200\n        y: 880\n      cartesian_signal_to_pose_stamped_message:\n        x: 200\n        y: 660\n    hardware:\n      hardware:\n        x: 200\n        y: -20\n  edges:\n    hardware_hardware_robot_state_broadcaster_on_activate_cartesian_signal_to_pose_stamped_message_cartesian_signal_to_pose_stamped_message:\n      path:\n        - x: 80\n          y: 400\n        - x: 80\n          y: 720\n    hardware_hardware_robot_state_broadcaster_on_activate_joint_signal_to_joint_state_message_joint_signal_to_joint_state_message:\n      path:\n        - x: -20\n          y: 400\n        - x: -20\n          y: 940\n    hardware_hardware_robot_state_broadcaster_joint_state_joint_signal_to_joint_state_message_input:\n      path:\n        - x: 120\n          y: 520\n        - x: 120\n          y: 1060\n    hardware_hardware_robot_state_broadcaster_cartesian_state_cartesian_signal_to_pose_stamped_message_input:\n      path:\n        - x: 140\n          y: 560\n        - x: 140\n          y: 840\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"ros-message-to-aica-signal-example",children:"ROS message to AICA Signal example"}),"\n",(0,s.jsxs)(n.p,{children:["Mirroring the first example, the following application uses the ",(0,s.jsx)(n.code,{children:"Wrench Stamped Message To Cartesian Signal"})," component\nto translate a ",(0,s.jsx)(n.code,{children:"geometry_msgs::msg::WrenchStamped"})," from some custom component to a Cartesian signal that is connected to\nthe force controller of the hardware interface."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"The custom component is just an example placeholder for any implementation that has a ROS standard message output, which\nmight occur when porting existing ROS nodes into AICA Studio using the AICA SDK."})}),"\n",(0,s.jsx)("div",{class:"text--center",children:(0,s.jsx)("img",{src:r,alt:"Signal interoperability example 2"})}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Application YAML"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"schema: 2-0-4\ndependencies:\n  core: v4.3.2\non_start:\n  load:\n    hardware: hardware\ncomponents:\n  wrench_stamped_message_to_cartesian_signal:\n    component: aica_core_components::ros::WrenchStampedMsgToCartesianSignal\n    display_name: Wrench Stamped Message To Cartesian Signal\n    events:\n      transitions:\n        on_load:\n          switch_controllers:\n            hardware: hardware\n            activate: force_controller\n    inputs:\n      input: /custom_motion_generator/command\n    outputs:\n      output: /wrench_stamped_message_to_cartesian_signal/output\n  custom_motion_generator:\n    component: template_component_package::PyComponent\n    display_name: Custom Motion Generator\n    events:\n      transitions:\n        on_load:\n          load:\n            component: wrench_stamped_message_to_cartesian_signal\n    outputs:\n      command: /custom_motion_generator/command\nhardware:\n  hardware:\n    display_name: Hardware Interface\n    urdf: Generic six-axis robot arm\n    rate: 100\n    events:\n      transitions:\n        on_load:\n          load:\n            - controller: robot_state_broadcaster\n              hardware: hardware\n            - controller: force_controller\n              hardware: hardware\n    controllers:\n      robot_state_broadcaster:\n        plugin: aica_core_controllers/RobotStateBroadcaster\n        events:\n          transitions:\n            on_load:\n              switch_controllers:\n                hardware: hardware\n                activate: robot_state_broadcaster\n            on_activate:\n              load:\n                component: custom_motion_generator\n      force_controller:\n        plugin: aica_core_controllers/effort/ForceController\n        parameters:\n          force_limit:\n            - !!float 20.0\n            - !!float 20.0\n            - !!float 20.0\n            - !!float 2.0\n            - !!float 2.0\n            - !!float 2.0\n        inputs:\n          command: /wrench_stamped_message_to_cartesian_signal/output\ngraph:\n  positions:\n    components:\n      wrench_stamped_message_to_cartesian_signal:\n        x: 100\n        y: 780\n      custom_motion_generator:\n        x: 100\n        y: 420\n    hardware:\n      hardware:\n        x: 680\n        y: -20\n  edges:\n    wrench_stamped_message_to_cartesian_signal_output_hardware_hardware_force_controller_command:\n      path:\n        - x: 660\n          y: 1040\n        - x: 660\n          y: 820\n    wrench_stamped_message_to_cartesian_signal_on_load_hardware_hardware_force_controller:\n      path:\n        - x: 580\n          y: 920\n        - x: 580\n          y: 660\n    hardware_hardware_robot_state_broadcaster_on_activate_custom_motion_generator_custom_motion_generator:\n      path:\n        - x: 40\n          y: 400\n        - x: 40\n          y: 480\n    custom_motion_generator_on_load_wrench_stamped_message_to_cartesian_signal_wrench_stamped_message_to_cartesian_signal:\n      path:\n        - x: 540\n          y: 560\n        - x: 540\n          y: 740\n        - x: 40\n          y: 740\n        - x: 40\n          y: 840\n    custom_motion_generator_command_wrench_stamped_message_to_cartesian_signal_input:\n      path:\n        - x: 500\n          y: 680\n        - x: 500\n          y: 760\n        - x: 80\n          y: 760\n        - x: 80\n          y: 1040\n"})})]})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(_,{...e})}):_(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var a=t(6540);const s={},o=a.createContext(s);function r(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);