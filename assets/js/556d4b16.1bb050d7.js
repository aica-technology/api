"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[972],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(a),m=r,u=d["".concat(c,".").concat(m)]||d[m]||h[m]||o;return a?n.createElement(u,i(i({ref:t},p),{},{components:a})):n.createElement(u,i({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4819:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:3},i="An application with hardware",l={unversionedId:"getting-started/examples/mock-hardware-example",id:"getting-started/examples/mock-hardware-example",title:"An application with hardware",description:"Launcher configuration requirements",source:"@site/docs/getting-started/04-examples/03-mock-hardware-example.md",sourceDirName:"getting-started/04-examples",slug:"/getting-started/examples/mock-hardware-example",permalink:"/docs/getting-started/examples/mock-hardware-example",draft:!1,editUrl:"https://github.com/aica-technology/api/tree/main/docs/docs/getting-started/04-examples/03-mock-hardware-example.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"gettingStartedSidebar",previous:{title:"The application graph editor",permalink:"/docs/getting-started/examples/editor-example"},next:{title:"Next steps",permalink:"/docs/getting-started/next"}},c={},s=[{value:"Launcher configuration requirements",id:"launcher-configuration-requirements",level:2},{value:"URDF Hardware Manager",id:"urdf-hardware-manager",level:2},{value:"Setting up the application",id:"setting-up-the-application",level:2},{value:"The example explained",id:"the-example-explained",level:2},{value:"Run the application",id:"run-the-application",level:2},{value:"Visualize the mock robot in RViz",id:"visualize-the-mock-robot-in-rviz",level:2}],p={toc:s},d="wrapper";function h(e){let{components:t,...o}=e;return(0,r.kt)(d,(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"an-application-with-hardware"},"An application with hardware"),(0,r.kt)("h2",{id:"launcher-configuration-requirements"},"Launcher configuration requirements"),(0,r.kt)("p",null,"This example uses an additional Universal Robots collection package, which includes drivers for communicating with\nUR robots and the example URDF content used to visualize the robot arm."),(0,r.kt)("p",null,"Use AICA Core v4.2.0 together with the ",(0,r.kt)("inlineCode",{parentName:"p"},"collections/ur-collection")," package at version v4.1.0 to reproduce this example."),(0,r.kt)("h2",{id:"urdf-hardware-manager"},"URDF Hardware Manager"),(0,r.kt)("p",null,"After starting AICA Studio, open the Hardware Manager\n(",(0,r.kt)("a",{parentName:"p",href:"http://localhost:8080/studio/hardware"},"localhost:8080/studio/hardware"),"). This page shows a table of available URDF\nfiles in the container database with a name and a description."),(0,r.kt)("p",null,'AICA hardware collections include example URDFs, which are shown on the table with a pad-lock icon indicating that they\nare not editable. Users can make an editable copy of a selected URDF with the "Save As" button, or upload and edit\ncustom URDFs.'),(0,r.kt)("p",null,'From the hardware manager table, select the entry named "Universal Robots 5e (mock interface)". The URDF content should\nappear on the right side of the page.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="Universal Robots 5e (mock interface)"',title:'"Universal',Robots:!0,"5e":!0,"(mock":!0,'interface)"':!0},'<?xml version="1.0" ?>\n<robot name="ur5e">\n    <ros2_control name="ur5e_mock" type="system">\n        <hardware>\n            #highlight-next-line\n            <plugin>aica_core_interfaces/MockInterface</plugin>\n        </hardware>\n        ...\n    </ros2_control>\n</robot>\n')),(0,r.kt)("p",null,"The selected URDF specifies the hardware plugin ",(0,r.kt)("inlineCode",{parentName:"p"},"aica_core_interfaces/MockInterface"),". This is a generic AICA plugin that\nmocks real robot hardware by perfectly following all commands and reflecting back the robot state."),(0,r.kt)("p",null,"The mock URDF will be used to demonstrate the hardware interface block in AICA applications."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Refer to the overview section ",(0,r.kt)("a",{parentName:"p",href:"/docs/concepts/ros-concepts/control"},"Controlling robots with ros2_control")," for\nmore context.")),(0,r.kt)("h2",{id:"setting-up-the-application"},"Setting up the application"),(0,r.kt)("p",null,"Go to the Editor page using the top navigation bar or at\n",(0,r.kt)("a",{parentName:"p",href:"http://localhost:8080/studio/editor"},"localhost:8080/studio/editor")," and create a new application."),(0,r.kt)("p",null,"Enter the following YAML and generate the graph."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"schema: 2-0-2\ndependencies:\n  core: v4.2.0\non_start:\n  load:\n    hardware: mock_hardware\nhardware:\n  mock_hardware:\n    display_name: Hardware Interface\n    urdf: Universal Robots 5e (mock interface)\n    rate: 60\n    events:\n      transitions:\n        on_load:\n          load:\n            controller: robot_state_broadcaster\n            hardware: mock_hardware\n    controllers:\n      robot_state_broadcaster:\n        plugin: aica_core_controllers/RobotStateBroadcaster\ngraph:\n  positions:\n    buttons:\n      button:\n        x: -120\n        y: 260\n    hardware:\n      mock_hardware:\n        x: 500\n        y: -20\n  buttons:\n    button:\n      display_name: Activate Controller\n      on_click:\n        switch_controllers:\n          hardware: mock_hardware\n          activate: robot_state_broadcaster\n")),(0,r.kt)("p",null,"The application graph should show a hardware interface with a controller and an event trigger."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"mock hardware example graph",src:a(7239).Z,width:"956",height:"576"})),(0,r.kt)("h2",{id:"the-example-explained"},"The example explained"),(0,r.kt)("p",null,"The application begins with the ",(0,r.kt)("inlineCode",{parentName:"p"},"on_start")," directive to list the initial application events. In this case, the only\nevent that occurs on start is to load the ",(0,r.kt)("inlineCode",{parentName:"p"},"mock_hardware")," hardware interface."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"on_start:\n  load:\n    hardware: mock_hardware\n")),(0,r.kt)("p",null,"Moving down the application, the top-level ",(0,r.kt)("inlineCode",{parentName:"p"},"hardware")," field defines the hardware interfaces in an application. In this\ncase, there is one hardware interface called ",(0,r.kt)("inlineCode",{parentName:"p"},"mock_hardware"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"hardware:\n  mock_hardware:\n    display_name: Hardware Interface\n    urdf: Universal Robots 5e (mock interface)\n    rate: 60\n    events:\n      transitions:\n        on_load:\n          load:\n            controller: robot_state_broadcaster\n            hardware: mock_hardware\n    controllers:\n      robot_state_broadcaster:\n        plugin: aica_core_controllers/RobotStateBroadcaster\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"urdf")," field specifies the ",(0,r.kt)("inlineCode",{parentName:"p"},"Universal Robots 5e (mock interface)")," URDF as identified on the hardware manager page."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"events")," field lists events that occur on state transitions of the hardware interface. In this case, the ",(0,r.kt)("inlineCode",{parentName:"p"},"on_load"),"\ntransition is used to load a controller once the ardware interface is loaded."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"controllers")," field lists the controllers associated with the hardware interface. In this example, the only\ncontroller is the ",(0,r.kt)("inlineCode",{parentName:"p"},"aica_core_controllers/RobotStateBroadcaster"),", which is a generic AICA controller that broadcasts the\nrobot joint states and transforms."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Learn more about available properties for application hardware on\nthe ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/yaml-syntax"},"YAML application syntax")," reference page.")),(0,r.kt)("p",null,"At the bottom, the application defines positions of components in the graph and event trigger buttons under the\ntop-level ",(0,r.kt)("inlineCode",{parentName:"p"},"graph")," field."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"graph:\n  positions:\n    buttons:\n      button:\n        x: -120\n        y: 260\n    hardware:\n      mock_hardware:\n        x: 500\n        y: -20\n  buttons:\n    button:\n      display_name: Activate Controller\n      on_click:\n        switch_controllers:\n          hardware: mock_hardware\n          activate: robot_state_broadcaster\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"on_click")," field of buttons defines the application events that are triggered with the event button is pressed. In\nthis case, it triggers the ",(0,r.kt)("inlineCode",{parentName:"p"},"switch_controllers")," event which is used to activate the ",(0,r.kt)("inlineCode",{parentName:"p"},"robot_state_broadcaster")," controller\non the ",(0,r.kt)("inlineCode",{parentName:"p"},"mock_hardware")," interface."),(0,r.kt)("h2",{id:"run-the-application"},"Run the application"),(0,r.kt)("p",null,"Putting it all together, pressing Play on this application should load the mock hardware interface and load the\nbroadcaster controller. When the trigger button is pressed in the graph editor, the broadcaster will be activated."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},'Controllers can also be "auto-activated", similar to the procedure in the\n',(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started/examples/editor-example#auto-lifecycle-events"},"previous example"),'. Try to modify this example by removing the trigger\nbutton and navigating to the controller settings to toggle the "auto-activate" behavior. Once the application is started\nagain, the controller should now automatically be active.')),(0,r.kt)("h2",{id:"visualize-the-mock-robot-in-rviz"},"Visualize the mock robot in RViz"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Only users with a Linux host can visualize the robot with RViz. On macOS, AICA Launcher will not show the RViz option.")),(0,r.kt)("p",null,'Open RViz using the gear menu icon in the bottom right of AICA Launcher and choosing the "Launch RViz" option.'),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"A native 3D viewer will be available in AICA Studio for all platforms in an upcoming version.")),(0,r.kt)("p",null,"When the application is playing and the robot broadcaster controller has been activated, the robot model should appear\nin the RViz viewer."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"mock hardware example rviz",src:a(9798).Z,width:"1862",height:"1187"})))}h.isMDXComponent=!0},7239:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/mock-hardware-example-graph-e40e01d15583a53baf0a042fc4c61301.png"},9798:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/mock-hardware-example-rviz-e0b1b45c9e544450cdf745db74241143.png"}}]);