"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4411],{3182:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>m,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"concepts/ros-concepts/dynamic-composition","title":"Dynamic composition","description":"Traditionally, ROS nodes and lifecycle nodes, are compiled as executables so that they can be launched as stand-alone","source":"@site/docs/concepts/ros-concepts/dynamic-composition.md","sourceDirName":"concepts/ros-concepts","slug":"/concepts/ros-concepts/dynamic-composition","permalink":"/docs/concepts/ros-concepts/dynamic-composition","draft":false,"unlisted":false,"editUrl":"https://github.com/aica-technology/api/tree/main/docs/docs/concepts/ros-concepts/dynamic-composition.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Dynamic composition"},"sidebar":"conceptsSidebar","previous":{"title":"Lifecycle nodes","permalink":"/docs/concepts/ros-concepts/lifecycle-nodes"},"next":{"title":"TF","permalink":"/docs/concepts/ros-concepts/tf"}}');var t=o(4848),i=o(8453);const c={sidebar_position:4,title:"Dynamic composition"},a="Dynamic composition",r={},d=[];function p(e){const n={a:"a",admonition:"admonition",h1:"h1",header:"header",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"dynamic-composition",children:"Dynamic composition"})}),"\n",(0,t.jsxs)(n.p,{children:["Traditionally, ROS nodes and lifecycle nodes, are compiled as executables so that they can be launched as stand-alone\nprocesses. ",(0,t.jsx)("nobr",{children:"ROS 2"})," ",(0,t.jsx)(n.strong,{children:"components"})," and ",(0,t.jsx)(n.strong,{children:"lifecycle components"})," are an extension to nodes that are compiled as\nshared libraries. Rather than being launched directly, components are dynamically loaded by other processes."]}),"\n",(0,t.jsxs)(n.p,{children:["A component manager is a specialized container process that can load and unload components. By managing component\ninstances on demand, ",(0,t.jsx)(n.strong,{children:"applications become more efficient but also more modular"}),". The application and the network graph\nstructure become deploy-time and runtime decisions, rather than compile-time decisions."]}),"\n",(0,t.jsx)(n.p,{children:"Another key benefit of composition is the ability to execute multiple components in the same processing thread, which\nenables memory sharing and intra-process communication. Instead of a published message needing to be serialized, passed\nthrough a middleware communication layer and deserialized by a subscriber in a different process, intra-process\ncommunication allows publishers and subscribers in the same process can simply exchange messages as pointers to\nin-process memory. This configuration greatly reduces the computational burden and latency of messaging, which is\nsignificant when components are sending and receiving complex message packets at high frequencies (as is often the case\nin sensor-driven robot control)."}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Read more about composition in\n",(0,t.jsx)(n.a,{href:"http://docs.ros.org/en/iron/Concepts/Intermediate/About-Composition.html",children:"the official ROS 2 documentation"}),"."]})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>a});var s=o(6540);const t={},i=s.createContext(t);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);