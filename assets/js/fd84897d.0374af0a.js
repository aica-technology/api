"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7881],{3443:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"concepts/building-blocks/events","title":"Events","description":"Events are discrete actions that change the dynamic state of an AICA application. They are handled and executed by the","source":"@site/docs/concepts/building-blocks/events.md","sourceDirName":"concepts/building-blocks","slug":"/concepts/building-blocks/events","permalink":"/docs/concepts/building-blocks/events","draft":false,"unlisted":false,"editUrl":"https://github.com/aica-technology/api/tree/main/docs/docs/concepts/building-blocks/events.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Events"},"sidebar":"conceptsSidebar","previous":{"title":"Signals","permalink":"/docs/concepts/building-blocks/signals"},"next":{"title":"Components","permalink":"/docs/concepts/building-blocks/components/"}}');var o=t(4848),s=t(8453);const a={sidebar_position:2,title:"Events"},r="Events",c={},d=[{value:"Event types",id:"event-types",level:2},{value:"Triggering events",id:"triggering-events",level:2},{value:"Predicates",id:"predicates",level:3},{value:"Transitions",id:"transitions",level:3},{value:"Sequences",id:"sequences",level:3},{value:"Conditions",id:"conditions",level:3}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"events",children:"Events"})}),"\n",(0,o.jsx)(n.p,{children:'Events are discrete actions that change the dynamic state of an AICA application. They are handled and executed by the\nEvent Engine. For this reason, they are sometimes referred to as "state events".'}),"\n",(0,o.jsx)(n.h2,{id:"event-types",children:"Event types"}),"\n",(0,o.jsx)(n.p,{children:"The following events can be used to dynamically update the state of a running application:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Load or unload a component, controller or hardware interface"}),"\n",(0,o.jsx)(n.li,{children:"Trigger a lifecycle transition (for example, configure, activate or deactivate) on a lifecycle component"}),"\n",(0,o.jsx)(n.li,{children:"Activate or deactivate a controller"}),"\n",(0,o.jsx)(n.li,{children:"Set the value of a parameter on a loaded component or controller"}),"\n",(0,o.jsx)(n.li,{children:"Call a service on a loaded component or controller"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"triggering-events",children:"Triggering events"}),"\n",(0,o.jsxs)(n.p,{children:["Events can be triggered externally by a user through interactions with AICA Studio or via the REST API.\nThey can also be triggered internally by the Event Engine according to the application description as a result\nof ",(0,o.jsx)(n.strong,{children:"predicates"}),", ",(0,o.jsx)(n.strong,{children:"transitions"}),", ",(0,o.jsx)(n.strong,{children:"sequences"})," or ",(0,o.jsx)(n.strong,{children:"conditions"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"predicates",children:"Predicates"}),"\n",(0,o.jsx)(n.p,{children:"Predicates are logical statements that evaluate to true or false and are used to indicate key states for either a\ncomponent or controller. AICA components and controllers broadcast any changes to their predicates to a global channel\nin a message containing the source name, the predicate name, and the current value (true or false) of the predicate."}),"\n",(0,o.jsxs)(n.p,{children:['While the term "predicate" has several formal definitions in grammar, logic and mathematics, at AICA the ',(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Predicate_(grammar)",children:"grammatical\ndefinition"})," is used when naming predicates."]}),"\n",(0,o.jsx)(n.p,{children:'Components define predicates depending on their function. A component that calculates if a given input state is within\nsome parameterized limits might have a predicate "is in bounds".'}),"\n",(0,o.jsx)(n.p,{children:"This definition of predicates allows application descriptions to trigger events in a very declarative way. For example:"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["When component A ",(0,o.jsx)(n.em,{children:"is in bounds"}),", load component B"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Here, ",(0,o.jsx)(n.code,{children:"component A"})," is the source of the predicate, ",(0,o.jsx)(n.code,{children:"is in bounds"})," is the predicate itself, and ",(0,o.jsx)(n.code,{children:"load component B"})," is\nthe event that is triggered when the predicate is true."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["Events are only triggered on the ",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Signal_edge",children:(0,o.jsx)(n.em,{children:"rising edge"})})," of a predicate value."]})}),"\n",(0,o.jsx)(n.h3,{id:"transitions",children:"Transitions"}),"\n",(0,o.jsx)(n.p,{children:"The Event Engine allows components, controllers and hardware interfaces to be loaded and managed dynamically at runtime.\nOften, it is desirable for the state change in one component to trigger the state change of another. This can apply in\nthe case of setting up an application, where a controller might need to be loaded only after the corresponding hardware\ninterface is loaded. It often also applies to the case of handling errors, such that when a component is unloaded or\nenters into an error state, a controller or other component should be deactivated accordingly."}),"\n",(0,o.jsx)(n.p,{children:"Every valid state transition on any component, controller or hardware interface in an AICA application can be easily\nassociated with one or more events to be triggered when that state transition occurs."}),"\n",(0,o.jsx)(n.h3,{id:"sequences",children:"Sequences"}),"\n",(0,o.jsx)(n.p,{children:"A sequence is a list of steps that are handled sequentially in order. Sequence steps can trigger any state event, while\nintermediate sequence steps can also be configured with a time delay or to wait for a specific condition to resolve in\nthe application."}),"\n",(0,o.jsx)(n.p,{children:"Sequences are a powerful tool to manage events in predetermined ways within the dynamic context of robotic applications."}),"\n",(0,o.jsx)(n.h3,{id:"conditions",children:"Conditions"}),"\n",(0,o.jsx)(n.p,{children:"Application states, including the current states of components, controllers, hardware interfaces or their predicates,\ncan be manipulated with logical operators in conditional statements to create more advanced event triggers."}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["When component B ",(0,o.jsxs)(n.em,{children:["is ",(0,o.jsx)(n.strong,{children:"not"})," in bounds"]}),", do ..."]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["When component A ",(0,o.jsx)(n.em,{children:"is active"})," ",(0,o.jsx)(n.strong,{children:"and"})," component B ",(0,o.jsxs)(n.em,{children:["is ",(0,o.jsx)(n.strong,{children:"not"})," in bounds"]}),", do ..."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:'AICA conditions support the "not", "all", "any", and "one of" operators (also known as the NOT, AND, OR and XOR\noperators, respectively). If a condition does not trigger an event directly, it can still be used as the input to\nanother condition or to a conditional sequence step.'}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"Events are only triggered on the rising edge of a conditional value."})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(6540);const o={},s=i.createContext(o);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);