"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4920],{8107:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"examples/guides/isaaclab-aica-bridge","title":"Using Isaac Lab as a simulator","description":"This guide establishes a workflow for developing, testing, and deploying robotic applications by using Isaac Lab as the","source":"@site/docs/examples/guides/isaaclab-aica-bridge.md","sourceDirName":"examples/guides","slug":"/examples/guides/isaaclab-aica-bridge","permalink":"/docs/examples/guides/isaaclab-aica-bridge","draft":false,"unlisted":false,"editUrl":"https://github.com/aica-technology/api/tree/main/docs/docs/examples/guides/isaaclab-aica-bridge.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11,"title":"Using Isaac Lab as a simulator"},"sidebar":"examplesSidebar","previous":{"title":"ABB manipulators","permalink":"/docs/examples/guides/abb-hardware-interface"},"next":{"title":"CameraStreamer component","permalink":"/docs/examples/guides/camera-streamer"}}');var t=i(4848),r=i(8453);const s=i.p+"assets/images/isaaclab-aica-bridge-application-6769bc477bff17a8feb6795989a5d239.gif",o=i.p+"assets/images/isaaclab-aica-bridge-sim-scene-f8fca4322c92079b3e5d45211efcf022.png",l={sidebar_position:11,title:"Using Isaac Lab as a simulator"},c="Using Isaac Lab as a simulator",d={},h=[{value:"Installing Isaac Lab",id:"installing-isaac-lab",level:2},{value:"Creating a new scene in Isaac Lab",id:"creating-a-new-scene-in-isaac-lab",level:2},{value:"Running the Isaac Lab Simulator",id:"running-the-isaac-lab-simulator",level:2},{value:"Configuring the AICA Application",id:"configuring-the-aica-application",level:2},{value:"Running the example",id:"running-the-example",level:2},{value:"Beware",id:"beware",level:3}];function m(n){const e={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components},{Details:i}=e;return i||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"using-isaac-lab-as-a-simulator",children:"Using Isaac Lab as a simulator"})}),"\n",(0,t.jsx)(e.p,{children:"This guide establishes a workflow for developing, testing, and deploying robotic applications by using Isaac Lab as the\nsimulation backend in the AICA System. This connection provides several key benefits:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"RL Policy Testing"}),": AICA\u2019s RL Policy Component SDK allows developers to deploy Reinforcement Learning (RL) models\ndirectly onto real hardware through components in AICA Studio. These models can be trained in Isaac Lab, and with the\nAICA System interacting directly with Isaac Lab, users can validate trained policies under the same conditions in\nwhich they were learned."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Physics-Based Evaluation"}),": Running the AICA System within a physics-based simulation such as Isaac Lab allows\ndevelopers to observe how control algorithms respond to realistic dynamics, friction, collisions, and sensor noise.\nThis ensures that behaviors tested in simulation mirror real-world performance, reducing the risk of unexpected\nfailures during deployment and enabling safer, more reliable policy tuning before engaging with physical robots."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Digital Twin Control"}),": Beyond RL, running the AICA System with Isaac Lab provides users with ways to interact with\ndigital twins of their robots. Applications can be authored, tested, and validated entirely in simulation before\nconnecting to actual hardware. This improves safety and enables rapid iteration in early stages, helping streamline\nthe overall development cycle."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["With Isaac Lab as simulator, users can build scenes in Isaac Lab, command simulated robots using AICA System, validate\nperformance, switch the hardware interface to a real robot, and hit play with no code changes required. In the sections\nbelow, we review the steps to run the ",(0,t.jsx)(e.a,{href:"../core-components/point-attractor",children:"Point Attractor example"})," with a UR5e robot\nsimulated in Isaac Lab:"]}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"#installing-isaac-lab",children:"Installing Isaac Lab"}),": Install and test AICA Bridge in Isaac Lab"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"#creating-a-new-scene-in-isaac-lab",children:"Creating a new scene in Isaac Lab"}),": Define and register a scene configuration\nclass. This scene will include the robot model and any other objects it could interact with in the environment."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"#running-the-isaac-lab-simulator",children:"Running the Isaac Lab Simulator"}),": Launch the simulator with the desired\ncombination of scene, rate, and other parameters."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"#configuring-the-aica-application",children:"Configuring the AICA Application"}),": Set up a custom hardware in AICA Studio that\ncan communicate with the simulator."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"#running-the-example",children:"Running the example"}),": Start the simulator and the AICA application to control the robot."]}),"\n"]}),"\n",(0,t.jsx)(e.admonition,{type:"info",children:(0,t.jsxs)(e.p,{children:["Complete the Point Attractor application from ",(0,t.jsx)(e.a,{href:"/docs/examples/core-components/point-attractor",children:"this page"})," before proceeding, as\nthis guide builds on that example."]})}),"\n",(0,t.jsx)(e.h2,{id:"installing-isaac-lab",children:"Installing Isaac Lab"}),"\n",(0,t.jsxs)(e.p,{children:["Begin by cloning AICA's fork of\n",(0,t.jsx)(e.a,{href:"https://github.com/aica-technology/isaac-lab/tree/v0.1.0",children:"Isaac Lab"}),"."]}),"\n",(0,t.jsxs)(e.p,{children:["Once you\u2019ve cloned the repository, check out the ",(0,t.jsx)(e.code,{children:"v0.1.0"})," tag, then build and start the Docker container by running:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"python3 docker/container.py start\n"})}),"\n",(0,t.jsx)(e.p,{children:"Next, enter the running container using:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"python3 docker/container.py enter\n"})}),"\n",(0,t.jsx)(e.p,{children:"This ensures you are inside a development environment where Isaac Lab and all required dependencies are already\ninstalled. Run the following command in the same terminal to verify the installation:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"python3 scripts/custom/aica_bridge/run_bridge.py --scene basic_scene\n"})}),"\n",(0,t.jsx)(e.p,{children:"This will spawn a UR5e robot, a ground plane, and lights. If you see the UR5e robot in the scene as shown in the\nimage below, then the installation was successful and you are ready to proceed with the next steps. If not, carefully go\nover the instructions again or reach out to AICA for help."}),"\n",(0,t.jsx)("div",{class:"text--center",children:(0,t.jsx)("img",{src:o,alt:"Basic Scene"})}),"\n",(0,t.jsx)(e.h2,{id:"creating-a-new-scene-in-isaac-lab",children:"Creating a new scene in Isaac Lab"}),"\n",(0,t.jsxs)(e.p,{children:["A scene is a collection of entities (e.g., terrain, articulations, sensors, lights, etc.) that can be added to the\nsimulation. Refer to Isaac Lab documentation on\n",(0,t.jsx)(e.a,{href:"https://isaac-sim.github.io/IsaacLab/main/source/api/lab/isaaclab.scene.html",children:"scenes"}),"\nfor more details."]}),"\n",(0,t.jsxs)(e.p,{children:["To create a new scene, you should define a scene configuration class that inherits from ",(0,t.jsx)(e.code,{children:"InteractiveSceneCfg"}),". Various\nexamples of scene config classes can be found in the\n",(0,t.jsx)(e.a,{href:"https://github.com/aica-technology/isaac-lab/tree/v0.1.0/scripts/custom/aica_bridge/scenes",children:"scenes"}),"\ndirectory of the Isaac Lab repository."]}),"\n",(0,t.jsx)(e.admonition,{type:"note",children:(0,t.jsx)(e.p,{children:"Scenes live entirely in Isaac Lab and the definitions of the assets used in the scene should also be defined there. By\ndefault, the 3D visualization in AICA Studio will only display the robot and mirror the robot's movements. Advanced\nusers may export the scene from Isaac Lab as URDF and install it within AICA System to visualize the entire scene."})}),"\n",(0,t.jsxs)(e.p,{children:["Once you've defined your scene configuration class, register it by adding a corresponding key to the ",(0,t.jsx)(e.code,{children:"scenes"})," dictionary\nlocated in\n",(0,t.jsx)(e.a,{href:"https://github.com/aica-technology/isaac-lab/blob/v0.1.0/scripts/custom/aica_bridge/scenes/__init__.py",children:"this file"}),".\nAfter registering the scene, you can launch it by running the following command in the development environment:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"python3 scripts/custom/aica_bridge/run_bridge.py --scene <your_scene_name>\n"})}),"\n",(0,t.jsxs)(e.p,{children:["In this example we will run the ",(0,t.jsx)(e.code,{children:"basic_scene"})," scene, which is already registered in the ",(0,t.jsx)(e.code,{children:"scenes"})," dictionary."]}),"\n",(0,t.jsx)(e.h2,{id:"running-the-isaac-lab-simulator",children:"Running the Isaac Lab Simulator"}),"\n",(0,t.jsx)(e.p,{children:"The simulator provides a list of parameters that you should understand before configuring it:"}),"\n",(0,t.jsx)(e.admonition,{type:"tip",children:(0,t.jsx)(e.p,{children:"Some of these parameters have counterparts defined in the hardware interface used within AICA Studio and will be\nintroduced below."})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"scene"}),": Specifies which scene to load in the simulator."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"rate"}),": Sets the simulation update frequency in hertz (Hz). The default is ",(0,t.jsx)(e.strong,{children:"100 Hz"}),", but you can adjust this value\nbased on your application\u2019s requirements."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"ft_sensor_name"}),": If provided, a sensor will be attached to the end-effector link.","\n",(0,t.jsx)(e.admonition,{type:"caution",children:(0,t.jsxs)(e.p,{children:["If a ",(0,t.jsx)(e.code,{children:"<sensor>"})," plugin in the URDF of the hardware interface used in AICA Studio is configured, the name of the sensor\nhere needs to correspond to the name of the sensor in the URDF."]})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"ip_address"}),": Indicates the IP address of the machine running AICA Core. If the simulator and AICA Core are on the\nsame network, keep the default ",(0,t.jsx)(e.code,{children:"*"}),"."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"state_port"}),": The port used to stream state updates from the simulator to the hardware interface in AICA Studio. The\ndefault is 1801, and it must match the ",(0,t.jsx)(e.code,{children:"state_port"})," specified in the hardware interface configuration."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"command_port"}),": The port used to stream commands from the hardware interface in AICA Studio to the simulator. The\ndefault is 1802, and it must match the ",(0,t.jsx)(e.code,{children:"command_port"})," in the hardware interface configuration."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"ft_sensor_port"}),": The port used to stream force/torque measurements from the simulator to the hardware interface in\nAICA Studio. The default is 1803, and it must match the ",(0,t.jsx)(e.code,{children:"ft_sensor_port"})," in the hardware interface configuration."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"joint_names"}),": Lists the joint names that will be controlled through AICA Studio. For example, if you are using a\nFranka Panda robot with a gripper but only want to control the arm, you can specify:",(0,t.jsx)(e.br,{}),"\n",(0,t.jsx)(e.code,{children:"panda_joint1, panda_joint2, panda_joint3, panda_joint4, panda_joint5, panda_joint6, panda_joint7"}),". The\nsimulator will then only send states and accept commands for those joints. If you want to control all joints, you can\nkeep the default ",(0,t.jsx)(e.code,{children:".*"}),"."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"command_interface"}),": Defines the command type accepted by the simulator. The default is ",(0,t.jsx)(e.code,{children:"positions"}),", but you can\nset it to ",(0,t.jsx)(e.code,{children:"velocities"})," or ",(0,t.jsx)(e.code,{children:"torques"})," as needed. The choice of command type depends on the controller used in AICA\nStudio. If a mismatched command type is received, the simulator will stop with a ",(0,t.jsx)(e.code,{children:"ValueError"}),"."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"headless"}),": When set to ",(0,t.jsx)(e.code,{children:"true"}),", runs the simulator in headless mode (e.g. without opening user interface), useful\nfor remote simulations or running the simulation at high frequencies."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"device"}),": Specifies the compute device for the simulation. The default is ",(0,t.jsx)(e.code,{children:"cuda"})," for GPU acceleration, but you can\nswitch to ",(0,t.jsx)(e.code,{children:"cpu"})," if GPU resources are unavailable."]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["Ensure these parameters are correctly configured to enable seamless communication between the simulator and your AICA\napplication. In case you want to run the simulator with different parameters, you can do so by running the following\ncommand in the ",(0,t.jsx)(e.code,{children:"run_bridge.py"})," script:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"python3 scripts/custom/aica_bridge/run_bridge.py \\\n  --scene <your_scene_name> \\\n  --rate <simulation_rate> \\\n  --ft_sensor_name <ft_sensor_name_in_urdf> \\\n  --state_port <state_port> \\\n  --command_port <command_port> \\\n  --ft_sensor_port <ft_sensor_port> \\\n  --joint_names <comma_separated_joint_names_to_control> \\\n  --command_interface <positions | velocities | torques> \\\n  --headless <true | false> \\\n  --device <cuda | cpu>\n"})}),"\n",(0,t.jsx)(e.h2,{id:"configuring-the-aica-application",children:"Configuring the AICA Application"}),"\n",(0,t.jsxs)(e.p,{children:["Using AICA Launcher, make sure that your configuration includes the ",(0,t.jsx)(e.code,{children:"collections/ur-collection"})," package."]}),"\n",(0,t.jsx)(e.p,{children:"First, configure the hardware interface in AICA Studio to communicate with the Isaac Lab simulator. This involves\nduplicating an existing hardware and swap out the plugin in the URDF."}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"In AICA Studio, go to the Hardware tab."}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:["Click on the ",(0,t.jsx)(e.code,{children:"Universal Robots 5e (mock interface)"})," to open it and use ",(0,t.jsx)(e.strong,{children:"Save As"})," to create a copy with a new name\nand description. For example, name it ",(0,t.jsx)(e.code,{children:"Universal Robots 5e (LightWeightInterface)"})," as this is the name used in the\nexample attached below."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:["Replace the content of the URDF with the following and click ",(0,t.jsx)(e.strong,{children:"Save"}),"."]}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsxs)("summary",{children:["UR5e URDF using the ",(0,t.jsx)(e.code,{children:"LightWeightInterface"})]}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-xml",children:'<?xml version="1.0"?>\n<robot name="ur5e">\n  <link name="world" />\n  <link name="base_link" />\n  <link name="base_link_inertia">\n    <visual>\n      <origin rpy="0 0 3.141592653589793" xyz="0 0 0" />\n      <geometry>\n        <mesh filename="package://ur_description/meshes/ur5e/visual/base.dae" />\n      </geometry>\n    </visual>\n    <collision>\n      <origin rpy="0 0 3.141592653589793" xyz="0 0 0" />\n      <geometry>\n        <mesh filename="package://ur_description/meshes/ur5e/collision/base.stl" />\n      </geometry>\n    </collision>\n    <inertial>\n      <mass value="4.0" />\n      <origin rpy="0 0 0" xyz="0 0 0" />\n      <inertia ixx="0.00443333156" ixy="0.0" ixz="0.0" iyy="0.00443333156" iyz="0.0" izz="0.0072" />\n    </inertial>\n  </link>\n  <link name="shoulder_link">\n    <visual>\n      <origin rpy="0 0 3.141592653589793" xyz="0 0 0" />\n      <geometry>\n        <mesh filename="package://ur_description/meshes/ur5e/visual/shoulder.dae" />\n      </geometry>\n    </visual>\n    <collision>\n      <origin rpy="0 0 3.141592653589793" xyz="0 0 0" />\n      <geometry>\n        <mesh filename="package://ur_description/meshes/ur5e/collision/shoulder.stl" />\n      </geometry>\n    </collision>\n    <inertial>\n      <mass value="3.761" />\n      <origin rpy="0 0 0" xyz="0 0 0" />\n      <inertia ixx="0.01043677082529" ixy="0.0" ixz="0.0" iyy="0.01043677082529" iyz="0.0"\n        izz="0.006769799999999999" />\n    </inertial>\n  </link>\n  <link name="upper_arm_link">\n    <visual>\n      <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.138" />\n      <geometry>\n        <mesh filename="package://ur_description/meshes/ur5e/visual/upperarm.dae" />\n      </geometry>\n    </visual>\n    <collision>\n      <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.138" />\n      <geometry>\n        <mesh filename="package://ur_description/meshes/ur5e/collision/upperarm.stl" />\n      </geometry>\n    </collision>\n    <inertial>\n      <mass value="8.058" />\n      <origin rpy="0 1.5707963267948966 0" xyz="-0.2125 0.0 0.138" />\n      <inertia ixx="0.128541836083245" ixy="0.0" ixz="0.0" iyy="0.128541836083245" iyz="0.0"\n        izz="0.014504399999999999" />\n    </inertial>\n  </link>\n  <link name="forearm_link">\n    <visual>\n      <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.007" />\n      <geometry>\n        <mesh filename="package://ur_description/meshes/ur5e/visual/forearm.dae" />\n      </geometry>\n    </visual>\n    <collision>\n      <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.007" />\n      <geometry>\n        <mesh filename="package://ur_description/meshes/ur5e/collision/forearm.stl" />\n      </geometry>\n    </collision>\n    <inertial>\n      <mass value="2.846" />\n      <origin rpy="0 1.5707963267948966 0" xyz="-0.1961 0.0 0.007" />\n      <inertia ixx="0.03904256026963631" ixy="0.0" ixz="0.0" iyy="0.03904256026963631" iyz="0.0"\n        izz="0.005122799999999999" />\n    </inertial>\n  </link>\n  <link name="wrist_1_link">\n    <visual>\n      <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.127" />\n      <geometry>\n        <mesh filename="package://ur_description/meshes/ur5e/visual/wrist1.dae" />\n      </geometry>\n    </visual>\n    <collision>\n      <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.127" />\n      <geometry>\n        <mesh filename="package://ur_description/meshes/ur5e/collision/wrist1.stl" />\n      </geometry>\n    </collision>\n    <inertial>\n      <mass value="1.37" />\n      <origin rpy="0 0 0" xyz="0 0 0" />\n      <inertia ixx="0.0028769988492000002" ixy="0.0" ixz="0.0" iyy="0.0028769988492000002" iyz="0.0"\n        izz="0.0024660000000000003" />\n    </inertial>\n  </link>\n  <link name="wrist_2_link">\n    <visual>\n      <origin rpy="0 0 0" xyz="0 0 -0.0997" />\n      <geometry>\n        <mesh filename="package://ur_description/meshes/ur5e/visual/wrist2.dae" />\n      </geometry>\n    </visual>\n    <collision>\n      <origin rpy="0 0 0" xyz="0 0 -0.0997" />\n      <geometry>\n        <mesh filename="package://ur_description/meshes/ur5e/collision/wrist2.stl" />\n      </geometry>\n    </collision>\n    <inertial>\n      <mass value="1.3" />\n      <origin rpy="0 0 0" xyz="0 0 0" />\n      <inertia ixx="0.002729998908" ixy="0.0" ixz="0.0" iyy="0.002729998908" iyz="0.0" izz="0.00234" />\n    </inertial>\n  </link>\n  <link name="wrist_3_link">\n    <visual>\n      <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.0989" />\n      <geometry>\n        <mesh filename="package://ur_description/meshes/ur5e/visual/wrist3.dae" />\n      </geometry>\n    </visual>\n    <collision>\n      <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.0989" />\n      <geometry>\n        <mesh filename="package://ur_description/meshes/ur5e/collision/wrist3.stl" />\n      </geometry>\n    </collision>\n    <inertial>\n      <mass value="0.365" />\n      <origin rpy="0 0 0" xyz="0.0 0.0 -0.0229" />\n      <inertia ixx="0.00019212345231725498" ixy="0.0" ixz="0.0" iyy="0.00019212345231725498"\n        iyz="0.0" izz="0.000256640625" />\n    </inertial>\n  </link>\n  <joint name="base_joint" type="fixed">\n    <origin rpy="0 0 0" xyz="0 0 0" />\n    <parent link="world" />\n    <child link="base_link" />\n  </joint>\n  <joint name="base_link-base_link_inertia" type="fixed">\n    <parent link="base_link" />\n    <child link="base_link_inertia" />\n    <origin rpy="0 0 3.141592653589793" xyz="0 0 0" />\n  </joint>\n  <joint name="shoulder_pan_joint" type="revolute">\n    <parent link="base_link_inertia" />\n    <child link="shoulder_link" />\n    <origin rpy="0 0 0" xyz="0 0 0.1625" />\n    <axis xyz="0 0 1" />\n    <limit effort="150.0" lower="-6.283185307179586" upper="6.283185307179586"\n      velocity="3.141592653589793" />\n    <dynamics damping="0" friction="0" />\n  </joint>\n  <joint name="shoulder_lift_joint" type="revolute">\n    <parent link="shoulder_link" />\n    <child link="upper_arm_link" />\n    <origin rpy="1.570796327 0 0" xyz="0 0 0" />\n    <axis xyz="0 0 1" />\n    <limit effort="150.0" lower="-6.283185307179586" upper="6.283185307179586"\n      velocity="3.141592653589793" />\n    <dynamics damping="0" friction="0" />\n  </joint>\n  <joint name="elbow_joint" type="revolute">\n    <parent link="upper_arm_link" />\n    <child link="forearm_link" />\n    <origin rpy="0 0 0" xyz="-0.425 0 0" />\n    <axis xyz="0 0 1" />\n    <limit effort="150.0" lower="-3.141592653589793" upper="3.141592653589793"\n      velocity="3.141592653589793" />\n    <dynamics damping="0" friction="0" />\n  </joint>\n  <joint name="wrist_1_joint" type="revolute">\n    <parent link="forearm_link" />\n    <child link="wrist_1_link" />\n    <origin rpy="0 0 0" xyz="-0.3922 0 0.1333" />\n    <axis xyz="0 0 1" />\n    <limit effort="28.0" lower="-6.283185307179586" upper="6.283185307179586"\n      velocity="3.141592653589793" />\n    <dynamics damping="0" friction="0" />\n  </joint>\n  <joint name="wrist_2_joint" type="revolute">\n    <parent link="wrist_1_link" />\n    <child link="wrist_2_link" />\n    <origin rpy="1.570796327 0 0" xyz="0 -0.0997 -2.044881182297852e-11" />\n    <axis xyz="0 0 1" />\n    <limit effort="28.0" lower="-6.283185307179586" upper="6.283185307179586"\n      velocity="3.141592653589793" />\n    <dynamics damping="0" friction="0" />\n  </joint>\n  <joint name="wrist_3_joint" type="revolute">\n    <parent link="wrist_2_link" />\n    <child link="wrist_3_link" />\n    <origin rpy="1.570796326589793 3.141592653589793 3.141592653589793"\n      xyz="0 0.0996 -2.042830148012698e-11" />\n    <axis xyz="0 0 1" />\n    <limit effort="28.0" lower="-6.283185307179586" upper="6.283185307179586"\n      velocity="3.141592653589793" />\n    <dynamics damping="0" friction="0" />\n  </joint>\n  <link name="base" />\n  <joint name="base_link-base_fixed_joint" type="fixed">\n    <origin rpy="0 0 3.141592653589793" xyz="0 0 0" />\n    <parent link="base_link" />\n    <child link="base" />\n  </joint>\n  <link name="flange" />\n  <joint name="wrist_3-flange" type="fixed">\n    <parent link="wrist_3_link" />\n    <child link="flange" />\n    <origin rpy="0 -1.5707963267948966 -1.5707963267948966" xyz="0 0 0" />\n  </joint>\n  <link name="tool0" />\n  <joint name="flange-tool0" type="fixed">\n    <origin rpy="1.5707963267948966 0 1.5707963267948966" xyz="0 0 0" />\n    <parent link="flange" />\n    <child link="tool0" />\n  </joint>\n  <ros2_control name="ur5e" type="system">\n  <hardware>\n      <plugin>aica_core_interfaces/LightWeightInterface</plugin>\n      <param name="ip">0.0.0.0</param>\n      <param name="state_port">1801</param>\n      <param name="command_port">1802</param>\n      <param name="ft_sensor_port">1803</param>\n      <param name="bind_state_port">False</param>\n      <param name="bind_command_port">False</param>\n      <param name="bind_ft_sensor_port">False</param>\n  </hardware>\n    <joint name="shoulder_pan_joint">\n      <command_interface name="position" />\n      <command_interface name="velocity" />\n      <state_interface name="position">\n        \x3c!-- initial position for the mock system and simulation --\x3e\n        <param name="initial_value">0.0</param>\n      </state_interface>\n      <state_interface name="velocity">\n        <param name="initial_value">0.0</param>\n      </state_interface>\n      <state_interface name="effort">\n        <param name="initial_value">0.0</param>\n      </state_interface>\n    </joint>\n    <joint name="shoulder_lift_joint">\n      <command_interface name="position" />\n      <command_interface name="velocity" />\n      <state_interface name="position">\n        \x3c!-- initial position for the mock system and simulation --\x3e\n        <param name="initial_value">-1.57</param>\n      </state_interface>\n      <state_interface name="velocity">\n        <param name="initial_value">0.0</param>\n      </state_interface>\n      <state_interface name="effort">\n        <param name="initial_value">0.0</param>\n      </state_interface>\n    </joint>\n    <joint name="elbow_joint">\n      <command_interface name="position" />\n      <command_interface name="velocity" />\n      <state_interface name="position">\n        \x3c!-- initial position for the mock system and simulation --\x3e\n        <param name="initial_value">0.0</param>\n      </state_interface>\n      <state_interface name="velocity">\n        <param name="initial_value">0.0</param>\n      </state_interface>\n      <state_interface name="effort">\n        <param name="initial_value">0.0</param>\n      </state_interface>\n    </joint>\n    <joint name="wrist_1_joint">\n      <command_interface name="position" />\n      <command_interface name="velocity" />\n      <state_interface name="position">\n        \x3c!-- initial position for the mock system and simulation --\x3e\n        <param name="initial_value">-1.57</param>\n      </state_interface>\n      <state_interface name="velocity">\n        <param name="initial_value">0.0</param>\n      </state_interface>\n      <state_interface name="effort">\n        <param name="initial_value">0.0</param>\n      </state_interface>\n    </joint>\n    <joint name="wrist_2_joint">\n      <command_interface name="position" />\n      <command_interface name="velocity" />\n      <state_interface name="position">\n        \x3c!-- initial position for the mock system and simulation --\x3e\n        <param name="initial_value">0.0</param>\n      </state_interface>\n      <state_interface name="velocity">\n        <param name="initial_value">0.0</param>\n      </state_interface>\n      <state_interface name="effort">\n        <param name="initial_value">0.0</param>\n      </state_interface>\n    </joint>\n    <joint name="wrist_3_joint">\n      <command_interface name="position" />\n      <command_interface name="velocity" />\n      <state_interface name="position">\n        \x3c!-- initial position for the mock system and simulation --\x3e\n        <param name="initial_value">0.0</param>\n      </state_interface>\n      <state_interface name="velocity">\n        <param name="initial_value">0.0</param>\n      </state_interface>\n      <state_interface name="effort">\n        <param name="initial_value">0.0</param>\n      </state_interface>\n    </joint>\n  </ros2_control>\n</robot>\n'})})]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"Save your changes."}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:["Inspect the content of the new robot description to find the ",(0,t.jsx)(e.code,{children:"hardware"})," tag. You will notice the following content:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-xml",children:'<hardware>\n  <plugin>aica_core_interfaces/LightWeightInterface</plugin>\n  <param name="ip">0.0.0.0</param>\n  <param name="state_port">1801</param>\n  <param name="command_port">1802</param>\n  <param name="ft_sensor_port">1803</param>\n  <param name="bind_state_port">False</param>\n  <param name="bind_command_port">False</param>\n  <param name="bind_ft_sensor_port">False</param>\n</hardware>\n'})}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"LightWeightInterface"})," plugin facilitates communication between the AICA Core and Isaac Lab. For future\nreference, if you plan to use your own URDF, ensure that the hardware tag is written as shown above."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:["Finally, open the Point Attractor application from your database and modify the hardware interface to use the newly\ncreated ",(0,t.jsx)(e.code,{children:"Universal Robots 5e (LightWeightInterface)"})," hardware:"]}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:"Point Attractor Application"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:"schema: 2-0-4\ndependencies:\n  core: v4.4.2\nframes:\n  target:\n    reference_frame: world\n    position:\n      x: 0.328215\n      y: 0.056976\n      z: 0.336586\n    orientation:\n      w: -0.000004\n      x: 1\n      y: 0\n      z: 0\non_start:\n  load:\n    - component: signal_point_attractor\n    - hardware: hardware\n    - component: frame_to_signal\ncomponents:\n  frame_to_signal:\n    component: aica_core_components::ros::TfToSignal\n    display_name: Frame to Signal\n    events:\n      transitions:\n        on_load:\n          lifecycle:\n            component: frame_to_signal\n            transition: configure\n        on_configure:\n          lifecycle:\n            component: frame_to_signal\n            transition: activate\n    parameters:\n      frame: target\n    outputs:\n      pose: /frame_to_signal/pose\n  signal_point_attractor:\n    component: aica_core_components::motion::SignalPointAttractor\n    display_name: Signal Point Attractor\n    events:\n      transitions:\n        on_load:\n          lifecycle:\n            component: signal_point_attractor\n            transition: configure\n        on_configure:\n          lifecycle:\n            component: signal_point_attractor\n            transition: activate\n    inputs:\n      state: /hardware/robot_state_broadcaster/cartesian_state\n      attractor: /frame_to_signal/pose\n    outputs:\n      twist: /signal_point_attractor/twist\nhardware:\n  hardware:\n    display_name: Hardware Interface\n    urdf: Universal Robots 5e (LightWeightInterface)\n    rate: 100\n    events:\n      transitions:\n        on_load:\n          load:\n            - controller: robot_state_broadcaster\n              hardware: hardware\n            - controller: ik_velocity_controller\n              hardware: hardware\n    controllers:\n      robot_state_broadcaster:\n        plugin: aica_core_controllers/RobotStateBroadcaster\n        outputs:\n          cartesian_state: /hardware/robot_state_broadcaster/cartesian_state\n        events:\n          transitions:\n            on_load:\n              switch_controllers:\n                hardware: hardware\n                activate: robot_state_broadcaster\n      ik_velocity_controller:\n        plugin: aica_core_controllers/velocity/IKVelocityController\n        inputs:\n          command: /signal_point_attractor/twist\n        events:\n          transitions:\n            on_load:\n              switch_controllers:\n                hardware: hardware\n                activate: ik_velocity_controller\ngraph:\n  positions:\n    components:\n      frame_to_signal:\n        x: 200\n        y: 600\n      signal_point_attractor:\n        x: 660\n        y: 520\n    hardware:\n      hardware:\n        x: 1120\n        y: -20\n  edges:\n    on_start_on_start_signal_point_attractor_signal_point_attractor:\n      path:\n        - x: 380\n          y: 40\n        - x: 380\n          y: 580\n    on_start_on_start_frame_to_signal_frame_to_signal:\n      path:\n        - x: 140\n          y: 40\n        - x: 140\n          y: 660\n    hardware_hardware_robot_state_broadcaster_cartesian_state_signal_point_attractor_state:\n      path:\n        - x: 620\n          y: 520\n        - x: 620\n          y: 780\n"})})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"running-the-example",children:"Running the example"}),"\n",(0,t.jsx)(e.p,{children:"All the pieces to to run this example are now in place."}),"\n",(0,t.jsx)(e.p,{children:"Launch the simulator inside the Isaac Lab development environment Docker container using:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"python3 scripts/custom/aica_bridge/run_bridge.py --scene basic_scene --command_interface velocities\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Then, play your AICA application from the previous step. Go to the 3D view and drag the ",(0,t.jsx)(e.code,{children:"command"})," frame around to move\nthe robot in space."]}),"\n",(0,t.jsx)("div",{class:"text--center",children:(0,t.jsx)("img",{src:s,alt:"Point Attractor Example"})}),"\n",(0,t.jsx)(e.h3,{id:"beware",children:"Beware"}),"\n",(0,t.jsx)(e.p,{children:"When running the AICA System and Isaac Lab simulator, there are several important points to keep in mind to ensure safe\nand reliable performance:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Robot joint names"}),": Ensure that the joint names in the URDF of AICA Studio match those expected by the USD file in\nIsaac Lab. In the current implementation, there are two sources of truth for joint names: the URDF file and USD file.\nIf these names don't match, the simulator will not be able to send the states correctly to the AICA application."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Simulation Rate"}),": The simulation rate in Isaac Lab should be set to a value that allows for smooth and realistic\nupdates. Commands are updated at the simulation rate, so if the rate is too low, then the robot may not respond as\nexpected."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Hardware interface rate in AICA Studio"}),": The hardware interface rate in AICA Studio should match the simulation\nrate set in Isaac Lab."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Force Sensor"}),": If a force torque sensor is configured in the URDF of AICA Studio, ensure that the simulator is\nconfigured to provide force-torque data. This is done by setting the ",(0,t.jsx)(e.code,{children:"ft_sensor_name"})," parameter to the name of the\nforce torque sensor present in the URDF."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Command Interface"}),": Ensure that the command interface in the simulator matches the type of commands being sent by\nthe controllers in AICA Studio."]}),"\n"]})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(m,{...n})}):m(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>o});var a=i(6540);const t={},r=a.createContext(t);function s(n){const e=a.useContext(r);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),a.createElement(r.Provider,{value:e},n.children)}}}]);