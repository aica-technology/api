"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5518],{7418:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>p,default:()=>x,frontMatter:()=>d,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"examples/core-components/colliders","title":"Colliders","description":"The core components in AICA Studio contain several so-called Collider components that detect whether a specific target","source":"@site/docs/examples/core-components/colliders.md","sourceDirName":"examples/core-components","slug":"/examples/core-components/colliders","permalink":"/docs/examples/core-components/colliders","draft":false,"unlisted":false,"editUrl":"https://github.com/aica-technology/api/tree/main/docs/docs/examples/core-components/colliders.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Colliders"},"sidebar":"examplesSidebar","previous":{"title":"Signal interoperability","permalink":"/docs/examples/core-components/signal-interoperability"},"next":{"title":"Point Attractors","permalink":"/docs/examples/core-components/point-attractor"}}');var o=t(4848),i=t(8453);const a=t.p+"assets/images/box-collider-747192de5b118bec37823ba8c533ca75.png",s=t.p+"assets/images/box-collider-example-5bc01b3413d34795dbc0850f38578f9a.gif",l=t.p+"assets/images/plane-collider-example-d2eb1168fdc0e789520b7526a1a3423c.gif",c=t.p+"assets/images/collider-interfaces-fea1c0d3d2093e465f6fedca86dd6833.png",d={sidebar_position:2,title:"Colliders"},p="Colliders",h={},m=[{value:"Interfaces",id:"interfaces",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Box Collider example",id:"box-collider-example",level:2},{value:"Plane Collider example",id:"plane-collider-example",level:2}];function _(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"colliders",children:"Colliders"})}),"\n",(0,o.jsxs)(n.p,{children:["The core components in AICA Studio contain several so-called ",(0,o.jsx)(n.em,{children:"Collider"})," components that detect whether a specific target\npose is inside or outside a virtual geometric object defined around a center pose. This functionality is crucial for\nmany robotic applications because it provides the ability to:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Avoid collisions"})," by ensuring that robot parts or tools do not enter restricted or hazardous areas;"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Enable safe interaction"})," by detecting when a gripper or end-effector is within a workspace or in contact with an\nobject;"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Trigger context-aware actions"})," such as stopping or slowing down movement, initiating grasping, or sending alerts\nwhen a target enters or exits a region."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Each components' name refers to the geometric object that is used to check for collision:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Box Collider"}),"\n",(0,o.jsx)(n.li,{children:"Cylinder Collider"}),"\n",(0,o.jsx)(n.li,{children:"Sphere Collider"}),"\n",(0,o.jsx)(n.li,{children:"Plane Collider"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,o.jsx)(n.p,{children:'All colliders have the same input signals and predicates, as seen in the image below. The target pose input refers to\nthe Cartesian pose that is checked against the collider region. The center pose input defines the center of the region\n(the barycenter of the geometric object). The predicate "is in collision" is true whenever the target is within the\ncollider region (or, in the case of the Plane Collider, when the target is below the plane), and conversely the\npredicate "is not in collision" is true in the opposite case.'}),"\n",(0,o.jsx)("div",{class:"text--center",children:(0,o.jsx)("img",{src:c,alt:"Collider interfaces"})}),"\n",(0,o.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsx)(n.p,{children:"Additionally, each collider variant may have different parameters that are required to define specific properties. For\nthe following colliders, the parameters define the size and shape of the geometric object."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Box Collider: the side lengths of the box in the x, y, and z direction"}),"\n",(0,o.jsx)(n.li,{children:"Cylinder Collider: the radius of the cylinder in the x-y plane and the height in the z direction"}),"\n",(0,o.jsx)(n.li,{children:"Sphere Collider: the radius of the sphere"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:'For the Plane Collider, the parameter "Flip normal" determines which side of the plane is considered "in collision"; by\ndefault, this is when the z position of the target pose is negative in the coordinate system of the center pose.'}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"Until collider visualizations are natively integrated in AICA Studio, these examples use RViz to visualize and move the\ncollision targets in space. RViz can be started directly from AICA Launcher."})}),"\n",(0,o.jsx)(n.h2,{id:"box-collider-example",children:"Box Collider example"}),"\n",(0,o.jsxs)(n.p,{children:["This example uses two Interactive Marker components for the target and center pose of the collider. The ",(0,o.jsx)(n.code,{children:"Box Collider"}),"\nis parametrized to define a box of dimensions 10 by 20 by 5 centimeters around the center pose. Note that the\n",(0,o.jsx)(n.code,{children:"Publish geometric object"})," flag is also toggled on to generate a visualization in RViz."]}),"\n",(0,o.jsx)("div",{class:"text--center",children:(0,o.jsx)("img",{src:a,alt:"Box Collider"})}),"\n",(0,o.jsx)(n.p,{children:"Start the application from AICA Studio, then go to RViz. Add the interactive marker frame and the geometric object\nmarker as shown below. Observe how moving the interactive marker triggers the predicates of the collider component to\nupdate when the target pose enters and exits the box."}),"\n",(0,o.jsx)("div",{class:"text--center",children:(0,o.jsx)("img",{src:s,alt:"Box Collider example"})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Application YAML"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"schema: 2-0-4\ndependencies:\n  core: v4.4.1\non_start:\n  load:\n    - component: box_collider\n    - component: interactive_marker\n    - component: interactive_marker_copy\ncomponents:\n  box_collider:\n    component: aica_core_components::utility::BoxCollider\n    display_name: Box Collider\n    events:\n      transitions:\n        on_load:\n          lifecycle:\n            component: box_collider\n            transition: configure\n        on_configure:\n          lifecycle:\n            component: box_collider\n            transition: activate\n    parameters:\n      publish_marker: true\n      y_size: 0.2\n      z_size: 0.05\n    inputs:\n      target: /interactive_marker/pose\n      center: /interactive_marker_copy/pose\n  interactive_marker:\n    component: aica_core_components::ros::InteractiveMarker\n    display_name: Target Interactive Marker\n    parameters:\n      frame: target\n      initial_pose:\n        - !!float 0.0\n        - !!float 1.0\n        - !!float 0.0\n        - !!float 1.0\n        - !!float 0.0\n        - !!float 0.0\n        - !!float 0.0\n    outputs:\n      pose: /interactive_marker/pose\n  interactive_marker_copy:\n    component: aica_core_components::ros::InteractiveMarker\n    display_name: Center Interactive Marker\n    parameters:\n      frame: center\n      initial_pose:\n        - !!float 0.0\n        - !!float 0.0\n        - !!float 0.0\n        - !!float 1.0\n        - !!float 0.0\n        - !!float 0.0\n        - !!float 0.0\n      handle_scale: 0.01\n    outputs:\n      pose: /interactive_marker_copy/pose\ngraph:\n  positions:\n    components:\n      box_collider:\n        x: 660\n        y: 60\n      interactive_marker:\n        x: 160\n        y: 180\n      interactive_marker_copy:\n        x: 160\n        y: 440\n  edges:\n    on_start_on_start_box_collider_box_collider:\n      path:\n        - x: 360\n          y: 40\n        - x: 360\n          y: 120\n    on_start_on_start_interactive_marker_interactive_marker:\n      path:\n        - x: 140\n          y: 40\n        - x: 140\n          y: 240\n    on_start_on_start_interactive_marker_copy_interactive_marker_copy:\n      path:\n        - x: 140\n          y: 40\n        - x: 140\n          y: 500\n    interactive_marker_copy_pose_box_collider_center:\n      path:\n        - x: 600\n          y: 660\n        - x: 600\n          y: 440\n"})})]}),"\n",(0,o.jsx)(n.h2,{id:"plane-collider-example",children:"Plane Collider example"}),"\n",(0,o.jsxs)(n.p,{children:["Switching from the Box Colldier to the Cyclinder or Sphere Collider components is straightforward. However, it is worth\nlooking at the Plane Collder separately because it is not immediately obvious on which side of the plane the target ",(0,o.jsx)(n.em,{children:"is"}),"\n",(0,o.jsx)(n.em,{children:"in collision"})," with the plane and on which side it ",(0,o.jsx)(n.em,{children:"is not in collision"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["As per the component description, a target pose is considered ",(0,o.jsx)(n.em,{children:"in collision"})," if it has a negative z coordinate with\nrespect to the center pose. That means, if a table is defined by a Plane Collider and the z axis of the center pose,\nwhich corresponds to the normal to the table, points up, the target pose is in collision as soon as it reached (or\npenetrated) the table."]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:'This behavior can be inverted with the "Flip normal" parameter. The direction of the z axis will be flipped internally.'})}),"\n",(0,o.jsxs)(n.p,{children:["The example below shows an application that is stopped entirely if the robot end-effector collides with the plane. This\ndemonstrates how soft safety mechanisms can be implemented in AICA Studio. As soon as the target pose, which is the\nend-effector in this case, has a negative z coordinate relative to the center pose, the ",(0,o.jsx)(n.em,{children:"in collision"})," predicate fires\nand the application is stopped immediately."]}),"\n",(0,o.jsx)("div",{class:"text--center",children:(0,o.jsx)("img",{src:l,alt:"Plane Collider example"})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Application YAML"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"  schema: 2-0-4\n  dependencies:\n    core: v4.4.1\n  on_start:\n    load:\n      - component: interactive_marker\n      - component: interactive_marker_copy\n      - component: plane_collider\n      - hardware: hardware\n  components:\n    interactive_marker:\n      component: aica_core_components::ros::InteractiveMarker\n      display_name: Target Interactive Marker\n      parameters:\n        frame: target\n        initial_frame: tool0\n      outputs:\n        pose: /interactive_marker/pose\n    interactive_marker_copy:\n      component: aica_core_components::ros::InteractiveMarker\n      display_name: Center Interactive Marker\n      parameters:\n        frame: center\n        initial_pose:\n          - 0.1\n          - !!float 0.0\n          - 0.3\n          - !!float 1.0\n          - !!float 0.0\n          - !!float 0.0\n          - !!float 0.0\n        handle_scale: 0.01\n      outputs:\n        pose: /interactive_marker_copy/pose\n    plane_collider:\n      component: aica_core_components::utility::PlaneCollider\n      display_name: Plane Collider\n      events:\n        predicates:\n          is_in_bounds:\n            application: stop\n        transitions:\n          on_load:\n            lifecycle:\n              component: plane_collider\n              transition: configure\n          on_configure:\n            lifecycle:\n              component: plane_collider\n              transition: activate\n      parameters:\n        publish_marker: true\n      inputs:\n        target: /hardware/robot_state_broadcaster/cartesian_state\n        center: /interactive_marker_copy/pose\n  hardware:\n    hardware:\n      display_name: Hardware Interface\n      urdf: Generic six-axis robot arm\n      rate: 100\n      events:\n        transitions:\n          on_load:\n            load:\n              - controller: robot_state_broadcaster\n                hardware: hardware\n              - controller: ik_position_controller\n                hardware: hardware\n      controllers:\n        robot_state_broadcaster:\n          plugin: aica_core_controllers/RobotStateBroadcaster\n          outputs:\n            cartesian_state: /hardware/robot_state_broadcaster/cartesian_state\n          events:\n            transitions:\n              on_load:\n                switch_controllers:\n                  hardware: hardware\n                  activate: robot_state_broadcaster\n        ik_position_controller:\n          plugin: aica_core_controllers/position/IKPositionController\n          inputs:\n            command: /interactive_marker/pose\n          events:\n            transitions:\n              on_load:\n                switch_controllers:\n                  hardware: hardware\n                  activate: ik_position_controller\n  graph:\n    positions:\n      components:\n        interactive_marker:\n          x: 160\n          y: 180\n        interactive_marker_copy:\n          x: 160\n          y: 440\n        plane_collider:\n          x: 680\n          y: 500\n      hardware:\n        hardware:\n          x: 1220\n          y: -20\n    edges:\n      on_start_on_start_interactive_marker_interactive_marker:\n        path:\n          - x: 140\n            y: 40\n          - x: 140\n            y: 240\n      on_start_on_start_interactive_marker_copy_interactive_marker_copy:\n        path:\n          - x: 140\n            y: 40\n          - x: 140\n            y: 500\n      on_start_on_start_plane_collider_plane_collider:\n        path:\n          - x: 600\n            y: 40\n          - x: 600\n            y: 560\n      interactive_marker_copy_pose_plane_collider_center:\n        path:\n          - x: 580\n            y: 660\n          - x: 580\n            y: 880\n      plane_collider_is_in_bounds_on_stop_on_stop:\n        path:\n          - x: 1100\n            y: 720\n          - x: 1100\n            y: 1000\n          - x: -20\n            y: 1000\n          - x: -20\n            y: 140\n      hardware_hardware_robot_state_broadcaster_cartesian_state_plane_collider_target:\n        path:\n          - x: 620\n            y: 520\n          - x: 620\n            y: 840\n      interactive_marker_pose_hardware_hardware_ik_position_controller_command:\n        path:\n          - x: 1140\n            y: 400\n          - x: 1140\n            y: 780\n"})})]})]})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(_,{...e})}):_(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(6540);const o={},i=r.createContext(o);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);