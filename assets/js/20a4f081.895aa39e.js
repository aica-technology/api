"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3525],{4314:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"concepts/ros-concepts/control","title":"Controlling robots","description":"ROS nodes are easy to conceptualize as pure functional components that process input topics and generate output","source":"@site/docs/concepts/03-ros-concepts/04-control.md","sourceDirName":"concepts/03-ros-concepts","slug":"/concepts/ros-concepts/control","permalink":"/docs/concepts/ros-concepts/control","draft":false,"unlisted":false,"editUrl":"https://github.com/aica-technology/api/tree/main/docs/docs/concepts/03-ros-concepts/04-control.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Controlling robots"},"sidebar":"conceptsSidebar","previous":{"title":"Dynamic composition","permalink":"/docs/concepts/ros-concepts/composition"},"next":{"title":"AICA applications","permalink":"/docs/concepts/aica-applications"}}');var r=o(4848),a=o(8453);const s={sidebar_position:4,title:"Controlling robots"},i="Controlling robots with ros2_control",c={},l=[{value:"Controller Manager",id:"controller-manager",level:2},{value:"State interfaces",id:"state-interfaces",level:3},{value:"Command interfaces",id:"command-interfaces",level:3},{value:"Hardware interfaces",id:"hardware-interfaces",level:2},{value:"Controllers",id:"controllers",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"controlling-robots-with-ros2_control",children:"Controlling robots with ros2_control"})}),"\n",(0,r.jsx)(n.p,{children:"ROS nodes are easy to conceptualize as pure functional components that process input topics and generate output\ntopics. However, the end goal in robotics is often not just to perform some computation, but to control real physical\nhardware such as a robot arm."}),"\n",(0,r.jsx)(n.p,{children:"Interfacing with hardware peripherals imposes additional challenges, including:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"networking and communication beyond the ROS Middleware (RMW) publisher / subscriber mechanism"}),"\n",(0,r.jsx)(n.li,{children:"hardware-specific control interfaces and requirements"}),"\n",(0,r.jsx)(n.li,{children:"safety and reliability around controller and hardware limits"}),"\n",(0,r.jsx)(n.li,{children:"potential real-time requirements for deterministic control performance"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ros2_control"})," project defines an open standard for writing controllers and hardware interfaces with the aim of\nsimplifying the integration of new and existing robot hardware within a ROS-based applications through hardware\nabstraction. It specifies the following key concepts."]}),"\n",(0,r.jsx)(n.h2,{id:"controller-manager",children:"Controller Manager"}),"\n",(0,r.jsxs)(n.p,{children:["The idea behind hardware abstraction is to hide the additional complexity of hardware-specific software behind a\nstandardized API. The Controller Manager is a process that handles hardware interfaces and controllers and passes\nmessages between them in a standard format. In brief, the Controller Manager allows controllers in the ROS 2 graph to\nread the ",(0,r.jsx)(n.strong,{children:"state"})," of a robot and to write a ",(0,r.jsx)(n.strong,{children:"command"})," to the robot in a real-time loop."]}),"\n",(0,r.jsx)(n.h3,{id:"state-interfaces",children:"State interfaces"}),"\n",(0,r.jsx)(n.p,{children:"State interfaces provide the current state of the hardware. This is most commonly defined as the robot joint positions,\nand may also include joint velocities, joint torques, other available sensor data, and general purpose digital inputs\nand outputs (GPIO)."}),"\n",(0,r.jsx)(n.h3,{id:"command-interfaces",children:"Command interfaces"}),"\n",(0,r.jsx)(n.p,{children:"Command interfaces represent the desired control action that a hardware should execute. The nature of a command\ninterface depends on the actuators, but commonly includes joint positions, velocities or torques. For real-time control,\nvelocity and torque are the preferred command modes. For other actuators such as robot grippers, the command interface\nmight instead specify a gripper finger distance or force through a GPIO."}),"\n",(0,r.jsx)(n.h2,{id:"hardware-interfaces",children:"Hardware interfaces"}),"\n",(0,r.jsx)(n.p,{children:"Communication protocols and message standards vary between robot brands. Hardware interfaces, also known as hardware\ncomponents or hardware plugins, are software packages that implement robot-specific communication drivers. They are\nresponsible for reading data from the robot and translating them into the standard state interface format for the\nController Manager. They are also responsible for translating command interfaces from the Controller Manager into real\nrobot control actions."}),"\n",(0,r.jsx)(n.h2,{id:"controllers",children:"Controllers"}),"\n",(0,r.jsx)(n.p,{children:"As might be expected, controllers are responsible for calculating and sending desired control actions to the Controller\nManager via the standardized command interfaces. They also have access to state interfaces from the Controller Manager\nto use as feedback in closed-loop control."}),"\n",(0,r.jsx)(n.p,{children:"Controllers are otherwise similar to ROS 2 lifecycle components; they have parameters, can publish or subscribe to\nmessages on the ROS 2 network to interact with other processes in the application, and can be dynamically loaded,\nactivated, deactivated or unloaded."}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Read more about ",(0,r.jsx)(n.code,{children:"ros2_control"}),"\nin ",(0,r.jsx)(n.a,{href:"https://control.ros.org/master/index.html",children:"the official ros2_control documentation"}),"."]})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>i});var t=o(6540);const r={},a=t.createContext(r);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);