"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[70],{7443:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>f,contentTitle:()=>b,default:()=>v,frontMatter:()=>p,metadata:()=>o,toc:()=>g});const o=JSON.parse('{"id":"examples/guides/abb-hardware-interface","title":"ABB manipulators","description":"ABB offers a wide range of industrial articulated manipulators, from compact 6-axis robots for small-part handling and","source":"@site/docs/examples/guides/abb-hardware-interface.md","sourceDirName":"examples/guides","slug":"/examples/guides/abb-hardware-interface","permalink":"/docs/examples/guides/abb-hardware-interface","draft":false,"unlisted":false,"editUrl":"https://github.com/aica-technology/api/tree/main/docs/docs/examples/guides/abb-hardware-interface.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"ABB manipulators"},"sidebar":"examplesSidebar","previous":{"title":"URSim guide","permalink":"/docs/examples/guides/ur-sim-guide"},"next":{"title":"Core Components","permalink":"/docs/category/core-components"}}');var i=t(4848),r=t(8453);t.p;const a=t.p+"assets/images/abb-new-udpuc-device-0404e1a7915769746e026819d794d218.png",s=t.p+"assets/images/abb-controller-configuration-d7b8297e9f967d42c8e8fae771817398.png",l=t.p+"assets/images/abb-additional-options-622deb62e20bbe5c824b1f486eb5c669.png",d=t.p+"assets/images/abb-new-project-826f6f982adba4683111dc12c6ba1968.png",c=t.p+"assets/images/abb-install-addins-4b3f2dbf2ad7cb63900ee78860e1eae5.png",h=t.p+"assets/images/abb-connect-controller-1125729258b952d25303aa6434c2165f.png",u=t.p+"assets/images/abb-firewall-manager-3b29186082d2babbdf74a255b201145b.png",m=t.p+"assets/images/abb-hi-parameters-02c63afd4ac187316492e2de91ce04b0.png",p={sidebar_position:10,title:"ABB manipulators"},b="ABB manipulators",f={},g=[{value:"General",id:"general",level:2},{value:"Externally Guided Motion",id:"externally-guided-motion",level:3},{value:"Robot Web Services",id:"robot-web-services",level:3},{value:"RAPID",id:"rapid",level:3},{value:"Connecting to a robot",id:"connecting-to-a-robot",level:2},{value:"RobotStudio simulation",id:"robotstudio-simulation",level:3},{value:"Real robot controller",id:"real-robot-controller",level:3},{value:"Network and device configuration",id:"network-and-device-configuration",level:2},{value:"RAPID module",id:"rapid-module",level:2},{value:"Hardware interface",id:"hardware-interface",level:2}];function x(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"abb-manipulators",children:"ABB manipulators"})}),"\n",(0,i.jsx)(n.p,{children:"ABB offers a wide range of industrial articulated manipulators, from compact 6-axis robots for small-part handling and\npayloads of a few kilograms to heavy-duty models capable of lifting up to 800 kg. This guide provides instructions for\nusing ABB robots within the AICA System, focusing on connecting and configuring both simulated environments using\nRobotStudio and real hardware setups."}),"\n",(0,i.jsxs)(n.p,{children:["To use the ABB collection, add the latest version of ",(0,i.jsx)(n.code,{children:"collections/abb"})," to your configuration in AICA Launcher, currently\nsupporting the following robot models out of the box:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"IRB 1010"}),"\n",(0,i.jsx)(n.li,{children:"GoFa CRB 15000, 12 Kg"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"general",children:"General"}),"\n",(0,i.jsxs)(n.p,{children:["This guide and the provided drivers are designed for ABB robots connected to OmniCore controllers, whether in simulation\nor with real hardware. Ensure your setup uses ",(0,i.jsx)(n.strong,{children:"RobotWare for OmniCore"})," for full compatibility with the instructions\nand features described below."]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"This collection supports RobotWare versions 7.X and above. For older versions, contact the AICA support team."})}),"\n",(0,i.jsx)(n.h3,{id:"externally-guided-motion",children:"Externally Guided Motion"}),"\n",(0,i.jsxs)(n.p,{children:["ABB permits remote control of its manipulator range using the Externally Guided Motion (EGM) feature. EGM\nprovides external devices with the ability to send commands and control ABB robotic arms, using Google's Protocol\nBuffers (Protobuf) serialization library to transport information through UDP sockets. For more information, check out\nthe\n",(0,i.jsx)(n.a,{href:"https://library.e.abb.com/public/344f15f0f43341eb944fe35279d9fa2e/3HAC073319+AM+Externally+Guided+Motion+RW6-en.pdf?x-sign=WlxgV7Vao27KV3d3hlsfaoykgctYqoA0F98ch89S%2FPEaGwQg47ou%2FioylQtzvLaV",children:"official product documentation"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"EGM is an optional add-in and has to be purchased separately."})}),"\n",(0,i.jsx)(n.h3,{id:"robot-web-services",children:"Robot Web Services"}),"\n",(0,i.jsxs)(n.p,{children:["The second ABB feature that AICA System utilizes to connect to the robot is Robot Web Services (RWS). RWS is a platform\nthat enables developers to create applications that interact with the robot controller, using RESTful APIs that leverage\nthe HTTPS protocol. The hardware interface uses RWS for auxiliary functionality, such as starting/stopping the program\nand the motors, and setting IOs. Setting up RWS on the simulator and on the actual robot requires slightly different steps,\nwhich will be explained in the following sections. More information can be found on the\n",(0,i.jsx)(n.a,{href:"https://developercenter.robotstudio.com/api/RWS",children:"product reference page"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"rapid",children:"RAPID"}),"\n",(0,i.jsxs)(n.p,{children:["RAPID is the programming language of ABB robots. Users can utilize RAPID to set up and execute their workflows and\nprocesses. This is enabled by user-defined libraries called ",(0,i.jsx)(n.em,{children:"Modules"}),", that contain variables and functions or\nprocesses (",(0,i.jsx)(n.em,{children:"PROCs"}),"). Modules can then be loaded in controller ",(0,i.jsx)(n.em,{children:"Tasks"}),", and called as required."]}),"\n",(0,i.jsx)(n.h2,{id:"connecting-to-a-robot",children:"Connecting to a robot"}),"\n",(0,i.jsx)(n.p,{children:"The hardware interface provided by the ABB collection can be used to control either a simulated or a real robot. The\nfollowing sections provide the necessary steps to do both."}),"\n",(0,i.jsx)(n.h3,{id:"robotstudio-simulation",children:"RobotStudio simulation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://new.abb.com/products/robotics/software-and-digital/robotstudio",children:"RobotStudio"})," is the official ABB offline\nprogramming and simulation tool for robotics applications. It allows to run virtual controllers that mimic the behavior\nof the real robot, ensuring seamless transition between simulation and hardware. It can also be used to configure\nseveral aspects of the real controller."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"The RobotStudio software suite is available only for Windows, so you may need to set it up on a secondary device or a\nvirtual machine ."})}),"\n",(0,i.jsx)(n.p,{children:"Setting up a virtual workstation and controller can be achieved by following the next steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["In RobotStudio, navigate to the ",(0,i.jsx)(n.strong,{children:"Add-Ins"})," tab and go to ",(0,i.jsx)(n.strong,{children:"Gallery"}),". There is a list of all available robot models\nand RobotWare versions, the internal controller software. To ensure consistency between simulation and reality, make\nsure to install the versions matching the real robot controller, if one is available.","\n",(0,i.jsx)("div",{class:"text--center",children:(0,i.jsx)("img",{src:c,alt:"Install necessary addins in RobotStudio."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Go back to to ",(0,i.jsx)(n.strong,{children:"File > New > Project"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Select to create a new controller and define the robot model and variant, as well as the RobotWare version."}),"\n",(0,i.jsxs)(n.li,{children:["Make sure to activate the ",(0,i.jsx)(n.strong,{children:"Customize Options"})," button. This is required to add EGM in a next step.","\n",(0,i.jsx)("div",{class:"text--center",children:(0,i.jsx)("img",{src:d,alt:"Create a new RobotStudio project."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Select ",(0,i.jsx)(n.strong,{children:"Create"})," to create the new project."]}),"\n",(0,i.jsxs)(n.li,{children:["In the window that pops up, in the ",(0,i.jsx)(n.strong,{children:"Options"})," tab, look for ",(0,i.jsx)(n.strong,{children:"EGM"})," and ",(0,i.jsx)(n.strong,{children:"RobotStudio Connect"})," and add them in the\ncontroller. Then select ",(0,i.jsx)(n.strong,{children:"Apply and Reset"})," to finalize.","\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"3119-1 RobotStudio Connect"})," add-in is required to connect a controller to RobotStudio over a public network. For more\ninformation, see the RobotStudio instruction manual."]})}),"\n",(0,i.jsx)("div",{class:"text--center",children:(0,i.jsx)("img",{src:l,alt:"Additional options in the RobotStudio project."})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Another way of ensuring applications are set up correctly is to use the provided mock interfaces. The mock interface\ndoes not include a physics engine, or dynamics calculations, and merely sets the commands as state."})}),"\n",(0,i.jsx)(n.h3,{id:"real-robot-controller",children:"Real robot controller"}),"\n",(0,i.jsxs)(n.p,{children:["RobotStudio can be used to configure the address of the external control device. Navigate to the Controller tab and\nselect ",(0,i.jsx)(n.strong,{children:"Add Controller > Connect to Controller"}),". This will allow to detect and connect to the running controller in\nOmniCore, provided of course that the devices are on the same network."]}),"\n",(0,i.jsx)("div",{class:"text--center",children:(0,i.jsx)("img",{src:h,alt:"Connect to the robot controller."})}),"\n",(0,i.jsx)(n.h2,{id:"network-and-device-configuration",children:"Network and device configuration"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Modifications in the real robot controller require write access. To get it, click on ",(0,i.jsx)(n.strong,{children:"Request Write Access"})," and\nconfirm on the pendant's screen. To save these modifications, the controller has to be restarted. While this takes\nseconds in simulation, the restart procedure in the real robot might take a few minutes, so make all necessary changes,\nand then restart."]})}),"\n",(0,i.jsx)(n.p,{children:"After connecting to the robot, the controller should be configured to accept commands from an external device."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Navigate to the Controller tab > Configuration > Communication > UDP Unicast Device, and add a new UDPUC device (or\nmodify the existing one), configured as shown below. This is the device that will be running the AICA application,\nthe external control device, so the address should be set accordingly.","\n",(0,i.jsx)("div",{class:"text--center",children:(0,i.jsx)("img",{src:s,alt:"Controller configuration settings."})}),"\n",(0,i.jsx)("div",{class:"text--center",children:(0,i.jsx)("img",{src:a,alt:"Add a new UDPUS device."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["The next step is enabling RWS connection. For the RobotStudio simulation, this requires either using a proxy or\nwhitelisting the IP address of the device trying to access RWS, which is the device running AICA Core.\nThe first approach is preferable and described analytically in a\n",(0,i.jsx)(n.a,{href:"https://forums.robotstudio.com/discussion/12082/using-robotwebservices-to-access-a-remote-virtual-controller",children:"RobotStudio forum post"}),"\n(read until the end and the last comment for a critical fix).","\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["OmniCore controllers and RobotWare 7.x versions by default listen on HTTPS and port 80 for RobotStudio and 443 for\nthe real robot. If necessary, the port numbers can be modified by following the instructions in this\n",(0,i.jsx)(n.a,{href:"https://forums.robotstudio.com/discussion/12177/how-to-change-the-listening-port-of-the-virtual-controller-robotware-6-x-and-7-x",children:"forum post"}),"."]})}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"(Only for connection with the RobotStudio simulation) To communicate with the RWS running in the Windows device,\nthe firewall in the respective network (usually Public) needs to be deactivated."}),"\n",(0,i.jsxs)(n.li,{children:["In the firewall settings of RobotStudio, make sure that UDPUC and RobotWebServices are enabled in the network that is\nbeing used (see picture below). Finally, for the changes to take effect, restart the controller.","\n",(0,i.jsx)("div",{class:"text--center",children:(0,i.jsx)("img",{src:u,alt:"Firewall manager options."})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"rapid-module",children:"RAPID module"}),"\n",(0,i.jsx)(n.p,{children:"The ABB hardware interface needs a suitable RAPID module that uses EGM to allow external control to be running on the\nrobot. An example of such a module is shown below. It's important to make sure that the UCDevice name used in the RAPID\nmodule corresponds to the UDPUC device configured during step 1 above. The module can be placed in the controller's home\ndirectory and uploaded to the current task."}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Example RAPID module"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'MODULE AICAMain\n  !***********************************************************\n  ! Program data\n  !***********************************************************\n  ! Home position.\n  LOCAL VAR jointtarget current;\n\n  ! Identifier for the EGM correction.\n  LOCAL VAR egmident egm_id;\n\n  ! Limits for convergance.\n  LOCAL VAR egm_minmax egm_condition := [-0.1, 0.1];\n\n  !***********************************************************\n  !\n  ! Procedure main\n  !\n  !   This RAPID code exemplifies how to run EGM with velocity control\n  !\n  !   Note: Update the UCDevice "AICA_PC" with correct\n  !         values for the remote address and port\n  !         (i.e. to the EGM server).\n  !\n  !         Update via RobotStudio:\n  !         Controller tab -> Configuration ->\n  !         Communication -> UDP Unicast Device\n  !\n  !***********************************************************\n  PROC main()\n      current := CJointT();\n      MoveAbsJ current, v200, fine, tool0;\n\n      ! Register an EGM id.\n      EGMGetId egm_id;\n\n      ! Setup the EGM communication.\n      EGMSetupUC ROB_1, egm_id, "default", "AICA_PC", \\Joint;\n\n      ! Prepare for an EGM communication session.\n      EGMActJoint egm_id\n                  \\J1:=egm_condition\n                  \\J2:=egm_condition\n                  \\J3:=egm_condition\n                  \\J4:=egm_condition\n                  \\J5:=egm_condition\n                  \\J6:=egm_condition\n                  \\MaxSpeedDeviation:=120.0;\n\n      WHILE TRUE DO\n          ! Start the EGM communication session.\n          EGMRunJoint egm_id, EGM_STOP_HOLD, \\J1 \\J2 \\J3 \\J4 \\J5 \\J6 \\CondTime:=5 \\RampOutTime:=5 \\PosCorrGain:=0;\n          EGMStop egm_id, EGM_STOP_HOLD \\RampOutTime:=5;\n      ENDWHILE\n      ! Release the EGM id.\n      EGMReset egm_id;\n\n\n  ERROR\n      IF ERRNO = ERR_UDPUC_COMM THEN\n          TPWrite "Communication timed out";\n          TRYNEXT;\n      ENDIF\n  ENDPROC\nENDMODULE\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"hardware-interface",children:"Hardware interface"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"For optimal performance, set the hardware interface rate to 250 Hertz. This matches ABB's recommended stable limit for\nUDP data exchange."})}),"\n",(0,i.jsx)(n.p,{children:"Returning to AICA Studio and the hardware interface, it is now possible to define the parameters and connect to the\nrobot. The majority of the hardware interface parameters enable connection to EGM and RWS:"}),"\n",(0,i.jsx)("div",{class:"text--center",children:(0,i.jsx)("img",{src:m,alt:"ABB Hardware interface parameters"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"RWS IP & port: the address and port of the RWS server, e.g. the address of the real robot or the RobotStudio device"}),"\n",(0,i.jsxs)(n.li,{children:["EGM port: the port of the EGM server, e.g. the ",(0,i.jsx)(n.em,{children:"Remote Port Number"})," of the UDPUC device defined in RobotStudio above"]}),"\n",(0,i.jsx)(n.li,{children:"Connection timeout: the amount of time the hardware interface tries to connect to the RWS and EGM servers before\nreporting an error"}),"\n",(0,i.jsx)(n.li,{children:"Settling time constant: the time within which the robot will reach a certain percentage of the target position (only\nused for position commands). Lower values make the motion faster and the robot more responsive."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Before starting an application with an ABB hardware interface in AICA Studio, the motors and RAPID program on the robot\nmust be started manually through the teach pendant or RobotStudio. After that, running the application will connect to\nthe robot and get information about the mechanical setup of the robot being used."})]})}function v(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var o=t(6540);const i={},r=o.createContext(i);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);