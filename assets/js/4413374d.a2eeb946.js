"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[485],{5537:(e,s,a)=>{a.d(s,{A:()=>y});var n=a(6540),t=a(8215),i=a(5627),r=a(6347),l=a(372),c=a(604),o=a(1861),h=a(8749);function d(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:s}=e;return!!s&&"object"==typeof s&&"value"in s}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:s,children:a}=e;return(0,n.useMemo)((()=>{const e=s??function(e){return d(e).map((e=>{let{props:{value:s,label:a,attributes:n,default:t}}=e;return{value:s,label:a,attributes:n,default:t}}))}(a);return function(e){const s=(0,o.XI)(e,((e,s)=>e.value===s.value));if(s.length>0)throw new Error(`Docusaurus error: Duplicate values "${s.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[s,a])}function p(e){let{value:s,tabValues:a}=e;return a.some((e=>e.value===s))}function j(e){let{queryString:s=!1,groupId:a}=e;const t=(0,r.W6)(),i=function(e){let{queryString:s=!1,groupId:a}=e;if("string"==typeof s)return s;if(!1===s)return null;if(!0===s&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:s,groupId:a});return[(0,c.aZ)(i),(0,n.useCallback)((e=>{if(!i)return;const s=new URLSearchParams(t.location.search);s.set(i,e),t.replace({...t.location,search:s.toString()})}),[i,t])]}function x(e){const{defaultValue:s,queryString:a=!1,groupId:t}=e,i=m(e),[r,c]=(0,n.useState)((()=>function(e){let{defaultValue:s,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(s){if(!p({value:s,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${s}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return s}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:s,tabValues:i}))),[o,d]=j({queryString:a,groupId:t}),[x,g]=function(e){let{groupId:s}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(s),[t,i]=(0,h.Dv)(a);return[t,(0,n.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:t}),u=(()=>{const e=o??x;return p({value:e,tabValues:i})?e:null})();(0,l.A)((()=>{u&&c(u)}),[u]);return{selectedValue:r,selectValue:(0,n.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),d(e),g(e)}),[d,g,i]),tabValues:i}}var g=a(9136);const u={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=a(4848);function N(e){let{className:s,block:a,selectedValue:n,selectValue:r,tabValues:l}=e;const c=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.a_)(),h=e=>{const s=e.currentTarget,a=c.indexOf(s),t=l[a].value;t!==n&&(o(s),r(t))},d=e=>{let s=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;s=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;s=c[a]??c[c.length-1];break}}s?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":a},s),children:l.map((e=>{let{value:s,label:a,attributes:i}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:n===s?0:-1,"aria-selected":n===s,ref:e=>{c.push(e)},onKeyDown:d,onClick:h,...i,className:(0,t.A)("tabs__item",u.tabItem,i?.className,{"tabs__item--active":n===s}),children:a??s},s)}))})}function f(e){let{lazy:s,children:a,selectedValue:i}=e;const r=(Array.isArray(a)?a:[a]).filter(Boolean);if(s){const e=r.find((e=>e.props.value===i));return e?(0,n.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:r.map(((e,s)=>(0,n.cloneElement)(e,{key:s,hidden:e.props.value!==i})))})}function b(e){const s=x(e);return(0,v.jsxs)("div",{className:(0,t.A)("tabs-container",u.tabList),children:[(0,v.jsx)(N,{...s,...e}),(0,v.jsx)(f,{...s,...e})]})}function y(e){const s=(0,g.A)();return(0,v.jsx)(b,{...e,children:d(e.children)},String(s))}},5722:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>h,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"reference/state-representation","title":"State Representation","description":"This library provides a set of classes to represent states, which are specific data points (state variables)","source":"@site/docs/reference/state-representation.md","sourceDirName":"reference","slug":"/reference/state-representation","permalink":"/docs/reference/state-representation","draft":false,"unlisted":true,"editUrl":"https://github.com/aica-technology/api/tree/main/docs/docs/reference/state-representation.md","tags":[],"version":"current","frontMatter":{"unlisted":true},"sidebar":"programmingReferenceSidebar"}');var t=a(4848),i=a(8453),r=a(5537),l=a(9329);const c={unlisted:!0},o="State Representation",h={},d=[{value:"State",id:"state",level:2},{value:"Name",id:"name",level:3},{value:"State Type",id:"state-type",level:3},{value:"Timestamp",id:"timestamp",level:3},{value:"Emptiness",id:"emptiness",level:3},{value:"Cartesian state",id:"cartesian-state",level:2},{value:"Reference frames",id:"reference-frames",level:3},{value:"Construction",id:"construction",level:3},{value:"Cartesian getters and setters",id:"cartesian-getters-and-setters",level:3},{value:"Cartesian addition and subtraction",id:"cartesian-addition-and-subtraction",level:3},{value:"Cartesian transforms: changing the reference frame",id:"cartesian-transforms-changing-the-reference-frame",level:3},{value:"The transform operator",id:"the-transform-operator",level:4},{value:"Inversion",id:"inversion",level:4},{value:"Cartesian distances and norms",id:"cartesian-distances-and-norms",level:3},{value:"Derived Cartesian classes",id:"derived-cartesian-classes",level:2},{value:"Cartesian pose",id:"cartesian-pose",level:3},{value:"Cartesian twist",id:"cartesian-twist",level:3},{value:"Representations of twist",id:"representations-of-twist",level:4},{value:"Cartesian acceleration",id:"cartesian-acceleration",level:3},{value:"Cartesian wrench",id:"cartesian-wrench",level:3},{value:"Considerations of wrench",id:"considerations-of-wrench",level:4},{value:"Joint state",id:"joint-state",level:2},{value:"Joint names",id:"joint-names",level:3},{value:"Construction",id:"construction-1",level:3},{value:"Joint getters and setters",id:"joint-getters-and-setters",level:3},{value:"Joint state addition, subtraction and scaling",id:"joint-state-addition-subtraction-and-scaling",level:3},{value:"Derived joint state classes",id:"derived-joint-state-classes",level:2},{value:"Joint positions",id:"joint-positions",level:3},{value:"Joint velocities",id:"joint-velocities",level:3},{value:"Joint accelerations",id:"joint-accelerations",level:3},{value:"Joint torques",id:"joint-torques",level:3},{value:"Jacobian",id:"jacobian",level:2},{value:"Reference frame and joint names",id:"reference-frame-and-joint-names",level:3},{value:"Construction from robot model",id:"construction-from-robot-model",level:4},{value:"Jacobian matrix operations",id:"jacobian-matrix-operations",level:3},{value:"JointVelocities to CartesianTwist",id:"jointvelocities-to-cartesiantwist",level:3},{value:"CartesianTwist to JointVelocities",id:"cartesiantwist-to-jointvelocities",level:3},{value:"CartesianWrench to JointTorques",id:"cartesianwrench-to-jointtorques",level:3},{value:"Changing the Jacobian reference frame",id:"changing-the-jacobian-reference-frame",level:3}];function m(e){const s={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",mstyle:"mstyle",msub:"msub",msubsup:"msubsup",msup:"msup",mtable:"mtable",mtd:"mtd",mtr:"mtr",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"state-representation",children:"State Representation"})}),"\n",(0,t.jsxs)(s.p,{children:["This library provides a set of classes to represent ",(0,t.jsx)(s.strong,{children:"states"}),", which are specific data points (state variables)\nassociated with a name."]}),"\n",(0,t.jsxs)(s.p,{children:["In robotics, the most useful types of state refer to spatial properties. The joint angles of a robot arm, the 3D\nposition and velocity of a flying drone, or the measurement of an accelerometer or force-torque sensor are all examples\nof instantaneous state variables. The ",(0,t.jsx)(s.a,{href:"#cartesian-state",children:(0,t.jsx)(s.code,{children:"CartesianState"})})," and ",(0,t.jsx)(s.a,{href:"#joint-state",children:(0,t.jsx)(s.code,{children:"JointState"})})," classes\ncan represent such values in an internally consistent way while providing useful functions for conversions,\ntransformations and other manipulations."]}),"\n",(0,t.jsxs)(s.p,{children:["State classes are designed to be extensible to support more abstract state variables or properties. Another type of\nstate is a ",(0,t.jsx)(s.strong,{children:"parameter"}),", which this library defines as a container class for generic variables with a name and value."]}),"\n",(0,t.jsx)(s.p,{children:"The following sections describe the properties of the main state classes in the library."}),"\n",(0,t.jsx)(s.h2,{id:"state",children:"State"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"State"})," base class defines the following attributes common to all derived states:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"name: the name associated with the state"}),"\n",(0,t.jsx)(s.li,{children:"type: the specific StateType of the object"}),"\n",(0,t.jsx)(s.li,{children:"timestamp: an internal timestamp which refers to the last modification"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"name",children:"Name"}),"\n",(0,t.jsxs)(s.p,{children:["The name is used to label a specific state instance, and can be used to disambiguate multiple states or check their\ncompatibility. The name can be accessed or modified with ",(0,t.jsx)(s.code,{children:"get_name()"})," and ",(0,t.jsx)(s.code,{children:"set_name()"}),", respectively."]}),"\n",(0,t.jsx)(s.h3,{id:"state-type",children:"State Type"}),"\n",(0,t.jsxs)(s.p,{children:["A state can hold different data depending on its type. The available state types are defined by the\n",(0,t.jsx)(s.code,{children:"state_representation::StateType"})," enumeration. The type field is accessible using the ",(0,t.jsx)(s.code,{children:"get_type()"})," method and allows\nintrospection when working with state pointers. It is a read-only property, determined by the constructor\nimplementation."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void check_state_type(const std::shared_ptr<state_representation::State>& state) {\n  if (state->get_type() == ...) {\n    // \n  }\n}\n"})})})}),"\n",(0,t.jsx)(s.h3,{id:"timestamp",children:"Timestamp"}),"\n",(0,t.jsx)(s.p,{children:"The timestamp of a state records when it was last modified. Any non-const operations or mutations,\nincluding copy constructions, will reset the timestamp."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"get_age()"})," returns the time since last modification in seconds, while ",(0,t.jsx)(s.code,{children:"is_deprecated(time_delay)"})," can be used to\ncheck the age of a state against a maximum time delay."]}),"\n",(0,t.jsx)(s.h3,{id:"emptiness",children:"Emptiness"}),"\n",(0,t.jsxs)(s.p,{children:['In addition, all states have a concept of "emptiness". The ',(0,t.jsx)(s.code,{children:"State"})," base class does not refer to any specific state\nvariable, and therefore holds no data. Derived classes that implement state variables do hold data. If a state is empty,\nit indicates that the data is uninitialized or otherwise invalid. The ",(0,t.jsx)(s.code,{children:"is_empty()"})," method can be used to check\nemptiness, or otherwise the state object can be evaluated directly."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"state_representation::State state;\n\nif (state) {\n  // the state is not empty\n} else {\n  // the state is empty\n}\n"})})})}),"\n",(0,t.jsxs)(s.p,{children:['A state can be marked as "empty" by calling ',(0,t.jsx)(s.code,{children:"reset()"}),". The state remains empty until any data is set."]}),"\n",(0,t.jsx)(s.h2,{id:"cartesian-state",children:"Cartesian state"}),"\n",(0,t.jsxs)(s.p,{children:["A ",(0,t.jsx)(s.code,{children:"CartesianState"})," represents a spatial frame in 3D space. It inherits all the properties of the ",(0,t.jsx)(s.code,{children:"State"})," base class and\nadditionally defines the following spatial and dynamic properties:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"position"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"orientation"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"linear_velocity"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"angular_velocity"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"linear_acceleration"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"angular_acceleration"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"force"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"torque"})}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Each state variable is represented as a 3D vector (",(0,t.jsx)(s.code,{children:"Eigen::Vector3d"}),"), except for the orientation, which is represented\nby a unit quaternion (",(0,t.jsx)(s.code,{children:"Eigen::Quaterniond"}),"). The values are assumed to be in standard SI units (meters, radians,\nseconds, and Newtons)."]}),"\n",(0,t.jsx)(s.p,{children:"The state variables can also be considered in pairs:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"pose"})," (",(0,t.jsx)(s.code,{children:"position"})," and ",(0,t.jsx)(s.code,{children:"orientation"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"twist"})," (",(0,t.jsx)(s.code,{children:"linear_velocity"})," and ",(0,t.jsx)(s.code,{children:"angular_velocity"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"accelerations"})," (",(0,t.jsx)(s.code,{children:"linear_acceleration"})," and ",(0,t.jsx)(s.code,{children:"angular_acceleration"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"wrench"})," (",(0,t.jsx)(s.code,{children:"force"})," and ",(0,t.jsx)(s.code,{children:"torque"}),")"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"The linear terms always come first, followed by the angular terms."}),"\n",(0,t.jsxs)(s.p,{children:["Each ",(0,t.jsx)(s.em,{children:"paired"})," state variable is represented as a 6D vector (",(0,t.jsx)(s.code,{children:"Eigen::VectorXd(6)"}),"), except for the pose, which is\nrepresented as a 7D vector (3 for ",(0,t.jsx)(s.code,{children:"position"})," and 4 for ",(0,t.jsx)(s.code,{children:"orientation"}),")."]}),"\n",(0,t.jsx)(s.h3,{id:"reference-frames",children:"Reference frames"}),"\n",(0,t.jsxs)(s.p,{children:["The spatial properties are expressed relative to a named reference frame. For a ",(0,t.jsx)(s.code,{children:"CartesianState"}),' with name "A" and\nreference frame "B", each state variable represents the instantaneous spatial property measured at or around frame A\nfrom the perspective of frame B.']}),"\n",(0,t.jsxs)(s.p,{children:["The reference frame can be accessed or modified with ",(0,t.jsx)(s.code,{children:"get_reference_frame()"})," and ",(0,t.jsx)(s.code,{children:"set_reference_frame()"}),", respectively."]}),"\n",(0,t.jsxs)(s.p,{children:["In some contexts, ",(0,t.jsx)(s.code,{children:"twist"})," or ",(0,t.jsx)(s.code,{children:"wrench"}),' vectors may be interpreted differently. For example, there is a concept of\n"body twist" and "spatial twist". See the sections on ',(0,t.jsx)(s.a,{href:"#cartesian-twist",children:(0,t.jsx)(s.code,{children:"CartesianTwist"})})," and\n",(0,t.jsx)(s.a,{href:"#cartesian-wrench",children:(0,t.jsx)(s.code,{children:"CartesianWrench"})})," for more details."]}),"\n",(0,t.jsx)(s.h3,{id:"construction",children:"Construction"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"CartesianState"}),' constructors take a name and an optional reference frame; by default, the reference frame is "world".']}),"\n",(0,t.jsxs)(s.p,{children:["Constructing a state without any data results in an empty state. To set initial data, the static constructors\n",(0,t.jsx)(s.code,{children:"Identity()"})," or ",(0,t.jsx)(s.code,{children:"Random()"})," can be used. The former sets all vectors to zero and sets the orientation to the null\nquaternion. The latter sets all state variables to a unit random state within a uniform distribution."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'state_representation::CartesianState s1("A"); // frame A expressed in world (default)\nstate_representation::CartesianState s2("B", "A"); // frame B expressed in A\n\nauto s3 = state_representation::CartesianState::Identity("I"); // identity frame I expressed in world\nauto s4 = state_representation::CartesianState::Random("R", "B"); // random frame R expressed in B\n'})})})}),"\n",(0,t.jsx)(s.h3,{id:"cartesian-getters-and-setters",children:"Cartesian getters and setters"}),"\n",(0,t.jsx)(s.p,{children:"Each state variable has a corresponding getter and setter to access or modify the data after construction."}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'auto state = state_representation::CartesianState::Random("A");\n\n// get the position as a 3D vector\nEigen::Vector3d xyz = state.get_position();\n\n// set the position with a 3D vector\nxyz = Eigen::Vector3d(1, 0, 0); // 1 meter in X\nstate.set_position(xyz);\n\n// or, set X, Y, Z values directly\nstate.set_position(0, 0.001, 0); // 1 millimeter in Y\n'})})})}),"\n",(0,t.jsx)(s.p,{children:"The orientation operates with a quaternion instead of a 3D vector."}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"// get the orientation as a unit quaternion\nEigen::Quaterniond q = state.get_orientation();\n\n// set the orientation with a quaternion object\nq = Eigen::Quaterniond(0, 1, 0, 0); // 180\xba rotation around X\nstate.set_orientation(q);\n\n// or, set W, X, Y, Z values directly\nstate.set_orientation(0, 0, 0, 1); // 180\xba rotation around Z\n"})})})}),"\n",(0,t.jsx)(s.p,{children:"When setting the orientation, the values are automatically normalized to ensure a unit quaternion."}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"s2.set_orientation(1, 1, 0, 0); // 90\xba rotation around X\ns2.get_orientation(); // Eigen::Quaterniond(0.70710678, 0.70710678, 0., 0.)\n"})})})}),"\n",(0,t.jsx)(s.p,{children:"Every other 3D state variable has equivalent getters and setters to the position:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"get_linear_velocity()"}),", ",(0,t.jsx)(s.code,{children:"set_linear_velocity(xyz)"})," or ",(0,t.jsx)(s.code,{children:"set_linear_velocity(x, y, z)"})," in meters per second"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"get_angular_velocity()"}),", ",(0,t.jsx)(s.code,{children:"set_angular_velocity(xyz)"})," or ",(0,t.jsx)(s.code,{children:"set_angular_velocity(x, y, z)"})," in radians per second"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"get_linear_acceleration()"}),", ",(0,t.jsx)(s.code,{children:"set_linear_acceleration(xyz)"})," or ",(0,t.jsx)(s.code,{children:"set_linear_acceleration(x, y, z)"})," in meters per second\nsquared"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"get_angular_acceleration()"}),", ",(0,t.jsx)(s.code,{children:"set_angular_acceleration(xyz)"})," or ",(0,t.jsx)(s.code,{children:"set_angular_acceleration(x, y, z)"})," in radians per\nsecond squared"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"get_force()"}),", ",(0,t.jsx)(s.code,{children:"set_force(xyz)"})," or ",(0,t.jsx)(s.code,{children:"set_force(x, y, z)"})," in Newtons"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"get_torque()"}),", ",(0,t.jsx)(s.code,{children:"set_torque(xyz)"})," or ",(0,t.jsx)(s.code,{children:"set_torque(x, y, z)"})," in Newton-meters"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["The paired state variables (",(0,t.jsx)(s.code,{children:"pose"}),", ",(0,t.jsx)(s.code,{children:"twist"}),", ",(0,t.jsx)(s.code,{children:"acceleration"}),", ",(0,t.jsx)(s.code,{children:"wrench"}),") also have their own getters and setters to\nmodify the underlying terms in one operation."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"Eigen::VectorXd pose = state.get_pose(); // 7D vector of position and orientation\npose = {x, y, z, qw, qx, qy, qz};\ns2.set_pose(pose); // update the position and orientation\n\nEigen::VectorXd twist = state.get_twist(); // 6D vector of linear and angular velocity\nstate.set_twist(Eigen::VectorXd::Random(6)); // update the linear and angular velocity\n\nEigen::VectorXd acceleration = state.get_acceleration(); // 6D vector of linear and angular acceleration\nstate.set_acceleration(Eigen::VectorXd::Random(6)); // update the linear and angular acceleration\n\nEigen::VectorXd wrench = state.get_wrench(); // 6D vector of force and torque\nstate.set_wrench(Eigen::VectorXd::Random(6)); // update the force and torque\n"})})})}),"\n",(0,t.jsx)(s.h3,{id:"cartesian-addition-and-subtraction",children:"Cartesian addition and subtraction"}),"\n",(0,t.jsx)(s.p,{children:"In robotics and control theory, a state variable can represent a command or desired value, rather than a real\nmeasurement. For this reason, it's often desirable to combine and manipulate state variables in different ways."}),"\n",(0,t.jsxs)(s.p,{children:["For example, a simple controller might be driving the linear velocity of a robot to approach a moving object. Then,\nthe desired velocity of the robot would be the velocity of the object ",(0,t.jsx)(s.em,{children:"plus"})," some additional velocity in the direction\nof the object."]}),"\n",(0,t.jsxs)(s.p,{children:["Two ",(0,t.jsx)(s.code,{children:"CartesianState"})," objects can be combined with addition or subtraction, ",(0,t.jsx)(s.strong,{children:"provided they are expressed in the same\nreference frame"}),"."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'auto s1 = state_representation::CartesianState::Random("a"); // reference frame is world by default\nauto s2 = state_representation::CartesianState::Random("b");\n\nauto sum = s1 + s2;\nauto diff = s1 - s2;\n\n// if the states are not in the same reference frame, it will raise an exception\ns1 + state_representation::CartesianState::Random("c", "other");\n'})})})}),"\n",(0,t.jsxs)(s.p,{children:["For all state variables except orientation, the result of the operation is applied to each state variable element-wise.\nFor example, if ",(0,t.jsx)(s.code,{children:"s1"})," has position ",(0,t.jsx)(s.code,{children:"(x1, y1, z1)"})," and ",(0,t.jsx)(s.code,{children:"s2"})," has position ",(0,t.jsx)(s.code,{children:"(x1, y1, z1)"}),", then ",(0,t.jsx)(s.code,{children:"s1 + s2"})," has position\n",(0,t.jsx)(s.code,{children:"(x1 + x2, y1 + y2, z1 + z2)"}),". The same applies for subtraction and is true for all state variables represented as 3D\nvectors."]}),"\n",(0,t.jsxs)(s.p,{children:["In the case of orientation, the addition and subtraction operations are ",(0,t.jsx)(s.strong,{children:"not commutative"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["Addition of orientation uses the quaternion product; the addition ",(0,t.jsx)(s.code,{children:"s1 + s2"})," corresponds to the rotation of ",(0,t.jsx)(s.code,{children:"s1"})," followed\nby the rotation in ",(0,t.jsx)(s.code,{children:"s2"}),", while ",(0,t.jsx)(s.code,{children:"s2 + s1"})," corresponds to the rotation of ",(0,t.jsx)(s.code,{children:"s2"})," followed by the rotation of ",(0,t.jsx)(s.code,{children:"s1"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["Subtraction of orientation uses the quaternion inverse (quaternion conjugate); ",(0,t.jsx)(s.code,{children:"-s1"})," yields the inverse orientation of\n",(0,t.jsx)(s.code,{children:"s1"}),", and ",(0,t.jsx)(s.code,{children:"s1 - s2"})," is equivalent to the rotation of ",(0,t.jsx)(s.code,{children:"s1"})," followed by the inverse rotation of ",(0,t.jsx)(s.code,{children:"s2"}),"."]}),"\n",(0,t.jsx)(s.h3,{id:"cartesian-transforms-changing-the-reference-frame",children:"Cartesian transforms: changing the reference frame"}),"\n",(0,t.jsxs)(s.p,{children:["A ",(0,t.jsx)(s.code,{children:"CartesianState"})," represents the spatial properties of a frame as viewed from a certain reference frame.\nObserving the same frame from a different reference frame can change the relative values of each state variable."]}),"\n",(0,t.jsx)(s.p,{children:"If two observers are looking at the same frame from different locations, they will observe the frame with a different\nrelative position and orientation. Similarly, if one observer is moving while the other is stationary, they will observe\nthe frame with different relative velocities."}),"\n",(0,t.jsxs)(s.p,{children:["If some frame A is observed from reference frame B, and frame B is itself observed from another reference frame C,\nthen it is possible to express frame A relative to reference frame C. Expressing the spatial properties of a frame in\ndifferent reference frames is known as a ",(0,t.jsx)(s.strong,{children:"transformation"})," and is one of the most useful operations of the\n",(0,t.jsx)(s.code,{children:"CartesianState"})," class."]}),"\n",(0,t.jsx)(s.p,{children:"A transformation affects all state variables as a combination of the two connected frames.\nIn the simplest case, the relative distance between each frame is combined to yield a new position value.\nIn another example, if frame A is rotated by 45 degrees relative to B and B is rotated 45 degrees relative to C, then A\nis rotated 90 degrees relative to C."}),"\n",(0,t.jsx)(s.p,{children:"When states have non-zero position, orientation, velocity, or acceleration offsets, the transformation involves a more\ncomplicated combination of the different state variables."}),"\n",(0,t.jsx)(s.p,{children:"If there is an orientation difference between the frames, the vectors representing each state variable are rotated into\nthe new reference frame accordingly."}),"\n",(0,t.jsx)(s.p,{children:"Transformations including twist will include radially-induced linear velocity that scales with the distance between\nframes and their relative angular velocities. Finally, the transformation of accelerating frames will include\nCoriolis and centrifugal effects."}),"\n",(0,t.jsx)(s.p,{children:'Transformation applies only to the relative spatial properties of the frame (pose, twist, and acceleration).\nThe wrench is not transformed in the same way because forces applied to spatial frames do not "add together" like\nrelative positions or velocities. A measured force or torque will therefore not change in magnitude when expressed\nin different reference frames, and is only rotated to the new reference frame coordinate system.'}),"\n",(0,t.jsxs)(s.p,{children:["The concept of a wrench transform does exist in the context of static forces across rigid bodies. This is described\nfurther in the ",(0,t.jsx)(s.a,{href:"#cartesian-wrench",children:(0,t.jsx)(s.code,{children:"CartesianWrench"})})," section."]}),"\n",(0,t.jsx)(s.h4,{id:"the-transform-operator",children:"The transform operator"}),"\n",(0,t.jsxs)(s.p,{children:["For clarity in the examples below, the name given to each ",(0,t.jsx)(s.code,{children:"CartesianState"}),' variable will have the reference name\nas the prefix and the frame name as a suffix. This will highlight the "chain rule" that occurs during frame\ntransformations.']}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'// frame "a" expressed in reference frame "world"\nstate_representation::CartesianState wSa("a", "world");\n// frame "b" expressed in reference frame "a"\nstate_representation::CartesianState aSb("b", "a");\n'})})})}),"\n",(0,t.jsx)(s.p,{children:"The multiplication operator is used to transform states by chaining together connected frames and reference frames."}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'// the state of frame "b" expressed in reference frame "world" is found by\n// combining frame "a" in "world" with frame "b" in "a"\nauto wSb = wSa * aSb;\n\n// the chain rule applies whenever the "inner frames" are compatible\nauto wSd = wSb * bSc * cSd;\n'})})})}),"\n",(0,t.jsx)(s.p,{children:"As can be seen in the above examples, the frame of the left state should match the reference frame of the right state,\ncausing the inner frames to cancel out. This is analogous to the product of two matrices, wherein the inner sizes must\nbe compatible. If the frame names do not match, the states are not compatible and an exception will be raised."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-console",children:"// error: inner frames are not compatible!\nwSa * bSc\n"})}),"\n",(0,t.jsx)(s.p,{children:"In some cases, there may be enough information to perform a transformation, but the inner frames are not compatible."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-console",children:'// inner frames are not compatible, but it should still be possible to find "b" relative to "world"\nwSa * bSa\n'})}),"\n",(0,t.jsx)(s.p,{children:"To resolve this case, inversion can be used."}),"\n",(0,t.jsx)(s.h4,{id:"inversion",children:"Inversion"}),"\n",(0,t.jsxs)(s.p,{children:["It is possible to invert a state using the ",(0,t.jsx)(s.code,{children:"inverse()"}),' operator, which essentially reverses the frame and reference\nframe. Instead of observing a frame "A" from a reference frame "B", the inverse expresses "B" as observed from "A".']}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-console",children:"aSb = bSa.inverse()\n"})}),"\n",(0,t.jsx)(s.p,{children:"In the context of the transformation chain rule, this can be used to resolve otherwise incompatible operations.\nThis is analogous to transposing a matrix so that the inner sizes of a product match."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-console",children:"// wSa * bSa is not possible, but wSa * aSb would be\nwSb = wSa * bSa.inverse() = wSa * aSb\n"})}),"\n",(0,t.jsx)(s.p,{children:"An inversion sets the new orientation as the quaternion conjugate and effectively negates and rotates all other state\nvariable vectors."}),"\n",(0,t.jsxs)(s.p,{children:["As with transformation, the wrench is the special case. For a state ",(0,t.jsx)(s.code,{children:"aSb"}),", the wrench describes the force and torque\nmeasured at ",(0,t.jsx)(s.code,{children:"b"})," as seen from ",(0,t.jsx)(s.code,{children:"a"}),". For the inverted state ",(0,t.jsx)(s.code,{children:"bSa"}),", the wrench at ",(0,t.jsx)(s.code,{children:"a"})," is unknown without further\nunderlying assumptions. For this reason, the inverse operator sets the resulting wrench to zero."]}),"\n",(0,t.jsx)(s.h3,{id:"cartesian-distances-and-norms",children:"Cartesian distances and norms"}),"\n",(0,t.jsxs)(s.p,{children:["As a ",(0,t.jsx)(s.code,{children:"CartesianState"})," represents a spatial transformation, distance between states and norms computations have been\nimplemented. The distance functions is represented as the sum of the distance over all the state variables:"]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'using namespace state_representation;\nauto cs1 = state_representation::CartesianState::Random("test");\nauto cs2 = state_representation::CartesianState::Random("test");\n\ndouble d = cs1.dist(cs2);\n// alternatively one can use the friend type notation\nd = state_representation::dist(cs1, cs2)\n'})})})}),"\n",(0,t.jsx)(s.p,{children:"By default, the distance is computed over all the state variables by combining the Euclidean distance between each\nstate vector and adding the angular distance in radians in the case of orientation."}),"\n",(0,t.jsx)(s.p,{children:"Because the distance is summed over independent spatial terms, the final value has no physical units but can still\nbe useful when comparing the relative similarity of two states."}),"\n",(0,t.jsxs)(s.p,{children:["To find a difference in a specific state variable, the ",(0,t.jsx)(s.code,{children:"CartesianStateVariable"})," enumeration can be used:"]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"// only the distance in meters\ndouble distance = cs1.dist(cs2, CartesianStateVariable::POSITION);\n// only the angular distance in radians\ndouble angle = cs1.dist(cs2, CartesianStateVariable::ORIENTATION);\n\n// only the angular velocity difference in radians per second\ndouble angular_rate = cs1.dist(cs2, CartesianStateVariable::ANGULAR_VELOCITY);\n"})})})}),"\n",(0,t.jsxs)(s.p,{children:["The Euclidean norm of individual state variables returns the vector magnitude (or angular displacement in the case of\norientation). To get the magnitude of all state variables as a vector of norms, use the ",(0,t.jsx)(s.code,{children:"norms()"})," operator."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'auto state = state_representation::CartesianState::Random("test");\n\n// the default usage returns the magnitude of all state variables in an 8D vector\nstd::vector<double> norms = state.norms();\n\n// to return 2D vectors of norms, filter by the combined state variables\nstd::vector<double> distance_and_angle = state.norms(CartesianStateVariable::POSE);\nstd::vector<double> speeds = state.norms(CartesianStateVariable::TWIST);\n\n// other single state variables give a 1D vector\nstd::vector<double> distance = state.norms(CartesianStateVariable::POSITION);\n'})})})}),"\n",(0,t.jsxs)(s.p,{children:["Finally, state variables can be scaled to a unit vector state using the ",(0,t.jsx)(s.code,{children:"normalize()"})," or ",(0,t.jsx)(s.code,{children:"normalized()"})," operations."]}),"\n",(0,t.jsx)(s.p,{children:"The former normalizes a state in place, while the latter returns a normalized copy without modifying the original state."}),"\n",(0,t.jsx)(s.p,{children:"This does not affect the orientation, which is always expressed as a unit quaternion."}),"\n",(0,t.jsx)(s.p,{children:"As with the other operations, the normalization can be selectively applied to specific state variables."}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"// normalize a state all the state variables\nstate.normalize();\n\n// normalize the position of a state to a unit direction vector\nstate.normalize(CartesianStateVariable::POSITION);\n\n// copied state with only linear velocity normalized\nCartesianState normalized_state = state.normalized(CartesianStateVariable::LINEAR_VELOCITY);\n"})})})}),"\n",(0,t.jsx)(s.h2,{id:"derived-cartesian-classes",children:"Derived Cartesian classes"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"CartesianState"})," class contains all spatial and dynamic state variables of a frame. In some cases, it is convenient\nto operate only with specific state variables. The following derived classes are defined:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"CartesianPose"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"CartesianTwist"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"CartesianAcceleration"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"CartesianWrench"})}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"cartesian-pose",children:"Cartesian pose"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"CartesianPose"})," class defines only the position and orientation of a frame."]}),"\n",(0,t.jsx)(s.p,{children:"It provides the following constructors:"}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'CartesianPose::Identity("name", "reference_frame");\nCartesianPose::Random("name", "reference_frame");\n\n// the position can be supplied to the constructor as a vector or as individual terms (with null orientation)\nxyz = Eigen::Vector3d(1.0, 2.0, 3.0);\nCartesianPose("name", xyz, "reference_frame");\nCartesianPose("name", 1.0, 2.0, 3.0, "reference_frame");\n\n// the orientation can be supplied to the constructor as a vector or as individual terms (with zero displacement)\nq = Eigen::Quaterniond(0, 1, 0, 0);\nCartesianPose("name", q, "reference_frame");\n\n// the position and orientation can also be supplied together\nCartesianPose("name", xyz, q, "reference_frame");\n'})})})}),"\n",(0,t.jsxs)(s.p,{children:["Addition and subtraction is supported between ",(0,t.jsx)(s.code,{children:"CartesianPose"})," and ",(0,t.jsx)(s.code,{children:"CartesianState"}),". Recall that these operations are\nnot commutative in orientation; the order of operations matters."]}),"\n",(0,t.jsx)(s.p,{children:"The return type of each compatible operation is shown below."}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"CartesianPose r1 = pose + other_pose;\nCartesianState r2 = pose + state;\nCartesianState r3 = state + pose;\n\nCartesianPose r4 = pose - other_pose;\nCartesianState r5 = pose - state;\nCartesianState r6 = state - pose;\n\npose += other_pose; // equivalent to pose = pose + other_pose\npose += state; // equivalent to pose = pose + state\n\npose -= other_pose;\npose -= state;\n"})})})}),"\n",(0,t.jsxs)(s.p,{children:["A ",(0,t.jsx)(s.code,{children:"CartesianPose"})," can be used to transform any other Cartesian class by applying the position and orientation offset.\nRecall that the frame and reference frames must be compatible according to the chain rule as described in the\n",(0,t.jsx)(s.a,{href:"#cartesian-transforms-changing-the-reference-frame",children:"Cartesian transformation"})," section."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"CartesianPose transformed_pose = pose * other_pose;\nCartesianTwist transformed_twist = pose * twist;\nCartesianAcceleration transformed_acceleration = pose * acceleration;\nCartesianWrench transformed_wrench = pose * wrench;\nCartesianState transformed_state = pose * state\n    \npose *= other_pose; // equivalent to pose = pose * other_pose\npose *= state; // equivalent to pose = pose * state\n"})})})}),"\n",(0,t.jsxs)(s.p,{children:["The time derivative of a ",(0,t.jsx)(s.code,{children:"CartesianPose"})," is a ",(0,t.jsx)(s.code,{children:"CartesianTwist"}),". Because ",(0,t.jsx)(s.code,{children:"CartesianPose"})," represents a displacement in\nposition and orientation, it can be converted into linear and angular velocity through division by a time period."]}),"\n",(0,t.jsxs)(s.p,{children:["Operations with time use ",(0,t.jsx)(s.code,{children:"std::chrono::duration"})," types, such as ",(0,t.jsx)(s.code,{children:"std::chrono::milliseconds"}),", ",(0,t.jsx)(s.code,{children:"std::chrono::seconds"}),", or\ndefinitions with ",(0,t.jsx)(s.code,{children:"std::literals::chrono_literals"}),"."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'// take a pose with a displacement of 1 meter in the X axis and 90\xba (\u03c0/2) rotation around the Z axis\nstate_representation::CartesianPose pose("a", Eigen::Vector3d(1, 0, 0), Eigen::Quaterniond(0.707, 0, 0, 0.707));\n\n// define a 2 second time duration\nstd::chrono::seconds dt(2);\n\n// dividing pose by time yields a twist with a linear velocity of 0.5 meters per second in the X axis\n// and an angular velocity of \u03c0/4 radians per second (45\xba/s) around the Z axis\nstate_representation::CartesianTwist twist = pose / dt;\ntwist.get_linear_velocity(); // (0.5, 0, 0)\ntwist.get_angular_velocity(); // (0, 0, 0.785)\n'})})})}),"\n",(0,t.jsx)(s.h3,{id:"cartesian-twist",children:"Cartesian twist"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"CartesianTwist"})," class defines only the linear and angular velocity of a frame."]}),"\n",(0,t.jsx)(s.p,{children:"It provides the following constructors:"}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'CartesianTwist::Zero("name", "reference_frame");\nCartesianTwist::Random("name", "reference_frame");\n\n// the linear or angular velocities can be supplied to the constructor as vectors\nlinear_velocity = Eigen::Vector3d(1.0, 2.0, 3.0);\nCartesianTwist("name", linear_velocity, "reference_frame");\n\nangular_velocity = Eigen::Vector3d(4.0, 5.0, 6.0);\nCartesianTwist("name", linear_velocity, angular_velocity, "reference_frame");\n\n// the full 6D twist vector can also be supplied\ntwist = Eigen::VectorXd(6);\ntwist << 1.0, 2.0, 3.0, 4.0, 5.0, 6.0;\nCartesianTwist("name", twist, "reference_frame");\n'})})})}),"\n",(0,t.jsxs)(s.p,{children:["Addition and subtraction is supported between ",(0,t.jsx)(s.code,{children:"CartesianTwist"})," and ",(0,t.jsx)(s.code,{children:"CartesianState"}),"."]}),"\n",(0,t.jsx)(s.p,{children:"The return type of each compatible operation is shown below."}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"CartesianTwist r1 = twist + other_twist;\nCartesianState r2 = twist + state;\nCartesianState r3 = state + twist;\n\nCartesianTwist r4 = twist - other_twist;\nCartesianState r5 = twist - state;\nCartesianState r6 = state - twist;\n\ntwist += other_twist; // equivalent to twist = twist + other_twist\ntwist += state; // equivalent to twist = twist + state\n\ntwist -= other_twist;\ntwist -= state;\n"})})})}),"\n",(0,t.jsxs)(s.p,{children:["The time derivative of a ",(0,t.jsx)(s.code,{children:"CartesianTwist"})," is a ",(0,t.jsx)(s.code,{children:"CartesianAcceleration"}),". Because ",(0,t.jsx)(s.code,{children:"CartesianTwist"})," represents linear and\nangular velocity in meters and radians per seconds, it can be converted into linear and angular acceleration in meters\nand radians per second squared through division by a time period."]}),"\n",(0,t.jsxs)(s.p,{children:["Similarly, the time integral of a ",(0,t.jsx)(s.code,{children:"CartesianTwist"})," is a ",(0,t.jsx)(s.code,{children:"CartesianPose"}),". It can be converted into a position and\norientation displacement through multiplication by a time period."]}),"\n",(0,t.jsxs)(s.p,{children:["Operations with time use ",(0,t.jsx)(s.code,{children:"std::chrono::duration"})," types, such as ",(0,t.jsx)(s.code,{children:"std::chrono::milliseconds"}),", ",(0,t.jsx)(s.code,{children:"std::chrono::seconds"}),", or\ndefinitions with ",(0,t.jsx)(s.code,{children:"std::literals::chrono_literals"}),"."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'// take a twist with a linear velocity of 1 meter per second in the X axis\n// and angular velocity of 1 radian per second in the Z axis \nstate_representation::CartesianTwist twist("a", Eigen::Vector3d(1, 0, 0), Eigen::Vector3d(0, 0, 1));\n\n// define a 0.5 second time duration\nstd::chrono::milliseconds dt(500);\n\n// dividing twist by time yields an acceleration with a linear term of 2 meters per second squared in the X axis\n// and angular term of 2 radians per second squared around the Z axis\nstate_representation::CartesianAcceleration acc = twist / dt;\nacc.get_linear_acceleration(); // (2, 0, 0) \nacc.get_angular_acceleration(); // (0, 0, 2)\n\n// multiplying twist by time yields a pose with a position of 0.5 meters in the X axis\n// and a rotation of 0.5 radians around the Z axis\nstate_representation::CartesianPose pose = twist * dt;\npose.get_position(); // (0.5, 0, 0)\npose.get_orientation(); // Eigen::Quaterniond(0.9689124, 0, 0, 0.247404)\n'})})})}),"\n",(0,t.jsx)(s.p,{children:"Note that the result of the integration is a displacement from a null (identity) pose. To offset the integration,\nsimply add an initial pose in the same reference frame as the twist."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-console",children:"// add an initial pose to offset the integration \npose = initial_pose + twist * dt;\n\n// a pose can also be updated through a continuous integration of twist\npose += twist * dt;\n"})}),"\n",(0,t.jsx)(s.h4,{id:"representations-of-twist",children:"Representations of twist"}),"\n",(0,t.jsxs)(s.p,{children:["A ",(0,t.jsx)(s.code,{children:'CartesianTwist("B", "A")'})," represents linear and angular velocity of the body frame B with respect to fixed frame A,\nas viewed from A."]}),"\n",(0,t.jsx)(s.span,{className:"katex-display",children:(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{mathvariant:"script",children:"V"}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsx)(s.mo,{children:"="}),(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mo,{fence:"true",children:"["}),(0,t.jsxs)(s.mtable,{rowspacing:"0.16em",columnalign:"center",columnspacing:"1em",children:[(0,t.jsx)(s.mtr,{children:(0,t.jsx)(s.mtd,{children:(0,t.jsx)(s.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"v"}),(0,t.jsx)(s.mi,{children:"B"})]})]})})})}),(0,t.jsx)(s.mtr,{children:(0,t.jsx)(s.mtd,{children:(0,t.jsx)(s.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"\u03c9"}),(0,t.jsx)(s.mi,{children:"B"})]})]})})})})]}),(0,t.jsx)(s.mo,{fence:"true",children:"]"})]})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"^A\\mathcal{V}_B =\n\\begin{bmatrix}\n^Av_B \\\\\n^A\\omega_B\n\\end{bmatrix}"})]})})}),(0,t.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"1.0413em",verticalAlign:"-0.15em"}}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8913em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.113em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})})})})})]}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathcal",style:{marginRight:"0.08222em"},children:"V"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0822em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(s.span,{className:"mrel",children:"="}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"2.4027em",verticalAlign:"-0.9513em"}}),(0,t.jsxs)(s.span,{className:"minner",children:[(0,t.jsx)(s.span,{className:"mopen delimcenter",style:{top:"0em"},children:(0,t.jsx)(s.span,{className:"delimsizing size3",children:"["})}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsx)(s.span,{className:"mtable",children:(0,t.jsx)(s.span,{className:"col-align-c",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsxs)(s.span,{className:"vlist",style:{height:"1.4513em"},children:[(0,t.jsxs)(s.span,{style:{top:"-3.61em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8413em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})})})})})]}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"v"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]})]})]}),(0,t.jsxs)(s.span,{style:{top:"-2.4087em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8413em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})})})})})]}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"\u03c9"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]})]})]})]}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.9513em"},children:(0,t.jsx)(s.span,{})})})]})})})}),(0,t.jsx)(s.span,{className:"mclose delimcenter",style:{top:"0em"},children:(0,t.jsx)(s.span,{className:"delimsizing size3",children:"]"})})]})]})]})]})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.em,{children:"body twist"})," ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsxs)(s.msubsup,{children:[(0,t.jsx)(s.mi,{mathvariant:"script",children:"V"}),(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"A"}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsx)(s.mi,{children:"b"})]})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"^B\\mathcal{V}^b_{AB}"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"1.1244em",verticalAlign:"-0.2753em"}}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8413em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})})})})})]}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathcal",style:{marginRight:"0.08222em"},children:"V"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsxs)(s.span,{className:"vlist",style:{height:"0.8491em"},children:[(0,t.jsxs)(s.span,{style:{top:"-2.4247em",marginLeft:"-0.0822em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsxs)(s.span,{className:"mord mtight",children:[(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"}),(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})]})})]}),(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"b"})})]})]}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.2753em"},children:(0,t.jsx)(s.span,{})})})]})})]})]})})]})," is a special 6-vector that represents linear and angular velocity of the body\nframe B with respect to fixed frame A, ",(0,t.jsx)(s.em,{children:"as viewed from B"}),". The relationship between ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{mathvariant:"script",children:"V"}),(0,t.jsx)(s.mi,{mathvariant:"script",children:"B"})]})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"{^A}\\mathcal{V_B}"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.9913em",verticalAlign:"-0.15em"}}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8413em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})})})})})]})}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathcal",style:{marginRight:"0.08222em"},children:"V"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0822em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathcal mtight",style:{marginRight:"0.03041em"},children:"B"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]})]})})]})," and\n",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsx)(s.mi,{mathvariant:"script",children:"V"}),(0,t.jsxs)(s.msub,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"b"})]}),(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"A"}),(0,t.jsx)(s.mi,{children:"B"})]})]})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"{^B}\\mathcal{V}{^b}_{AB}"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.9991em",verticalAlign:"-0.15em"}}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8413em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})})})})})]})}),(0,t.jsx)(s.span,{className:"mord mathcal",style:{marginRight:"0.08222em"},children:"V"}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8491em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"b"})})]})})})})})]})}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsxs)(s.span,{className:"mord mtight",children:[(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"}),(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})]})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]})]})})]})," is given by the rotation matrix ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"R"}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsx)(s.mo,{children:"="}),(0,t.jsx)(s.mo,{stretchy:"false",children:"("}),(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"R"}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mo,{stretchy:"false",children:")"}),(0,t.jsx)(s.mi,{children:"T"})]})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"^BR_A = ({^A}R_B)^T"})]})})}),(0,t.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.9913em",verticalAlign:"-0.15em"}}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8413em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})})})})})]}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.00773em"},children:"R"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0077em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(s.span,{className:"mrel",children:"="}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"1.0913em",verticalAlign:"-0.25em"}}),(0,t.jsx)(s.span,{className:"mopen",children:"("}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8413em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})})})})})]})}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.00773em"},children:"R"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0077em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]}),(0,t.jsxs)(s.span,{className:"mclose",children:[(0,t.jsx)(s.span,{className:"mclose",children:")"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8413em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.13889em"},children:"T"})})]})})})})})]})]})]})]}),"."]}),"\n",(0,t.jsx)(s.span,{className:"katex-display",children:(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsxs)(s.msubsup,{children:[(0,t.jsx)(s.mi,{mathvariant:"script",children:"V"}),(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"A"}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsx)(s.mi,{children:"b"})]}),(0,t.jsx)(s.mo,{children:"="}),(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mo,{fence:"true",children:"["}),(0,t.jsxs)(s.mtable,{rowspacing:"0.16em",columnalign:"center",columnspacing:"1em",children:[(0,t.jsx)(s.mtr,{children:(0,t.jsx)(s.mtd,{children:(0,t.jsx)(s.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"v"}),(0,t.jsx)(s.mi,{children:"b"})]})})})}),(0,t.jsx)(s.mtr,{children:(0,t.jsx)(s.mtd,{children:(0,t.jsx)(s.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"\u03c9"}),(0,t.jsx)(s.mi,{children:"b"})]})})})})]}),(0,t.jsx)(s.mo,{fence:"true",children:"]"})]}),(0,t.jsx)(s.mo,{children:"="}),(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mo,{fence:"true",children:"["}),(0,t.jsxs)(s.mtable,{rowspacing:"0.16em",columnalign:"center",columnspacing:"1em",children:[(0,t.jsx)(s.mtr,{children:(0,t.jsx)(s.mtd,{children:(0,t.jsx)(s.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"R"}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsx)(s.mo,{children:"\u2217"}),(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"v"}),(0,t.jsx)(s.mi,{children:"B"})]})]})})})}),(0,t.jsx)(s.mtr,{children:(0,t.jsx)(s.mtd,{children:(0,t.jsx)(s.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"R"}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsx)(s.mo,{children:"\u2217"}),(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"\u03c9"}),(0,t.jsx)(s.mi,{children:"B"})]})]})})})})]}),(0,t.jsx)(s.mo,{fence:"true",children:"]"})]})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"^B\\mathcal{V}^b_{AB} =\n\\begin{bmatrix}\nv_b \\\\\n\\omega_b\n\\end{bmatrix} =\n\\begin{bmatrix}\n^BR_A * {^A}v_B \\\\\n^BR_A * {^A}\\omega_B\n\\end{bmatrix}"})]})})}),(0,t.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"1.1461em",verticalAlign:"-0.247em"}}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8913em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.113em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})})})})})]}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathcal",style:{marginRight:"0.08222em"},children:"V"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsxs)(s.span,{className:"vlist",style:{height:"0.8991em"},children:[(0,t.jsxs)(s.span,{style:{top:"-2.453em",marginLeft:"-0.0822em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsxs)(s.span,{className:"mord mtight",children:[(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"}),(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})]})})]}),(0,t.jsxs)(s.span,{style:{top:"-3.113em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"b"})})]})]}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.247em"},children:(0,t.jsx)(s.span,{})})})]})})]}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(s.span,{className:"mrel",children:"="}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"2.4em",verticalAlign:"-0.95em"}}),(0,t.jsxs)(s.span,{className:"minner",children:[(0,t.jsx)(s.span,{className:"mopen delimcenter",style:{top:"0em"},children:(0,t.jsx)(s.span,{className:"delimsizing size3",children:"["})}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsx)(s.span,{className:"mtable",children:(0,t.jsx)(s.span,{className:"col-align-c",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsxs)(s.span,{className:"vlist",style:{height:"1.45em"},children:[(0,t.jsxs)(s.span,{style:{top:"-3.61em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"v"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3361em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"b"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]})})]}),(0,t.jsxs)(s.span,{style:{top:"-2.41em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"\u03c9"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3361em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"b"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]})})]})]}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.95em"},children:(0,t.jsx)(s.span,{})})})]})})})}),(0,t.jsx)(s.span,{className:"mclose delimcenter",style:{top:"0em"},children:(0,t.jsx)(s.span,{className:"delimsizing size3",children:"]"})})]}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(s.span,{className:"mrel",children:"="}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"2.4027em",verticalAlign:"-0.9513em"}}),(0,t.jsxs)(s.span,{className:"minner",children:[(0,t.jsx)(s.span,{className:"mopen delimcenter",style:{top:"0em"},children:(0,t.jsx)(s.span,{className:"delimsizing size3",children:"["})}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsx)(s.span,{className:"mtable",children:(0,t.jsx)(s.span,{className:"col-align-c",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsxs)(s.span,{className:"vlist",style:{height:"1.4513em"},children:[(0,t.jsxs)(s.span,{style:{top:"-3.61em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8413em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})})})})})]}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.00773em"},children:"R"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0077em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(s.span,{className:"mbin",children:"\u2217"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8413em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})})})})})]})}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"v"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]})]})]}),(0,t.jsxs)(s.span,{style:{top:"-2.4087em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8413em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})})})})})]}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.00773em"},children:"R"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0077em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(s.span,{className:"mbin",children:"\u2217"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8413em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})})})})})]})}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"\u03c9"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]})]})]})]}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.9513em"},children:(0,t.jsx)(s.span,{})})})]})})})}),(0,t.jsx)(s.span,{className:"mclose delimcenter",style:{top:"0em"},children:(0,t.jsx)(s.span,{className:"delimsizing size3",children:"]"})})]})]})]})]})}),"\n",(0,t.jsxs)(s.p,{children:["For example, a spinning top (body frame) on a table (spatial reference frame) has angular velocity about its local Z\naxis. While the top is vertical (aligned with the table), the ",(0,t.jsx)(s.code,{children:"CartesianTwist"})," and the body twist are equivalent. If the\ntop begins to precess and tips over, then the ",(0,t.jsx)(s.code,{children:"CartesianTwist"})," (expressed in the table frame) will show an angular\nvelocity with components in X and Y, but the body twist will remain expressed in the local body Z axis. Importantly, the\nmagnitude of the twist is the same in both representations, because they are both measuring the twist of the top with\nrespect to the table."]}),"\n",(0,t.jsxs)(s.p,{children:["There is another type of twist called the ",(0,t.jsx)(s.em,{children:"spatial twist"}),". Just like ",(0,t.jsx)(s.code,{children:"CartesianTwist"}),", it represents angular\nvelocity of the body frame B with respect to fixed frame A, as viewed from A. However, the spatial linear velocity ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsx)(s.mrow,{children:(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"v"}),(0,t.jsx)(s.mi,{children:"s"})]})}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"v_s"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.5806em",verticalAlign:"-0.15em"}}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"v"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.1514em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"s"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]})]})})]}),"\nrepresents the velocity of an imaginary point at A as if it were attached to the body B, measured with respect to A, as\nviewed from A."]}),"\n",(0,t.jsx)(s.span,{className:"katex-display",children:(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsxs)(s.msubsup,{children:[(0,t.jsx)(s.mi,{mathvariant:"script",children:"V"}),(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"A"}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsx)(s.mi,{children:"s"})]}),(0,t.jsx)(s.mo,{children:"="}),(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mo,{fence:"true",children:"["}),(0,t.jsxs)(s.mtable,{rowspacing:"0.16em",columnalign:"center",columnspacing:"1em",children:[(0,t.jsx)(s.mtr,{children:(0,t.jsx)(s.mtd,{children:(0,t.jsx)(s.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"v"}),(0,t.jsx)(s.mi,{children:"s"})]})})})}),(0,t.jsx)(s.mtr,{children:(0,t.jsx)(s.mtd,{children:(0,t.jsx)(s.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"\u03c9"}),(0,t.jsx)(s.mi,{children:"s"})]})})})})]}),(0,t.jsx)(s.mo,{fence:"true",children:"]"})]}),(0,t.jsx)(s.mo,{children:"="}),(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mo,{fence:"true",children:"["}),(0,t.jsxs)(s.mtable,{rowspacing:"0.16em",columnalign:"center",columnspacing:"1em",children:[(0,t.jsx)(s.mtr,{children:(0,t.jsx)(s.mtd,{children:(0,t.jsx)(s.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"v"}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsx)(s.mo,{children:"+"}),(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"t"}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsx)(s.mo,{children:"\xd7"}),(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"\u03c9"}),(0,t.jsx)(s.mi,{children:"B"})]})]})})})}),(0,t.jsx)(s.mtr,{children:(0,t.jsx)(s.mtd,{children:(0,t.jsx)(s.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"\u03c9"}),(0,t.jsx)(s.mi,{children:"B"})]})]})})})})]}),(0,t.jsx)(s.mo,{fence:"true",children:"]"})]})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"^A\\mathcal{V}^s_{AB} =\n\\begin{bmatrix}\nv_s \\\\\n\\omega_s\n\\end{bmatrix} =\n\\begin{bmatrix}\n{^A}v_B + {^A}t_B \\times {^A}\\omega_B \\\\\n{^A}\\omega_B\n\\end{bmatrix}"})]})})}),(0,t.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"1.1383em",verticalAlign:"-0.247em"}}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8913em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.113em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})})})})})]}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathcal",style:{marginRight:"0.08222em"},children:"V"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsxs)(s.span,{className:"vlist",style:{height:"0.7144em"},children:[(0,t.jsxs)(s.span,{style:{top:"-2.453em",marginLeft:"-0.0822em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsxs)(s.span,{className:"mord mtight",children:[(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"}),(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})]})})]}),(0,t.jsxs)(s.span,{style:{top:"-3.113em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"s"})})]})]}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.247em"},children:(0,t.jsx)(s.span,{})})})]})})]}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(s.span,{className:"mrel",children:"="}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"2.4em",verticalAlign:"-0.95em"}}),(0,t.jsxs)(s.span,{className:"minner",children:[(0,t.jsx)(s.span,{className:"mopen delimcenter",style:{top:"0em"},children:(0,t.jsx)(s.span,{className:"delimsizing size3",children:"["})}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsx)(s.span,{className:"mtable",children:(0,t.jsx)(s.span,{className:"col-align-c",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsxs)(s.span,{className:"vlist",style:{height:"1.45em"},children:[(0,t.jsxs)(s.span,{style:{top:"-3.61em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"v"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.1514em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"s"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]})})]}),(0,t.jsxs)(s.span,{style:{top:"-2.41em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"\u03c9"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.1514em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"s"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]})})]})]}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.95em"},children:(0,t.jsx)(s.span,{})})})]})})})}),(0,t.jsx)(s.span,{className:"mclose delimcenter",style:{top:"0em"},children:(0,t.jsx)(s.span,{className:"delimsizing size3",children:"]"})})]}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(s.span,{className:"mrel",children:"="}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"2.4027em",verticalAlign:"-0.9513em"}}),(0,t.jsxs)(s.span,{className:"minner",children:[(0,t.jsx)(s.span,{className:"mopen delimcenter",style:{top:"0em"},children:(0,t.jsx)(s.span,{className:"delimsizing size3",children:"["})}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsx)(s.span,{className:"mtable",children:(0,t.jsx)(s.span,{className:"col-align-c",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsxs)(s.span,{className:"vlist",style:{height:"1.4513em"},children:[(0,t.jsxs)(s.span,{style:{top:"-3.61em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8413em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})})})})})]})}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"v"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(s.span,{className:"mbin",children:"+"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8413em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})})})})})]})}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(s.span,{className:"mbin",children:"\xd7"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8413em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})})})})})]})}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"\u03c9"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]})]})]}),(0,t.jsxs)(s.span,{style:{top:"-2.4087em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8413em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})})})})})]})}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"\u03c9"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]})]})]})]}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.9513em"},children:(0,t.jsx)(s.span,{})})})]})})})}),(0,t.jsx)(s.span,{className:"mclose delimcenter",style:{top:"0em"},children:(0,t.jsx)(s.span,{className:"delimsizing size3",children:"]"})})]})]})]})]})}),"\n",(0,t.jsxs)(s.p,{children:["The quantity ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsx)(s.mrow,{children:(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"v"}),(0,t.jsx)(s.mi,{children:"s"})]})}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"v_s"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.5806em",verticalAlign:"-0.15em"}}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"v"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.1514em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"s"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]})]})})]})," is the body linear velocity plus the radially induced velocity as the cross product of the distance\nfrom A to B ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"t"}),(0,t.jsx)(s.mi,{children:"B"})]})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"{^A}t_B"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.9913em",verticalAlign:"-0.15em"}}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8413em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})})})})})]})}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]})]})})]})," with the body angular velocity."]}),"\n",(0,t.jsxs)(s.p,{children:["The internal ",(0,t.jsx)(s.code,{children:"CartesianTwist"})," representation is arguably the most intuitive out of all three options presented here.\nStill, depending on the geometric operations involved, both the body and spatial twist vectors can be useful."]}),"\n",(0,t.jsxs)(s.p,{children:["The equations above have shown the derivations of each in terms of the original ",(0,t.jsx)(s.code,{children:"CartesianTwist"}),". For completeness,\nit is also worth mentioning the direct transformation between body and spatial representations using the Adjoint map:"]}),"\n",(0,t.jsx)(s.span,{className:"katex-display",children:(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{mathvariant:"script",children:"V"}),(0,t.jsx)(s.mi,{children:"s"})]}),(0,t.jsx)(s.mo,{children:"="}),(0,t.jsx)(s.mo,{stretchy:"false",children:"["}),(0,t.jsx)(s.mi,{children:"A"}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"d"}),(0,t.jsx)(s.mi,{children:"T"})]}),(0,t.jsx)(s.mo,{stretchy:"false",children:"]"}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{mathvariant:"script",children:"V"}),(0,t.jsx)(s.mi,{children:"b"})]})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"\\mathcal{V}_s = [Ad_{T}] \\mathcal{V}_b"})]})})}),(0,t.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.8333em",verticalAlign:"-0.15em"}}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathcal",style:{marginRight:"0.08222em"},children:"V"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.1514em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0822em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"s"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(s.span,{className:"mrel",children:"="}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(s.span,{className:"mopen",children:"["}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"A"}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",children:"d"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.13889em"},children:"T"})})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]}),(0,t.jsx)(s.span,{className:"mclose",children:"]"}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathcal",style:{marginRight:"0.08222em"},children:"V"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3361em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"-0.0822em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"b"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]})]})]})]})}),"\n",(0,t.jsxs)(s.p,{children:["where ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mo,{stretchy:"false",children:"["}),(0,t.jsx)(s.mi,{children:"A"}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"d"}),(0,t.jsx)(s.mi,{children:"T"})]}),(0,t.jsx)(s.mo,{stretchy:"false",children:"]"})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"[Ad_{T}]"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(s.span,{className:"mopen",children:"["}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"A"}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",children:"d"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.13889em"},children:"T"})})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]}),(0,t.jsx)(s.span,{className:"mclose",children:"]"})]})})]})," is the adjoint matrix, defined for a given transformation matrix ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsx)(s.mrow,{children:(0,t.jsx)(s.mi,{children:"T"})}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"T"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.6833em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.13889em"},children:"T"})]})})]})," (with rotation matrix ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsx)(s.mrow,{children:(0,t.jsx)(s.mi,{children:"R"})}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"R"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.6833em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.00773em"},children:"R"})]})})]})," and\ndisplacement vector ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsx)(s.mrow,{children:(0,t.jsx)(s.mi,{children:"t"})}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"t"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.6151em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"t"})]})})]}),") as follows:"]}),"\n",(0,t.jsx)(s.span,{className:"katex-display",children:(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mo,{stretchy:"false",children:"["}),(0,t.jsx)(s.mi,{children:"A"}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"d"}),(0,t.jsx)(s.mi,{children:"T"})]}),(0,t.jsx)(s.mo,{stretchy:"false",children:"]"}),(0,t.jsx)(s.mo,{children:"="}),(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mo,{fence:"true",children:"["}),(0,t.jsxs)(s.mtable,{rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em",children:[(0,t.jsxs)(s.mtr,{children:[(0,t.jsx)(s.mtd,{children:(0,t.jsx)(s.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,t.jsx)(s.mn,{children:"0"})})}),(0,t.jsx)(s.mtd,{children:(0,t.jsx)(s.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,t.jsx)(s.mi,{children:"R"})})})]}),(0,t.jsxs)(s.mtr,{children:[(0,t.jsx)(s.mtd,{children:(0,t.jsx)(s.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,t.jsx)(s.mi,{children:"R"})})}),(0,t.jsx)(s.mtd,{children:(0,t.jsx)(s.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mo,{stretchy:"false",children:"["}),(0,t.jsx)(s.mi,{children:"t"}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mo,{stretchy:"false",children:"]"}),(0,t.jsx)(s.mo,{lspace:"0em",rspace:"0em",children:"\xd7"})]}),(0,t.jsx)(s.mi,{children:"R"})]})})})]})]}),(0,t.jsx)(s.mo,{fence:"true",children:"]"})]})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"[Ad_{T}] =\n\\begin{bmatrix}\n0 & R \\\\\nR & [t]_{\\times}R\n\\end{bmatrix}"})]})})}),(0,t.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(s.span,{className:"mopen",children:"["}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"A"}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",children:"d"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3283em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.13889em"},children:"T"})})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,t.jsx)(s.span,{})})})]})})]}),(0,t.jsx)(s.span,{className:"mclose",children:"]"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(s.span,{className:"mrel",children:"="}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"2.4em",verticalAlign:"-0.95em"}}),(0,t.jsxs)(s.span,{className:"minner",children:[(0,t.jsx)(s.span,{className:"mopen delimcenter",style:{top:"0em"},children:(0,t.jsx)(s.span,{className:"delimsizing size3",children:"["})}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsxs)(s.span,{className:"mtable",children:[(0,t.jsx)(s.span,{className:"col-align-c",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsxs)(s.span,{className:"vlist",style:{height:"1.45em"},children:[(0,t.jsxs)(s.span,{style:{top:"-3.61em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsx)(s.span,{className:"mord",children:"0"})})]}),(0,t.jsxs)(s.span,{style:{top:"-2.41em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.00773em"},children:"R"})})]})]}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.95em"},children:(0,t.jsx)(s.span,{})})})]})}),(0,t.jsx)(s.span,{className:"arraycolsep",style:{width:"0.5em"}}),(0,t.jsx)(s.span,{className:"arraycolsep",style:{width:"0.5em"}}),(0,t.jsx)(s.span,{className:"col-align-c",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsxs)(s.span,{className:"vlist",style:{height:"1.45em"},children:[(0,t.jsxs)(s.span,{style:{top:"-3.61em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,t.jsx)(s.span,{className:"mord",children:(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.00773em"},children:"R"})})]}),(0,t.jsxs)(s.span,{style:{top:"-2.41em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mopen",children:"["}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,t.jsxs)(s.span,{className:"mclose",children:[(0,t.jsx)(s.span,{className:"mclose",children:"]"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.2583em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mtight",children:(0,t.jsx)(s.span,{className:"mord mtight",children:"\xd7"})})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.2083em"},children:(0,t.jsx)(s.span,{})})})]})})]}),(0,t.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.00773em"},children:"R"})]})]})]}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.95em"},children:(0,t.jsx)(s.span,{})})})]})})]})}),(0,t.jsx)(s.span,{className:"mclose delimcenter",style:{top:"0em"},children:(0,t.jsx)(s.span,{className:"delimsizing size3",children:"]"})})]})]})]})]})}),"\n",(0,t.jsx)(s.p,{children:"The inverse of the adjoint matrix maps from spatial to body frame, and can be found by using the inverse transformation\nmatrix."}),"\n",(0,t.jsx)(s.span,{className:"katex-display",children:(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsxs)(s.msubsup,{children:[(0,t.jsx)(s.mi,{mathvariant:"script",children:"V"}),(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"A"}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsx)(s.mi,{children:"s"})]}),(0,t.jsx)(s.mo,{children:"="}),(0,t.jsx)(s.mo,{stretchy:"false",children:"["}),(0,t.jsx)(s.mi,{children:"A"}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"d"}),(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"T"}),(0,t.jsx)(s.mi,{children:"B"})]})]})]}),(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mo,{stretchy:"false",children:"]"}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsxs)(s.msubsup,{children:[(0,t.jsx)(s.mi,{mathvariant:"script",children:"V"}),(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"A"}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsx)(s.mi,{children:"b"})]})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"^A\\mathcal{V}^s_{AB} = [Ad_{^AT_B}] ^B\\mathcal{V}^b_{AB}"})]})})}),(0,t.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"1.1383em",verticalAlign:"-0.247em"}}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8913em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.113em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})})})})})]}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathcal",style:{marginRight:"0.08222em"},children:"V"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsxs)(s.span,{className:"vlist",style:{height:"0.7144em"},children:[(0,t.jsxs)(s.span,{style:{top:"-2.453em",marginLeft:"-0.0822em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsxs)(s.span,{className:"mord mtight",children:[(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"}),(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})]})})]}),(0,t.jsxs)(s.span,{style:{top:"-3.113em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"s"})})]})]}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.247em"},children:(0,t.jsx)(s.span,{})})})]})})]}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(s.span,{className:"mrel",children:"="}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"1.1965em",verticalAlign:"-0.2974em"}}),(0,t.jsx)(s.span,{className:"mopen",children:"["}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"A"}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",children:"d"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3448em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.5029em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsxs)(s.span,{className:"mord mtight",children:[(0,t.jsxs)(s.span,{className:"mord mtight",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.7741em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.786em",marginRight:"0.0714em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.5em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size3 size1 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})})})})})]}),(0,t.jsxs)(s.span,{className:"mord mtight",children:[(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.13889em"},children:"T"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3448em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.3567em",marginLeft:"-0.1389em",marginRight:"0.0714em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.5em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size3 size1 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.1433em"},children:(0,t.jsx)(s.span,{})})})]})})]})]})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.2974em"},children:(0,t.jsx)(s.span,{})})})]})})]}),(0,t.jsxs)(s.span,{className:"mclose",children:[(0,t.jsx)(s.span,{className:"mclose",children:"]"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8913em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.113em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})})})})})]}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathcal",style:{marginRight:"0.08222em"},children:"V"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsxs)(s.span,{className:"vlist",style:{height:"0.8991em"},children:[(0,t.jsxs)(s.span,{style:{top:"-2.453em",marginLeft:"-0.0822em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsxs)(s.span,{className:"mord mtight",children:[(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"}),(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})]})})]}),(0,t.jsxs)(s.span,{style:{top:"-3.113em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"b"})})]})]}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.247em"},children:(0,t.jsx)(s.span,{})})})]})})]})]})]})]})}),"\n",(0,t.jsx)(s.span,{className:"katex-display",children:(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsxs)(s.msubsup,{children:[(0,t.jsx)(s.mi,{mathvariant:"script",children:"V"}),(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"A"}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsx)(s.mi,{children:"b"})]}),(0,t.jsx)(s.mo,{children:"="}),(0,t.jsx)(s.mo,{stretchy:"false",children:"["}),(0,t.jsx)(s.mi,{children:"A"}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"d"}),(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mrow,{}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsxs)(s.msub,{children:[(0,t.jsx)(s.mi,{children:"T"}),(0,t.jsx)(s.mi,{children:"A"})]})]})]}),(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mo,{stretchy:"false",children:"]"}),(0,t.jsx)(s.mi,{children:"A"})]}),(0,t.jsxs)(s.msubsup,{children:[(0,t.jsx)(s.mi,{mathvariant:"script",children:"V"}),(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"A"}),(0,t.jsx)(s.mi,{children:"B"})]}),(0,t.jsx)(s.mi,{children:"s"})]})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"^B\\mathcal{V}^b_{AB} = [Ad_{^BT_A}] ^A\\mathcal{V}^s_{AB}"})]})})}),(0,t.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"1.1461em",verticalAlign:"-0.247em"}}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8913em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.113em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})})})})})]}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathcal",style:{marginRight:"0.08222em"},children:"V"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsxs)(s.span,{className:"vlist",style:{height:"0.8991em"},children:[(0,t.jsxs)(s.span,{style:{top:"-2.453em",marginLeft:"-0.0822em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsxs)(s.span,{className:"mord mtight",children:[(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"}),(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})]})})]}),(0,t.jsxs)(s.span,{style:{top:"-3.113em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"b"})})]})]}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.247em"},children:(0,t.jsx)(s.span,{})})})]})})]}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(s.span,{className:"mrel",children:"="}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"1.1887em",verticalAlign:"-0.2974em"}}),(0,t.jsx)(s.span,{className:"mopen",children:"["}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"A"}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathnormal",children:"d"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3448em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.5029em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsxs)(s.span,{className:"mord mtight",children:[(0,t.jsxs)(s.span,{className:"mord mtight",children:[(0,t.jsx)(s.span,{}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.7741em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.786em",marginRight:"0.0714em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.5em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size3 size1 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})})]})})})})})]}),(0,t.jsxs)(s.span,{className:"mord mtight",children:[(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.13889em"},children:"T"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.3448em"},children:(0,t.jsxs)(s.span,{style:{top:"-2.3567em",marginLeft:"-0.1389em",marginRight:"0.0714em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.5em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size3 size1 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.1433em"},children:(0,t.jsx)(s.span,{})})})]})})]})]})})]})}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.2974em"},children:(0,t.jsx)(s.span,{})})})]})})]}),(0,t.jsxs)(s.span,{className:"mclose",children:[(0,t.jsx)(s.span,{className:"mclose",children:"]"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8913em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.113em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"})})]})})})})})]}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord mathcal",style:{marginRight:"0.08222em"},children:"V"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,t.jsxs)(s.span,{className:"vlist-r",children:[(0,t.jsxs)(s.span,{className:"vlist",style:{height:"0.7144em"},children:[(0,t.jsxs)(s.span,{style:{top:"-2.453em",marginLeft:"-0.0822em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsxs)(s.span,{className:"mord mtight",children:[(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"A"}),(0,t.jsx)(s.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05017em"},children:"B"})]})})]}),(0,t.jsxs)(s.span,{style:{top:"-3.113em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mathnormal mtight",children:"s"})})]})]}),(0,t.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.247em"},children:(0,t.jsx)(s.span,{})})})]})})]})]})]})]})}),"\n",(0,t.jsx)(s.h3,{id:"cartesian-acceleration",children:"Cartesian acceleration"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"CartesianAcceleration"})," class defines only the linear and angular acceleration of a frame."]}),"\n",(0,t.jsx)(s.p,{children:"It provides the following constructors:"}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'CartesianAcceleration::Zero("name", "reference_frame");\nCartesianAcceleration::Random("name", "reference_frame");\n\n// the linear or angular accelerations can be supplied to the constructor as vectors\nlinear_acceleration = Eigen::Vector3d(1.0, 2.0, 3.0);\nCartesianAcceleration("name", linear_acceleration, "reference_frame");\n\nangular_acceleration = Eigen::Vector3d(4.0, 5.0, 6.0);\nCartesianAcceleration("name", linear_acceleration, angular_acceleration, "reference_frame");\n\n// the full 6D acceleration vector can also be supplied\nacceleration = Eigen::VectorXd(6);\nacceleration << 1.0, 2.0, 3.0, 4.0, 5.0, 6.0;\nCartesianAcceleration("name", acceleration, "reference_frame");\n'})})})}),"\n",(0,t.jsxs)(s.p,{children:["Addition and subtraction is supported between ",(0,t.jsx)(s.code,{children:"CartesianAcceleration"})," and ",(0,t.jsx)(s.code,{children:"CartesianState"}),"."]}),"\n",(0,t.jsx)(s.p,{children:"The return type of each compatible operation is shown below."}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"CartesianAcceleration r1 = acceleration + other_acceleration;\nCartesianState r2 = acceleration + state;\nCartesianState r3 = state + acceleration;\n\nCartesianAcceleration r4 = acceleration - other_acceleration;\nCartesianState r5 = acceleration - state;\nCartesianState r6 = state - acceleration;\n\nacceleration += other_acceleration; // equivalent to acceleration = acceleration + other_acceleration\nacceleration += state; // equivalent to acceleration = acceleration + state\n\nacceleration -= other_acceleration;\nacceleration -= state;\n"})})})}),"\n",(0,t.jsxs)(s.p,{children:["The time integral of a ",(0,t.jsx)(s.code,{children:"CartesianAcceleration"})," is a ",(0,t.jsx)(s.code,{children:"CartesianTwist"}),". Because ",(0,t.jsx)(s.code,{children:"CartesianAcceleration"})," represents linear\nand angular acceleration in meters and radians per seconds squared, it can be converted into a relative linear and\nangular velocity in meters and radians per second through multiplication by a time period."]}),"\n",(0,t.jsxs)(s.p,{children:["Operations with time use ",(0,t.jsx)(s.code,{children:"std::chrono::duration"})," types, such as ",(0,t.jsx)(s.code,{children:"std::chrono::milliseconds"}),", ",(0,t.jsx)(s.code,{children:"std::chrono::seconds"}),", or\ndefinitions with ",(0,t.jsx)(s.code,{children:"std::literals::chrono_literals"}),"."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'// take an acceleration with a linear acceleration of 1 meter per second squared in the X axis\n// and angular acceleration of 1 radian per second squared in the Z axis \nstate_representation::CartesianAcceleration acc("a", Eigen::Vector3d(1, 0, 0), Eigen::Vector3d(0, 0, 1));\n\n// define a 0.1 second time duration\nstd::chrono::milliseconds dt(100);\n\n// multiplying acceleration by time yields a twist with a linear term of 0.1 meters per second in the X axis\n// and an angular term of 0.1 radians per second around the Z axis\nstate_representation::CartesianPose twist = acceleration * dt;\npose.get_position(); // (0.1, 0, 0)\npose.get_orientation(); // (0, 0, 0.1)\n'})})})}),"\n",(0,t.jsx)(s.p,{children:"Note that the result of the integration assumes zero initial velocity. To offset the integration, simply add an initial\ntwist in the same reference frame as the acceleration."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-console",children:"// add an initial twist to offset the integration \ntwist = initial_twist + acc * dt\n\n// a twist can also be updated through a continuous integration of acceleration\ntwist += acc * dt\n"})}),"\n",(0,t.jsx)(s.h3,{id:"cartesian-wrench",children:"Cartesian wrench"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"CartesianWrench"})," class defines only the force and torque as applied to a frame."]}),"\n",(0,t.jsx)(s.p,{children:"It provides the following constructors:"}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'CartesianWrench::Zero("name", "reference_frame");\nCartesianWrench::Random("name", "reference_frame");\n\n// the force or torque can be supplied to the constructor as vectors\nforce = Eigen::Vector3d(1.0, 2.0, 3.0);\nCartesianWrench("name", force, "reference_frame");\n\ntorque = Eigen::Vector3d(4.0, 5.0, 6.0);\nCartesianWrench("name", force, torque, "reference_frame");\n\n// the full 6D wrench vector can also be supplied\nwrench = Eigen::VectorXd(6);\nwrench << 1.0, 2.0, 3.0, 4.0, 5.0, 6.0;\nCartesianWrench("name", wrench, "reference_frame");\n'})})})}),"\n",(0,t.jsxs)(s.p,{children:["Addition and subtraction is supported between ",(0,t.jsx)(s.code,{children:"CartesianWrench"})," and ",(0,t.jsx)(s.code,{children:"CartesianState"}),"."]}),"\n",(0,t.jsx)(s.p,{children:"The return type of each compatible operation is shown below."}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"CartesianWrench r1 = wrench + other_wrench;\nCartesianState r2 = wrench + state;\nCartesianState r3 = state + wrench;\n\nCartesianWrench r4 = wrench - other_wrench;\nCartesianState r5 = wrench - state;\nCartesianState r6 = state - wrench;\n\nwrench += other_wrench; // equivalent to wrench = wrench + other_wrench\nwrench += state; // equivalent to wrench = wrench + state\n\nwrench -= other_wrench;\nwrench -= state;\n"})})})}),"\n",(0,t.jsx)(s.h4,{id:"considerations-of-wrench",children:"Considerations of wrench"}),"\n",(0,t.jsx)(s.p,{children:"The wrench is distinct from the other state variables as it is not a relative spatial property. It is considered as\nthe measurement of a force/torque sensor at the frame, as seen from the reference frame."}),"\n",(0,t.jsx)(s.p,{children:"Changing the observer does not change magnitude of the force or wrench measured at the frame. It only changes the\napparent direction of the wrench vector, depending on the orientation of the reference frame."}),"\n",(0,t.jsxs)(s.p,{children:["Because the ",(0,t.jsx)(s.code,{children:"CartesianWrench"})," is different from other spatial properties, it is handled uniquely in the transform\nand inverse operations."]}),"\n",(0,t.jsx)(s.p,{children:"A transformation of states involving a wrench will only preserve the wrench measured at the last frame, rotated to\nthe new reference frame. The wrench of the intermediate (inner) frame is discarded."}),"\n",(0,t.jsx)(s.p,{children:"The inverse of a state will set the wrench to zero."}),"\n",(0,t.jsx)(s.h2,{id:"joint-state",children:"Joint state"}),"\n",(0,t.jsxs)(s.p,{children:["A ",(0,t.jsx)(s.code,{children:"JointState"})," represents the instantaneous properties of a collection of joints. It inherits all the properties of the\n",(0,t.jsx)(s.code,{children:"State"})," base class and additionally defines the following spatial and dynamic properties:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"positions"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"velocities"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"accelerations"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"torques"})}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Each state variable is represented as an N-dimensional vector (",(0,t.jsx)(s.code,{children:"Eigen::VectorXd"}),"), where N is the number of joints."]}),"\n",(0,t.jsxs)(s.p,{children:["By design, a ",(0,t.jsx)(s.code,{children:"JointState"})," most appropriately describes a serial linkage of revolute or prismatic joints as found in\ntypical robot arms or manipulators. The values are assumed to be in standard SI units; radians and Newton-meters for\nrevolute joints and meters and Newtons for prismatic joints, respectively, with all time scales defined in seconds."]}),"\n",(0,t.jsx)(s.h3,{id:"joint-names",children:"Joint names"}),"\n",(0,t.jsxs)(s.p,{children:["Each joint in a ",(0,t.jsx)(s.code,{children:"JointState"})," collection has a name. This can make it easier to reference the state variable value of a\nspecific joint in the collection."]}),"\n",(0,t.jsxs)(s.p,{children:["The names can be set on construction and accessed or modified or using ",(0,t.jsx)(s.code,{children:"get_names()"})," or ",(0,t.jsx)(s.code,{children:"set_names()"}),", respectively.\nAs an example, a three-link robot might be given joint names ",(0,t.jsx)(s.code,{children:'{"shoulder", "elbow", "wrist"}'}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["By default, the names are assigned based on their index, starting from 0: ",(0,t.jsx)(s.code,{children:'{"joint0", "joint1", ..., "jointX"}'}),"."]}),"\n",(0,t.jsx)(s.h3,{id:"construction-1",children:"Construction"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"JointState"})," constructors take a name and either a vector of joint names or an integer number of joints. The name\nrefers to the whole joint state collection, and so often corresponds to the name of the robot it represents."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'// create a joint state for a robot with 3 joints\nstd::vector<string> joint_names = { "shoulder", "elbow", "wrist" };\nstate_representation::JointState js1("my_robot", joint_names);\n\nstate_representation::JointState js2("my_robot", 3); // joint names are defaulted to "joint0", "joint1", "joint2"\n'})})})}),"\n",(0,t.jsxs)(s.p,{children:["Constructing a state without any data results in an empty state. To set initial data, the static constructors ",(0,t.jsx)(s.code,{children:"Zero()"}),"\nor ",(0,t.jsx)(s.code,{children:"Random()"})," can be used. The former sets all state variables of each joint values zero. The latter sets all state\nvariables to a unit random state within a uniform distribution. As with the regular constructor, a vector of joint names\nor an integer number of joints can be supplied."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'// initialize the joint state to zero values\nstate_representation::JointState::Zero("my_robot", joint_names);\nstate_representation::JointState::Zero("my_robot", 3);\n\n// initialize the joint state to random values\nstate_representation::JointState::Random("my_robot", joint_names);\nstate_representation::JointState::Random("my_robot", 3);\n'})})})}),"\n",(0,t.jsx)(s.h3,{id:"joint-getters-and-setters",children:"Joint getters and setters"}),"\n",(0,t.jsx)(s.p,{children:"Each state variable has a corresponding getter and setter to access or modify the data after construction."}),"\n",(0,t.jsx)(s.p,{children:"The following groups of variables can be accessed or set as a vector ordered by the joint indexes / names:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"get_positions()"}),", ",(0,t.jsx)(s.code,{children:"set_positions({...})"})," in radians"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"get_velocities()"}),", ",(0,t.jsx)(s.code,{children:"set_velocities({...})"})," in radians per second"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"get_accelerations()"}),", ",(0,t.jsx)(s.code,{children:"set_accelerations({...})"})," in radians per second squared"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"get_torques()"}),", ",(0,t.jsx)(s.code,{children:"set_torques({...})"})," in Newton-meters"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["The vector setters are defined for both ",(0,t.jsx)(s.code,{children:"Eigen::VectorXd"})," and ",(0,t.jsx)(s.code,{children:"std::vector<double>"}),":"]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'state_representation::JointState js("my_robot", 3);\njs.set_positions(Eigen::Vector3d(.5, 1., 0.));\njs.set_positions(std::vector<double>{.5, 1., 0.});\n'})})})}),"\n",(0,t.jsx)(s.p,{children:"When setting a vector of state variables, the size of the input vector must match the number of joints."}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"js.set_positions(Eigen::Vector4d::Random()); // will throw an IncompatibleSizeException\n"})})})}),"\n",(0,t.jsx)(s.p,{children:"The state variable values of each individual joint can also be accessed as scalars, using either the integer joint\nindex or the string joint name as the identifier:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"get_position(id)"}),", ",(0,t.jsx)(s.code,{children:"set_position(x, id)"})," in radians"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"get_velocity(id)"}),", ",(0,t.jsx)(s.code,{children:"set_velocity(x, id)"})," in radians per second"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"get_acceleration(id)"}),", ",(0,t.jsx)(s.code,{children:"set_acceleration(x, id)"})," in radians per second squared"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"get_torque(id)"}),", ",(0,t.jsx)(s.code,{children:"set_torques(x, id)"})," in Newton-meters"]}),"\n"]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'auto js = state_representation::JointState::Random("my_robot", { "hip", "knee" });\n\njs.get_position(0); // get the position of the hip joint\njs.get_velocity("hip"); // get the velocity of the hip joint\njs.set_acceleration(0.5, 1); // set the acceleration of the knee joint to 5 rad/s^2\njs.set_torque(2.0, "knee"); // set the torque of the knee joint to 2 Nm\n'})})})}),"\n",(0,t.jsx)(s.h3,{id:"joint-state-addition-subtraction-and-scaling",children:"Joint state addition, subtraction and scaling"}),"\n",(0,t.jsxs)(s.p,{children:["Two ",(0,t.jsx)(s.code,{children:"JointState"})," objects can be combined with addition or subtraction, provided they have the same number of joints with\nthe same joint names."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'state_representation::JointState js1("myrobot", 3);\nstate_representation::JointState js2("myrobot", 3);\n\n// for those operation to be valid both js1 and js2 must have the same name and matching joint names\nstate_representation::JointState jssum = js1 + js2;\nstate_representation::JointState jsdiff = js1 - js2;\n'})})})}),"\n",(0,t.jsxs)(s.p,{children:["For all state variables, the result of the operation is applied to each state variable element-wise. For example, if\n",(0,t.jsx)(s.code,{children:"js1"})," has joint positions ",(0,t.jsx)(s.code,{children:"(x1, x2, x3)"})," and ",(0,t.jsx)(s.code,{children:"js2"})," has joint positions ",(0,t.jsx)(s.code,{children:"(y1, y2, y3)"}),", then ",(0,t.jsx)(s.code,{children:"js1"})," + ",(0,t.jsx)(s.code,{children:"js2"})," has joint\npositions ",(0,t.jsx)(s.code,{children:"(x1 + y1, x2 + y2, x3 + y3)"}),". The same applies for subtraction and is true for all state variable vectors."]}),"\n",(0,t.jsxs)(s.p,{children:["A ",(0,t.jsx)(s.code,{children:"JointState"})," can also be multiplied or divided by a scalar to scale each state variable element-wise."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"state_representation::JointState double_state = 2.0 * js1;\nstate_representation::JointState half_state = js1 / 2.0;\n"})})})}),"\n",(0,t.jsx)(s.h2,{id:"derived-joint-state-classes",children:"Derived joint state classes"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"JointState"})," class contains all spatial and dynamic state variables of a joint collection. In some cases, it is\nconvenient to operate only with specific state variables. The following derived classes are defined:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"JointPositions"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"JointVelocities"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"JointAccelerations"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"JointTorques"})}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"joint-positions",children:"Joint positions"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"JointPositions"})," class defines only the positions of joints."]}),"\n",(0,t.jsxs)(s.p,{children:["In addition to the constructors inherited from ",(0,t.jsx)(s.code,{children:"JointState"}),", it can be constructed with a vector of initial positions."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'Eigen::VectorXd initial_positions(3);\ninitial_positions << 1.0, 2.0, 3.0;\n\n// create a 3-axis robot with initial positions and default joint names\nstate_representation::JointPositions("my_robot", initial_positions);\n\n// assign joint names alongside the initial positions\nstate_representation::JointPositions("my_robot", { "shoulder", "elbow", "wrist" }, initial_positions);\n'})})})}),"\n",(0,t.jsxs)(s.p,{children:["Addition and subtraction is supported between ",(0,t.jsx)(s.code,{children:"JointPositions"})," and ",(0,t.jsx)(s.code,{children:"JointState"}),", provided that they are compatible."]}),"\n",(0,t.jsx)(s.p,{children:"The return type of each compatible operation is shown below."}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"JointPositions r1 = joint_positions + other_joint_positions;\nJointState r2 = joint_positions + joint_state;\nJointState r3 = joint_state + joint_positions;\n\nJointPositions r4 = joint_positions - other_joint_positions;\nJointState r5 = joint_positions - joint_state;\nJointState r6 = joint_state - joint_positions;\n\njoint_positions += other_joint_positions; // equivalent to joint_positions = joint_positions + other_joint_positions\njoint_positions += joint_state; // equivalent to joint_positions = joint_positions + joint_state\n\njoint_positions -= other_joint_positions;\njoint_positions -= joint_state;\n"})})})}),"\n",(0,t.jsxs)(s.p,{children:["The time derivative of ",(0,t.jsx)(s.code,{children:"JointPositions"})," are ",(0,t.jsx)(s.code,{children:"JointVelocities"}),". The angular displacement of the joints can be converted\ninto angular velocity through division by a time period."]}),"\n",(0,t.jsxs)(s.p,{children:["Operations with time use ",(0,t.jsx)(s.code,{children:"std::chrono::duration"})," types, such as ",(0,t.jsx)(s.code,{children:"std::chrono::milliseconds"}),", ",(0,t.jsx)(s.code,{children:"std::chrono::seconds"}),", or\ndefinitions with ",(0,t.jsx)(s.code,{children:"std::literals::chrono_literals"}),"."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'// take a robot with a displacement of 1 radian around the first joint\nstate_representation::JointPositions positions("my_robot", Eigen::Vector3d(1, 0, 0));\n\n// define a 2 second time duration\nstd::chrono::seconds dt(2);\n\n// dividing position by time yields an angular velocity 0.5 radians per second around the first joint\nstate_representation::JointVelocities velocities = positions / dt;\nvelocities.get_velocities(); // (0.5, 0, 0)\n'})})})}),"\n",(0,t.jsx)(s.h3,{id:"joint-velocities",children:"Joint velocities"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"JointVelocities"})," class defines only the velocities of joints."]}),"\n",(0,t.jsxs)(s.p,{children:["In addition to the constructors inherited from ",(0,t.jsx)(s.code,{children:"JointState"}),", it can be constructed with a vector of initial velocities:"]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'Eigen::VectorXd initial_velocities(3);\ninitial_velocities << 1.0, 2.0, 3.0;\n\n// create a 3-axis robot with initial velocities and default joint names\nstate_representation::JointVelocities("my_robot", initial_velocities);\n\n// assign joint names alongside the initial velocities\nstate_representation::JointVelocities("my_robot", { "shoulder", "elbow", "wrist" }, initial_velocities);\n'})})})}),"\n",(0,t.jsxs)(s.p,{children:["Addition and subtraction is supported between ",(0,t.jsx)(s.code,{children:"JointVelocities"})," and ",(0,t.jsx)(s.code,{children:"JointState"}),", provided that they are compatible."]}),"\n",(0,t.jsx)(s.p,{children:"The return type of each compatible operation is shown below."}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"JointVelocities r1 = joint_velocities + other_joint_velocities;\nJointState r2 = joint_velocities + joint_state;\nJointState r3 = joint_state + joint_velocities;\n\nJointVelocities r4 = joint_velocities - other_joint_velocities;\nJointState r5 = joint_velocities - joint_state;\nJointState r6 = joint_state - joint_velocities;\n\njoint_velocities += other_joint_velocities; // equivalent to joint_velocities = joint_velocities + other_joint_velocities\njoint_velocities += joint_state; // equivalent to joint_velocities = joint_velocities + joint_state\n\njoint_velocities -= other_joint_velocities;\njoint_velocities -= joint_state;\n"})})})}),"\n",(0,t.jsxs)(s.p,{children:["The time derivative of ",(0,t.jsx)(s.code,{children:"JointVelocities"})," are ",(0,t.jsx)(s.code,{children:"JointAccelerations"}),". The angular velocity of the joints can be converted\ninto angular acceleration through division by a time period."]}),"\n",(0,t.jsxs)(s.p,{children:["Similarly, the time integral of ",(0,t.jsx)(s.code,{children:"JointVelocities"})," are ",(0,t.jsx)(s.code,{children:"JointPositions"}),". The angular velocity of the joints can be\nconverted into an angular displacement through multiplication by a time period."]}),"\n",(0,t.jsxs)(s.p,{children:["Operations with time use ",(0,t.jsx)(s.code,{children:"std::chrono::duration"})," types, such as ",(0,t.jsx)(s.code,{children:"std::chrono::milliseconds"}),", ",(0,t.jsx)(s.code,{children:"std::chrono::seconds"}),", or\ndefinitions with ",(0,t.jsx)(s.code,{children:"std::literals::chrono_literals"}),"."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'// take a robot with an angular velocity of 1 radian per second around the first joint\nstate_representation::JointVelocities velocities("my_robot", Eigen::Vector3d(1, 0, 0));\n\n// define a 0.5 second time duration\nstd::chrono::milliseconds dt(500);\n\n// dividing velocity by time yields an angular acceleration 2 radians per second squared around the first joint\nstate_representation::JointAccelerations accelerations = velocities / dt;\naccelerations.get_accelerations(); // (2, 0, 0)\n\n// multiplying velocity by time yields joint positions with a displacement of 0.5 radians around the first joint\nstate_representation::JointPositions positions = velocities * dt;\npositions.get_positions(); // (0.5, 0, 0)\n'})})})}),"\n",(0,t.jsx)(s.p,{children:"Note that the result of the integration is the displacement from an initial (zero) position. To offset the integration,\nsimply add initial joint positions with the same name and joint names."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-console",children:"// add initial positions to offset the integration \npositions = initial_positions + velocities * dt\n\n// joint positions can also be updated through a continuous integration of joint velocities\npositions += velocities * dt\n"})}),"\n",(0,t.jsx)(s.h3,{id:"joint-accelerations",children:"Joint accelerations"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"JointAccelerations"})," class defines only the accelerations of joints."]}),"\n",(0,t.jsxs)(s.p,{children:["In addition to the constructors inherited from ",(0,t.jsx)(s.code,{children:"JointState"}),", it can be constructed with a vector of initial\naccelerations:"]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'Eigen::VectorXd initial_accelerations(3);\ninitial_accelerations << 1.0, 2.0, 3.0;\n\n// create a 3-axis robot with initial accelerations and default joint names\nstate_representation::JointAccelerations("my_robot", initial_accelerations);\n\n// assign joint names alongside the initial accelerations\nstate_representation::JointAccelerations("my_robot", { "shoulder", "elbow", "wrist" }, initial_accelerations);\n'})})})}),"\n",(0,t.jsxs)(s.p,{children:["Addition and subtraction is supported between ",(0,t.jsx)(s.code,{children:"JointAccelerations"})," and ",(0,t.jsx)(s.code,{children:"JointState"}),", provided that they are compatible."]}),"\n",(0,t.jsx)(s.p,{children:"The return type of each compatible operation is shown below."}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"JointAccelerations r1 = joint_accelerations + other_joint_accelerations;\nJointState r2 = joint_accelerations + joint_state;\nJointState r3 = joint_state + joint_accelerations;\n\nJointAccelerations r4 = joint_accelerations - other_joint_accelerations;\nJointState r5 = joint_accelerations - joint_state;\nJointState r6 = joint_state - joint_accelerations;\n\njoint_accelerations += other_joint_accelerations; // equivalent to joint_accelerations = joint_accelerations + other_joint_accelerations\njoint_accelerations += joint_state; // equivalent to joint_accelerations = joint_accelerations + joint_state\n\njoint_accelerations -= other_joint_accelerations;\njoint_accelerations -= joint_state;\n"})})})}),"\n",(0,t.jsxs)(s.p,{children:["The time integral of ",(0,t.jsx)(s.code,{children:"JointAccelerations"})," are ",(0,t.jsx)(s.code,{children:"JointVelocities"}),". The angular acceleration of the joints can be converted\ninto an angular velocities through multiplication by a time period."]}),"\n",(0,t.jsxs)(s.p,{children:["Operations with time use ",(0,t.jsx)(s.code,{children:"std::chrono::duration"})," types, such as ",(0,t.jsx)(s.code,{children:"std::chrono::milliseconds"}),", ",(0,t.jsx)(s.code,{children:"std::chrono::seconds"}),", or\ndefinitions with ",(0,t.jsx)(s.code,{children:"std::literals::chrono_literals"}),"."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'// take a robot with an angular acceleration of 1 radian per second squared around the first joint\nstate_representation::JointAccelerations accelerations("my_robot", Eigen::Vector3d(1, 0, 0));\n\n// define a 0.5 second time duration\nstd::chrono::milliseconds dt(500);\n\n// multiplying acceleration by time yields an angular velocity of 0.5 radians around the first joint\nstate_representation::JointVelocities velocities = accelerations * dt;\nvelocities.get_velocities(); // (0.5, 0, 0)\n'})})})}),"\n",(0,t.jsx)(s.p,{children:"Note that the result of the integration assumes zero initial joint velocities. To offset the integration, simply add\ninitial joint velocities with the same name and joint names."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-console",children:"// add initial velocities to offset the integration \nvelocities = initial_velocities + accelerations * dt\n\n// joint velocities can also be updated through a continuous integration of joint accelerations\nvelocities += accelerations * dt\n"})}),"\n",(0,t.jsx)(s.h3,{id:"joint-torques",children:"Joint torques"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"JointTorques"})," class defines only the torques of joints."]}),"\n",(0,t.jsxs)(s.p,{children:["In addition to the constructors inherited from ",(0,t.jsx)(s.code,{children:"JointState"}),", it can be constructed with a vector of initial torques."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'Eigen::VectorXd initial_torques(3);\ninitial_torques << 1.0, 2.0, 3.0;\n\n// create a 3-axis robot with initial torques and default joint names\nstate_representation::JointTorques("my_robot", initial_torques);\n\n// assign joint names alongside the initial torques\nstate_representation::JointTorques("my_robot", { "shoulder", "elbow", "wrist" }, initial_torques);\n'})})})}),"\n",(0,t.jsxs)(s.p,{children:["Addition and subtraction is supported between ",(0,t.jsx)(s.code,{children:"JointTorques"})," and ",(0,t.jsx)(s.code,{children:"JointState"}),", provided that they are compatible."]}),"\n",(0,t.jsx)(s.p,{children:"The return type of each compatible operation is shown below."}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"JointTorques r1 = joint_torques + other_joint_torques;\nJointState r2 = joint_torques + joint_state;\nJointState r3 = joint_state + joint_torques;\n\nJointTorques r4 = joint_torques - other_joint_torques;\nJointState r5 = joint_torques - joint_state;\nJointState r6 = joint_state - joint_torques;\n\njoint_torques += other_joint_torques; // equivalent to joint_torques = joint_torques + other_joint_torques\njoint_torques += joint_state; // equivalent to joint_torques = joint_torques + joint_state\n\njoint_torques -= other_joint_torques;\njoint_torques -= joint_state;\n"})})})}),"\n",(0,t.jsx)(s.h2,{id:"jacobian",children:"Jacobian"}),"\n",(0,t.jsx)(s.p,{children:"In robotics, the Jacobian is used to map state variables between joint space and Cartesian space. Mathematically, it\nis a matrix containing the set of partial derivatives for a vector function."}),"\n",(0,t.jsx)(s.p,{children:"Most commonly, it is used to convert joint velocities of a robot into the Cartesian velocity of the end-effector.\nConversely, its transpose can map a Cartesian wrench applied at the end-effector to the associated torques at each\njoint. The Jacobian matrix has additional uses for inverse kinematics and null-space control."}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"Jacobian"})," class is a wrapper for the underlying matrix that works directly with ",(0,t.jsx)(s.code,{children:"JointState"})," and ",(0,t.jsx)(s.code,{children:"CartesianState"}),"\ntypes while providing additional methods and operators."]}),"\n",(0,t.jsx)(s.h3,{id:"reference-frame-and-joint-names",children:"Reference frame and joint names"}),"\n",(0,t.jsxs)(s.p,{children:["Because the ",(0,t.jsx)(s.code,{children:"Jacobian"})," class is designed to map state between joint and Cartesian space, it shares the properties of\nboth ",(0,t.jsx)(s.code,{children:"JointState"})," and ",(0,t.jsx)(s.code,{children:"CartesianState"}),"; the accessor methods are listed below:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"get_name()"}),' returns the "robot name", i.e. the name of the corresponding ',(0,t.jsx)(s.code,{children:"JointState"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"get_frame()"})," returns the end-effector frame name, i.e. the name of the corresponding ",(0,t.jsx)(s.code,{children:"CartesianState"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"get_joint_names()"})," returns the vector of joint names of the corresponding ",(0,t.jsx)(s.code,{children:"JointState"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"get_reference_frame()"})," returns the reference frame of the corresponding ",(0,t.jsx)(s.code,{children:"CartesianState"})]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Each property is initialized on construction and has a corresponding setter for post-construction modifications."}),"\n",(0,t.jsx)("h3",{id:"jacobian-construction",children:"Construction"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"Jacobian"})," constructors take a name, a number of joints or optional vector of joint names, a frame name, and an optional\nreference frame. As with ",(0,t.jsx)(s.code,{children:"JointState"}),", joint names are default initialized based on their index, starting from 0:\n",(0,t.jsx)(s.code,{children:'{"joint0", "joint1", ..., "jointX"}'}),". As with ",(0,t.jsx)(s.code,{children:"CartesianState"}),', the reference frame is "world" by default.']}),"\n",(0,t.jsxs)(s.p,{children:["Constructing a ",(0,t.jsx)(s.code,{children:"Jacobian"})," without any data results in an empty state. The initial data can be set from an\n",(0,t.jsx)(s.code,{children:"Eigen::MatrixXd"})," matrix of size ",(0,t.jsx)(s.code,{children:"6 x N"}),", where ",(0,t.jsx)(s.code,{children:"N"})," is the number of joints. Alternatively, the  ",(0,t.jsx)(s.code,{children:"Random()"})," static\nconstructor can be used, which sets all matrix elements to a unit random state within a uniform distribution."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'// 3-axis robot "my_robot" with end-effector frame "A" expressed in "world" (default)\nstate_representation::Jacobian j1("my_robot", 3, "A");\nj1.get_joint_names(); // {"joint0", "joint1", "joint2"}\n\n// the reference frame can be supplied to any constructor as the last argument:\n// 3-axis robot "my_robot" with end-effector "A" expressed in "B"\nstate_representation::Jacobian("my_robot", 3, "A", "B");\n\n// 3-axis robot "my_robot" with specific joint names and end-effector frame "A" expressed in "world"\nstd::vector<std::string> joint_names = { "shoulder", "elbow", "wrist" };\nstate_representation::Jacobian j2("my_robot", joint_names, "A");\nj2.get_joint_names(); // {"shoulder", "elbow", "wrist"}\n\n// same as above but in reference frame "B"\nstate_representation::Jacobian j2("my_robot", joint_names, "A", "B");\n\n\n\nauto data = Eigen::MatrixXd::Zero(6, 3);\n// 3-axis robot "my_robot" with end-effector frame "A" with specific data matrix and default joint names\nstate_representation::Jacobian("my_robot", "A", data); // expressed in "world"\nstate_representation::Jacobian("my_robot", "A", data, "B"); // expressed in reference frame "B"\n\n// 3-axis robot "my_robot" with end-effector frame "A" with specific data matrix and custom joint names\nstate_representation::Jacobian("my_robot", joint_names, "A", data); // expressed in "world"\nstate_representation::Jacobian("my_robot", joint_names, "A", data, "B"); // expressed in reference frame "B"\n\n// 3-axis robot "my_robot" with end-effector frame "A" with random data matrix and default joint names\nstate_representation::Jacobian::Random("my_robot", 3, "A"); // expressed in "world"\nstate_representation::Jacobian::Random("my_robot", 3, "A", "B"); // expressed in reference frame "B"\n\n// 3-axis robot "my_robot" with end-effector frame "A" with random data matrix and custom joint names\nstate_representation::Jacobian::Random("my_robot", joint_names, "A"); // expressed in "world"\nstate_representation::Jacobian::Random("my_robot", joint_names, "A", "B"); // expressed in reference frame "B"\n'})})})}),"\n",(0,t.jsx)(s.h4,{id:"construction-from-robot-model",children:"Construction from robot model"}),"\n",(0,t.jsxs)(s.p,{children:["A ",(0,t.jsx)(s.code,{children:"Jacobian"})," that accurately maps from joint space to Cartesian space depends on the structure of the robot (the spatial\noffset between each joint) in addition to the current joint positions. Advanced users may calculate or supply the matrix\nmanually using the appropriate constructor or data setters. The easiest way to construct an accurate ",(0,t.jsx)(s.code,{children:"Jacobian"})," is to\nuse the ",(0,t.jsx)(s.code,{children:"robot_model::Model"})," class. See the documentation of the ",(0,t.jsx)(s.code,{children:"robot_model"})," module for more details; an example is\ngiven below."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'robot_model::Model robot("my_robot", "/examples/my_robot.urdf");\n\nauto joint_positions = state_representation::JointPositions::Random("my_robot", robot.get_joint_frames());\nauto jacobian = model.compute_jacobian(joint_positions);\n'})})})}),"\n",(0,t.jsx)(s.h3,{id:"jacobian-matrix-operations",children:"Jacobian matrix operations"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"Jacobian"})," type is a wrapper for matrix data of type ",(0,t.jsx)(s.code,{children:"Eigen::MatrixXd"}),". The matrix always has 6 rows, corresponding\nto the 6 Cartesian degrees of freedom (linear X, Y, Z and angular X, Y, Z, in that order). The matrix has a number\nof columns corresponding to the number of joints; a 3-axis robot will have a ",(0,t.jsx)(s.code,{children:"6 x 3"})," Jacobian matrix while a 6-axis\nrobot will have a square ",(0,t.jsx)(s.code,{children:"6 x 6"})," matrix."]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"data()"})," method returns the underlying matrix, while ",(0,t.jsx)(s.code,{children:"set_data()"})," can be used to overwrite the matrix. When setting\nthe data on a previously constructed ",(0,t.jsx)(s.code,{children:"Jacobian"}),", the matrix must have the correct size."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'state_representation::Jacobian jacobian("my_robot", 3, "A");\njacobian.set_data(Eigen::MatrixXd::Random(6, 3)); \n\n// an IncompatibleSizeException will be thrown if the size is not correct\njacobian.set_data(Eigen::MatrixXd::Random(6, 4)); // error!\njacobian.set_data(Eigen::MatrixXd::Random(5, 3)); // error!\n'})})})}),"\n",(0,t.jsx)(s.p,{children:"Variants of the matrix such as the transpose or inverse can be accessed with the following methods."}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'state_representation::Jacobian j3("3_axis_robot", 3, "A");\nstate_representation::Jacobian j6("6_axis_robot", 6, "A");\n\n/// for a 6 x 3 Jacobian, returns the 3 x 6 transposed matrix\nEigen::MatrixXd jT = j3.transpose();\n\n// for a square Jacobian, returns the inverted matrix\nEigen::MatrixXd j_inv = j6.inverse();\nj3.inverse(); // throws an IncompatibleSizeException as non-square matrices are not directly invertible\n\n// for non-square Jacobians, use the pseudo-inverse instead\nEigen::MatrixXd j_pinv = j3.pseudoinverse();\n'})})})}),"\n",(0,t.jsx)(s.h3,{id:"jointvelocities-to-cartesiantwist",children:"JointVelocities to CartesianTwist"}),"\n",(0,t.jsxs)(s.p,{children:["To transform ",(0,t.jsx)(s.code,{children:"JointVelocities"})," into a ",(0,t.jsx)(s.code,{children:"CartesiantTwist"}),", simply multiply the ",(0,t.jsx)(s.code,{children:"Jacobian"})," by the ",(0,t.jsx)(s.code,{children:"JointVelocities"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["For the transformation to be valid, the Jacobian matrix data must be set according to the current robot configuration.\nSee also the section ",(0,t.jsx)(s.a,{href:"#construction-from-robot-model",children:"Construction from robot model"}),". In addition, the ",(0,t.jsx)(s.code,{children:"JointVelocites"}),"\nmust be compatible with the ",(0,t.jsx)(s.code,{children:"Jacobian"}),", with the same name, number of joints and joint names."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'state_representation::Jacobian jacobian("my_robot", 3, "end_effector", "base_frame");\njacobian.set_data(...); // set the Jacobian data matrix for the current robot configuration\n\n// get joint velocities for the same robot\nauto joint_velocities = state_representation::JointVelocities::Random("my_robot", 3);\n\n// compute the twist of the "end_effector" frame expressed in "base_frame"\nstate_representation::CartesianTwist end_effector_twist = jacobian * joint_velocities;\n'})})})}),"\n",(0,t.jsx)(s.h3,{id:"cartesiantwist-to-jointvelocities",children:"CartesianTwist to JointVelocities"}),"\n",(0,t.jsxs)(s.p,{children:["The transformation from ",(0,t.jsx)(s.code,{children:"CartesianTwist"})," to ",(0,t.jsx)(s.code,{children:"JointVelocities"})," requires the inverse of the Jacobian matrix (or, in the\ncase of non-square matrices, the pseudo-inverse)."]}),"\n",(0,t.jsxs)(s.p,{children:["One approach is to use the matrix results of the ",(0,t.jsx)(s.code,{children:"inverse()"})," or ",(0,t.jsx)(s.code,{children:"pseudoinverse()"})," methods and multiply them directly\nwith data vectors."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'state_representation::Jacobian j3("3_axis_robot", 3, "end_effector", "base_frame");\nstate_representation::Jacobian j6("6_axis_robot", 6, "end_effector", "base_frame");\nj3.set_data(...); // set the 6 x 3 Jacobian data matrix for the current robot configuration\nj6.set_data(...); // set the 6 x 6 Jacobian data matrix for the current robot configuration\n\nauto raw_end_effector_twist = Eigen::VectorXd::Random(3);\nEigen::VectorXd raw_joint_velocities = j3.pseudoinverse() * raw_end_effector_twist; // vector of 3 joint velocities\n\nraw_end_effector_twist = Eigen::VectorXd::Random(6);\nEigen::VectorXd raw_joint_velocities = j6.inverse() * raw_end_effector_twist; // vector of 6 joint velocities\n'})})})}),"\n",(0,t.jsxs)(s.p,{children:["However, this approach is not ideal for two reasons; it doesn't operate directly on ",(0,t.jsx)(s.code,{children:"CartesianTwist"})," and\n",(0,t.jsx)(s.code,{children:"JointVelocities"})," types, and is mathematically inefficient in the case of a square Jacobian (i.e. a 6-axis robot).\nFor the equation ",(0,t.jsx)(s.code,{children:"W = inv(J) * V"}),", W can be solved for more efficiently by using QR decomposition."]}),"\n",(0,t.jsxs)(s.p,{children:["Instead of accessing the transformed matrix and multiplying it by a data vector, instead use the overloaded functions\ndirectly with ",(0,t.jsx)(s.code,{children:"CartesianTwist"})," as illustrated below. Note that the ",(0,t.jsx)(s.code,{children:"CartesianTwist"})," must be compatible with the\n",(0,t.jsx)(s.code,{children:"Jacobian"}),", with a matching frame and reference frame."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'// get the Cartesian twist of the same frame and reference frame\nauto end_effector_twist = state_representation::CartesianTwist::Random("end_effector", "base_frame");\n\n// compute the joint velocities of the 3-axis robot from the Cartesian twist using the pseudo-inverse\nstate_representation::JointVelocities j3_velocities = j3.pseudoinverse(end_effector_twist);\n\n// compute the joint velocities of the 3-axis robot from the Cartesian twist using the inverse\nstate_representation::JointVelocities j6_velocities = j6.inverse(end_effector_twist);\n'})})})}),"\n",(0,t.jsx)(s.h3,{id:"cartesianwrench-to-jointtorques",children:"CartesianWrench to JointTorques"}),"\n",(0,t.jsxs)(s.p,{children:["The transformation of a ",(0,t.jsx)(s.code,{children:"CartesianWrench"})," into ",(0,t.jsx)(s.code,{children:"JointTorques"})," uses the transpose of the Jacobian matrix."]}),"\n",(0,t.jsxs)(s.p,{children:["As with the conversion from ",(0,t.jsx)(s.a,{href:"#cartesiantwist-to-jointvelocities",children:"CartesianTwist to JointVelocities"}),", the operations\ncan either be done using the matrix result of ",(0,t.jsx)(s.code,{children:"transpose()"}),", or by providing the ",(0,t.jsx)(s.code,{children:"CartesianWrench"})," as the input to the\noverloaded ",(0,t.jsx)(s.code,{children:"tranpose()"})," function. The latter has the benefit of working directly with the abstract state classes\ninstead of raw data vectors. Note that the ",(0,t.jsx)(s.code,{children:"CartesianWrench"})," must be compatible with the ",(0,t.jsx)(s.code,{children:"Jacobian"}),", with a matching\nframe and reference frame."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'state_representation::Jacobian jacobian("my_robot", 3, "end_effector", "base_frame");\njacobian.set_data(...); // set the Jacobian data matrix for the current robot configuration\n\n// get the Cartesian wrench of the same frame and reference frame\nauto end_effector_wrench = state_representation::CartesianTwist::Random("end_effector", "base_frame");\n\n// compute the torques of each joint from the Cartesian twist\nstate_representation::JointTorques joint_torques = jacobian.transpose(end_effector_wrench);\n\n// the matrix product should only be used on raw data vectors\nEigen::VectorXd raw_joint_torques = jacobian.transpose() * end_effector_wrench.get_wrench();\n'})})})}),"\n",(0,t.jsx)(s.h3,{id:"changing-the-jacobian-reference-frame",children:"Changing the Jacobian reference frame"}),"\n",(0,t.jsxs)(s.p,{children:["Whenever the ",(0,t.jsx)(s.code,{children:"Jacobian"})," is used to convert between joint and Cartesian space, the Cartesian state variables must be\nexpressed in the same reference frame as the ",(0,t.jsx)(s.code,{children:"Jacobian"}),". If the ",(0,t.jsx)(s.code,{children:"Jacobian"})," is expressed in a robot base frame while\na ",(0,t.jsx)(s.code,{children:"CartesianTwist"})," is measured in a world reference frame, then that twist cannot be directly used to find the\ncorresponding joint velocities."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'auto jacobian = state_representation::Jacobian::Random("my_robot", 3, "end_effector", "base_frame");\nauto twist_in_world = state_representation::CartesianTwist::Random("end_effector", "world");\n\njacobian.pseudoinverse(twist_in_world); // error! IncompatibleStatesException\n'})})})}),"\n",(0,t.jsxs)(s.p,{children:["If the transformation between the robot base frame and world is known and expressed as a ",(0,t.jsx)(s.code,{children:"CartesianPose"}),", it could be\nused to transform the ",(0,t.jsx)(s.code,{children:"CartesianTwist"})," relative to the robot base frame (see the section describing\n",(0,t.jsx)(s.a,{href:"#cartesian-transforms-changing-the-reference-frame",children:"Cartesian transforms"})," for more information)."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'auto pose = state_representation::CartesianPose::Random("base_frame", "world");\nauto twist_in_base_frame = pose.inverse() * twist_in_world;\n\nstate_representation::JointVelocities joint_velocities = jacobian.pseudoinverse(twist_in_base_frame);\n'})})})}),"\n",(0,t.jsx)(s.p,{children:"This can also be applied to the reverse case:"}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"state_representation::CartesianTwist recalculated_twist_in_base_frame = jacobian * joint_velocities;\nauto recalculated_twist_in_world = pose * recalculated_twist_in_base_frame;\n"})})})}),"\n",(0,t.jsxs)(s.p,{children:["However, transforming the Cartesian state variables before and after manipulation with the ",(0,t.jsx)(s.code,{children:"Jacobian"})," can be\ninefficient. Consider the case of high-frequency sensor data measured in a different reference frame needing to be\ntransformed before every Jacobian operation."]}),"\n",(0,t.jsxs)(s.p,{children:["Instead, a ",(0,t.jsx)(s.code,{children:"CartesianPose"})," can be used to change the reference frame of the ",(0,t.jsx)(s.code,{children:"Jacobian"})," through a corresponding linear\ntransformation of the underlying data matrix. As a result, previously incompatible operations automatically work in\nthe new reference frame."]}),"\n",(0,t.jsx)(r.A,{groupId:"programming-language",children:(0,t.jsx)(l.A,{value:"c++",label:"C++",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"state_representation::Jacobian jacobian_in_world = pose * jacobian;\njacobian.get_reference_frame(); // world\n\nstate_representation::JointVelocities joint_velocities = jacobian_in_world.pseudoinverse(twist_in_world);\n\nstate_representation::CartesianTwist recalculated_twist_in_world = jacobian_in_world * joint_velocities;\n"})})})})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},8453:(e,s,a)=>{a.d(s,{R:()=>r,x:()=>l});var n=a(6540);const t={},i=n.createContext(t);function r(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),n.createElement(i.Provider,{value:s},e.children)}},9329:(e,s,a)=>{a.d(s,{A:()=>r});a(6540);var n=a(8215);const t={tabItem:"tabItem_Ymn6"};var i=a(4848);function r(e){let{children:s,hidden:a,className:r}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,n.A)(t.tabItem,r),hidden:a,children:s})}}}]);